
Lab04_ActuatorECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f2c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08005038  08005038  00006038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005234  08005234  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  08005234  08005234  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005234  08005234  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005234  08005234  00006234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005238  08005238  00006238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800523c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000006c  080052a8  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080052a8  00007290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b046  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025bc  00000000  00000000  000120db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00014698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000773  00000000  00000000  00015090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192fc  00000000  00000000  00015803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9fd  00000000  00000000  0002eaff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008747a  00000000  00000000  0003c4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000319c  00000000  00000000  000c39bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000c6b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005020 	.word	0x08005020

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08005020 	.word	0x08005020

0800014c <CAN_Filter_Init>:

extern CAN_HandleTypeDef hcan;
extern UART_HandleTypeDef huart1;
IsoTpLink isoTP;

inline static void CAN_Filter_Init(CAN_FilterTypeDef* can_filter, uint16_t receive_ID){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
	can_filter->FilterActivation = CAN_FILTER_ENABLE;
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	2201      	movs	r2, #1
 800015c:	621a      	str	r2, [r3, #32]
	can_filter->FilterBank = 0;
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	2200      	movs	r2, #0
 8000162:	615a      	str	r2, [r3, #20]
	can_filter->FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2200      	movs	r2, #0
 8000168:	611a      	str	r2, [r3, #16]
	can_filter->FilterMode = CAN_FILTERMODE_IDLIST;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2201      	movs	r2, #1
 800016e:	619a      	str	r2, [r3, #24]
	can_filter->FilterScale = CAN_FILTERSCALE_16BIT;
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	2200      	movs	r2, #0
 8000174:	61da      	str	r2, [r3, #28]
	can_filter->FilterIdHigh = receive_ID << 5;
 8000176:	887b      	ldrh	r3, [r7, #2]
 8000178:	015a      	lsls	r2, r3, #5
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	601a      	str	r2, [r3, #0]
}
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <CanTP_Init>:

uint8_t CanTP_Init(uint16_t send_ID, uint16_t receive_ID) {
 8000188:	b580      	push	{r7, lr}
 800018a:	b0c4      	sub	sp, #272	@ 0x110
 800018c:	af02      	add	r7, sp, #8
 800018e:	4602      	mov	r2, r0
 8000190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000194:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8000198:	801a      	strh	r2, [r3, #0]
 800019a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800019e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80001a2:	460a      	mov	r2, r1
 80001a4:	801a      	strh	r2, [r3, #0]
	// initialize CAN filter
	CAN_FilterTypeDef can_filter;
	CAN_Filter_Init(&can_filter, receive_ID);
 80001a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80001aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80001ae:	881a      	ldrh	r2, [r3, #0]
 80001b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80001b4:	4611      	mov	r1, r2
 80001b6:	4618      	mov	r0, r3
 80001b8:	f7ff ffc8 	bl	800014c <CAN_Filter_Init>

	// configure CAN filter
	HAL_ERR(HAL_CAN_ConfigFilter(&hcan, &can_filter));
 80001bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80001c0:	4619      	mov	r1, r3
 80001c2:	4820      	ldr	r0, [pc, #128]	@ (8000244 <CanTP_Init+0xbc>)
 80001c4:	f001 f975 	bl	80014b2 <HAL_CAN_ConfigFilter>
 80001c8:	4603      	mov	r3, r0
 80001ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80001ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d003      	beq.n	80001de <CanTP_Init+0x56>
 80001d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80001da:	b2db      	uxtb	r3, r3
 80001dc:	e02d      	b.n	800023a <CanTP_Init+0xb2>

	// enable FIFO0 interrupt
	HAL_ERR(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING));
 80001de:	2102      	movs	r1, #2
 80001e0:	4818      	ldr	r0, [pc, #96]	@ (8000244 <CanTP_Init+0xbc>)
 80001e2:	f001 fc97 	bl	8001b14 <HAL_CAN_ActivateNotification>
 80001e6:	4603      	mov	r3, r0
 80001e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80001ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d003      	beq.n	80001fc <CanTP_Init+0x74>
 80001f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	e01e      	b.n	800023a <CanTP_Init+0xb2>

	// start CAN
	HAL_ERR(HAL_CAN_Start(&hcan));
 80001fc:	4811      	ldr	r0, [pc, #68]	@ (8000244 <CanTP_Init+0xbc>)
 80001fe:	f001 fa21 	bl	8001644 <HAL_CAN_Start>
 8000202:	4603      	mov	r3, r0
 8000204:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800020c:	2b00      	cmp	r3, #0
 800020e:	d003      	beq.n	8000218 <CanTP_Init+0x90>
 8000210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000214:	b2db      	uxtb	r3, r3
 8000216:	e010      	b.n	800023a <CanTP_Init+0xb2>

	// initialize an IsoTpLink
	uint8_t send_buffer[CANTP_BUFF_SIZE];
	uint8_t received_buffer[CANTP_BUFF_SIZE];
	isotp_init_link(
 8000218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800021c:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8000220:	8819      	ldrh	r1, [r3, #0]
 8000222:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8000226:	2364      	movs	r3, #100	@ 0x64
 8000228:	9301      	str	r3, [sp, #4]
 800022a:	f107 030c 	add.w	r3, r7, #12
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	2364      	movs	r3, #100	@ 0x64
 8000232:	4805      	ldr	r0, [pc, #20]	@ (8000248 <CanTP_Init+0xc0>)
 8000234:	f003 fc2a 	bl	8003a8c <isotp_init_link>
		&isoTP, send_ID,
		send_buffer, CANTP_BUFF_SIZE,
		received_buffer, CANTP_BUFF_SIZE
	);
	return HAL_OK;
 8000238:	2300      	movs	r3, #0
}
 800023a:	4618      	mov	r0, r3
 800023c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	200000c8 	.word	0x200000c8
 8000248:	20000088 	.word	0x20000088

0800024c <CanTP_Transmit>:

uint8_t CanTP_Transmit(uint8_t *data, uint16_t length) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	460b      	mov	r3, r1
 8000256:	807b      	strh	r3, [r7, #2]
	// send a message
	HAL_ERR(isotp_send(&isoTP, data, length));
 8000258:	887b      	ldrh	r3, [r7, #2]
 800025a:	461a      	mov	r2, r3
 800025c:	6879      	ldr	r1, [r7, #4]
 800025e:	4811      	ldr	r0, [pc, #68]	@ (80002a4 <CanTP_Transmit+0x58>)
 8000260:	f003 fa0f 	bl	8003682 <isotp_send>
 8000264:	60f8      	str	r0, [r7, #12]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d005      	beq.n	8000278 <CanTP_Transmit+0x2c>
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	b2db      	uxtb	r3, r3
 8000270:	e014      	b.n	800029c <CanTP_Transmit+0x50>
	while (isoTP.send_status == ISOTP_SEND_STATUS_INPROGRESS) {
		isotp_poll(&isoTP);
 8000272:	480c      	ldr	r0, [pc, #48]	@ (80002a4 <CanTP_Transmit+0x58>)
 8000274:	f003 fc31 	bl	8003ada <isotp_poll>
	while (isoTP.send_status == ISOTP_SEND_STATUS_INPROGRESS) {
 8000278:	4b0a      	ldr	r3, [pc, #40]	@ (80002a4 <CanTP_Transmit+0x58>)
 800027a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d0f7      	beq.n	8000272 <CanTP_Transmit+0x26>
	}

	// return the sent message status
	if (ISOTP_SEND_STATUS_IDLE != isoTP.send_status) {
 8000282:	4b08      	ldr	r3, [pc, #32]	@ (80002a4 <CanTP_Transmit+0x58>)
 8000284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d006      	beq.n	800029a <CanTP_Transmit+0x4e>
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4805      	ldr	r0, [pc, #20]	@ (80002a8 <CanTP_Transmit+0x5c>)
 8000292:	f002 f919 	bl	80024c8 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	e000      	b.n	800029c <CanTP_Transmit+0x50>
	}
	return HAL_OK;
 800029a:	2300      	movs	r3, #0
}
 800029c:	4618      	mov	r0, r3
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000088 	.word	0x20000088
 80002a8:	40010c00 	.word	0x40010c00

080002ac <CanTP_Receive>:

uint8_t CanTP_Receive(uint8_t *data, uint16_t *length, uint32_t timeout) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
	// wait for the message to be received until reaching the timeout
	uint32_t start_time = HAL_GetTick();
 80002b8:	f000 fff6 	bl	80012a8 <HAL_GetTick>
 80002bc:	6178      	str	r0, [r7, #20]
	while ((HAL_GetTick() - start_time) < timeout) {
 80002be:	e007      	b.n	80002d0 <CanTP_Receive+0x24>
		isotp_poll(&isoTP);
 80002c0:	4823      	ldr	r0, [pc, #140]	@ (8000350 <CanTP_Receive+0xa4>)
 80002c2:	f003 fc0a 	bl	8003ada <isotp_poll>
		if (isoTP.receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 80002c6:	4b22      	ldr	r3, [pc, #136]	@ (8000350 <CanTP_Receive+0xa4>)
 80002c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d008      	beq.n	80002e2 <CanTP_Receive+0x36>
	while ((HAL_GetTick() - start_time) < timeout) {
 80002d0:	f000 ffea 	bl	80012a8 <HAL_GetTick>
 80002d4:	4602      	mov	r2, r0
 80002d6:	697b      	ldr	r3, [r7, #20]
 80002d8:	1ad3      	subs	r3, r2, r3
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d8ef      	bhi.n	80002c0 <CanTP_Receive+0x14>
 80002e0:	e000      	b.n	80002e4 <CanTP_Receive+0x38>
			break;
 80002e2:	bf00      	nop
		}
	}

	// If the message is received successfully, copy receive buffer to
	// the data container
	if (ISOTP_RECEIVE_STATUS_FULL == isoTP.receive_status) {
 80002e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000350 <CanTP_Receive+0xa4>)
 80002e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d126      	bne.n	800033c <CanTP_Receive+0x90>
		isotp_receive(&isoTP, data, *length, length);
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	881a      	ldrh	r2, [r3, #0]
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	68f9      	ldr	r1, [r7, #12]
 80002f6:	4816      	ldr	r0, [pc, #88]	@ (8000350 <CanTP_Receive+0xa4>)
 80002f8:	f003 fb9c 	bl	8003a34 <isotp_receive>
		uint16_t copylen = isoTP.receive_size;
 80002fc:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <CanTP_Receive+0xa4>)
 80002fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000300:	83fb      	strh	r3, [r7, #30]
		if (copylen > *length) {
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	8bfa      	ldrh	r2, [r7, #30]
 8000308:	429a      	cmp	r2, r3
 800030a:	d902      	bls.n	8000312 <CanTP_Receive+0x66>
			copylen = *length;
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	83fb      	strh	r3, [r7, #30]
		}
		for (int i = 0; i < copylen; i++) {
 8000312:	2300      	movs	r3, #0
 8000314:	61bb      	str	r3, [r7, #24]
 8000316:	e00b      	b.n	8000330 <CanTP_Receive+0x84>
			data[i] = isoTP.receive_buffer[i];
 8000318:	4b0d      	ldr	r3, [pc, #52]	@ (8000350 <CanTP_Receive+0xa4>)
 800031a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	441a      	add	r2, r3
 8000320:	69bb      	ldr	r3, [r7, #24]
 8000322:	68f9      	ldr	r1, [r7, #12]
 8000324:	440b      	add	r3, r1
 8000326:	7812      	ldrb	r2, [r2, #0]
 8000328:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < copylen; i++) {
 800032a:	69bb      	ldr	r3, [r7, #24]
 800032c:	3301      	adds	r3, #1
 800032e:	61bb      	str	r3, [r7, #24]
 8000330:	8bfb      	ldrh	r3, [r7, #30]
 8000332:	69ba      	ldr	r2, [r7, #24]
 8000334:	429a      	cmp	r2, r3
 8000336:	dbef      	blt.n	8000318 <CanTP_Receive+0x6c>
		}
		return HAL_OK;
 8000338:	2300      	movs	r3, #0
 800033a:	e005      	b.n	8000348 <CanTP_Receive+0x9c>
	}
	HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_SET);
 800033c:	2201      	movs	r2, #1
 800033e:	2108      	movs	r1, #8
 8000340:	4804      	ldr	r0, [pc, #16]	@ (8000354 <CanTP_Receive+0xa8>)
 8000342:	f002 f8c1 	bl	80024c8 <HAL_GPIO_WritePin>
	return HAL_TIMEOUT;
 8000346:	2303      	movs	r3, #3
}
 8000348:	4618      	mov	r0, r3
 800034a:	3720      	adds	r7, #32
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000088 	.word	0x20000088
 8000354:	40010c00 	.word	0x40010c00

08000358 <CanTP_RcvCallback>:

void CanTP_RcvCallback() {
 8000358:	b580      	push	{r7, lr}
 800035a:	b08a      	sub	sp, #40	@ 0x28
 800035c:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8] = {0};
 800035e:	2300      	movs	r3, #0
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	2300      	movs	r3, #0
 8000364:	60bb      	str	r3, [r7, #8]
	HAL_CAN_GetRxMessage(&hcan, CAN_FILTER_FIFO0, &RxHeader, RxData);
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	f107 020c 	add.w	r2, r7, #12
 800036c:	2100      	movs	r1, #0
 800036e:	4807      	ldr	r0, [pc, #28]	@ (800038c <CanTP_RcvCallback+0x34>)
 8000370:	f001 faaf 	bl	80018d2 <HAL_CAN_GetRxMessage>
	isotp_on_can_message(&isoTP, RxData, RxHeader.DLC);
 8000374:	69fb      	ldr	r3, [r7, #28]
 8000376:	b2da      	uxtb	r2, r3
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	4619      	mov	r1, r3
 800037c:	4804      	ldr	r0, [pc, #16]	@ (8000390 <CanTP_RcvCallback+0x38>)
 800037e:	f003 f9ff 	bl	8003780 <isotp_on_can_message>
}
 8000382:	bf00      	nop
 8000384:	3728      	adds	r7, #40	@ 0x28
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	200000c8 	.word	0x200000c8
 8000390:	20000088 	.word	0x20000088

08000394 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000398:	4b18      	ldr	r3, [pc, #96]	@ (80003fc <MX_CAN_Init+0x68>)
 800039a:	4a19      	ldr	r2, [pc, #100]	@ (8000400 <MX_CAN_Init+0x6c>)
 800039c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800039e:	4b17      	ldr	r3, [pc, #92]	@ (80003fc <MX_CAN_Init+0x68>)
 80003a0:	2204      	movs	r2, #4
 80003a2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003a4:	4b15      	ldr	r3, [pc, #84]	@ (80003fc <MX_CAN_Init+0x68>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80003aa:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <MX_CAN_Init+0x68>)
 80003ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80003b0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80003b2:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <MX_CAN_Init+0x68>)
 80003b4:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80003b8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80003ba:	4b10      	ldr	r3, [pc, #64]	@ (80003fc <MX_CAN_Init+0x68>)
 80003bc:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80003c0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <MX_CAN_Init+0x68>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <MX_CAN_Init+0x68>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <MX_CAN_Init+0x68>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003d4:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <MX_CAN_Init+0x68>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003da:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <MX_CAN_Init+0x68>)
 80003dc:	2200      	movs	r2, #0
 80003de:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003e0:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <MX_CAN_Init+0x68>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	@ (80003fc <MX_CAN_Init+0x68>)
 80003e8:	f000 ff68 	bl	80012bc <HAL_CAN_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80003f2:	f000 f976 	bl	80006e2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	200000c8 	.word	0x200000c8
 8000400:	40006400 	.word	0x40006400

08000404 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08a      	sub	sp, #40	@ 0x28
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a35      	ldr	r2, [pc, #212]	@ (80004f4 <HAL_CAN_MspInit+0xf0>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d163      	bne.n	80004ec <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000424:	4b34      	ldr	r3, [pc, #208]	@ (80004f8 <HAL_CAN_MspInit+0xf4>)
 8000426:	69db      	ldr	r3, [r3, #28]
 8000428:	4a33      	ldr	r2, [pc, #204]	@ (80004f8 <HAL_CAN_MspInit+0xf4>)
 800042a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800042e:	61d3      	str	r3, [r2, #28]
 8000430:	4b31      	ldr	r3, [pc, #196]	@ (80004f8 <HAL_CAN_MspInit+0xf4>)
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000438:	613b      	str	r3, [r7, #16]
 800043a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800043c:	4b2e      	ldr	r3, [pc, #184]	@ (80004f8 <HAL_CAN_MspInit+0xf4>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a2d      	ldr	r2, [pc, #180]	@ (80004f8 <HAL_CAN_MspInit+0xf4>)
 8000442:	f043 0308 	orr.w	r3, r3, #8
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b2b      	ldr	r3, [pc, #172]	@ (80004f8 <HAL_CAN_MspInit+0xf4>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0308 	and.w	r3, r3, #8
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000454:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800045a:	2300      	movs	r3, #0
 800045c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000462:	f107 0314 	add.w	r3, r7, #20
 8000466:	4619      	mov	r1, r3
 8000468:	4824      	ldr	r0, [pc, #144]	@ (80004fc <HAL_CAN_MspInit+0xf8>)
 800046a:	f001 fea9 	bl	80021c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800046e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000474:	2302      	movs	r3, #2
 8000476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000478:	2303      	movs	r3, #3
 800047a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	4619      	mov	r1, r3
 8000482:	481e      	ldr	r0, [pc, #120]	@ (80004fc <HAL_CAN_MspInit+0xf8>)
 8000484:	f001 fe9c 	bl	80021c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000488:	4b1d      	ldr	r3, [pc, #116]	@ (8000500 <HAL_CAN_MspInit+0xfc>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	627b      	str	r3, [r7, #36]	@ 0x24
 800048e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000490:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000494:	627b      	str	r3, [r7, #36]	@ 0x24
 8000496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000498:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800049c:	627b      	str	r3, [r7, #36]	@ 0x24
 800049e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80004a6:	4a16      	ldr	r2, [pc, #88]	@ (8000500 <HAL_CAN_MspInit+0xfc>)
 80004a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004aa:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2100      	movs	r1, #0
 80004b0:	2013      	movs	r0, #19
 80004b2:	f001 fe4e 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80004b6:	2013      	movs	r0, #19
 80004b8:	f001 fe67 	bl	800218a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	2014      	movs	r0, #20
 80004c2:	f001 fe46 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80004c6:	2014      	movs	r0, #20
 80004c8:	f001 fe5f 	bl	800218a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2100      	movs	r1, #0
 80004d0:	2015      	movs	r0, #21
 80004d2:	f001 fe3e 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80004d6:	2015      	movs	r0, #21
 80004d8:	f001 fe57 	bl	800218a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80004dc:	2200      	movs	r2, #0
 80004de:	2100      	movs	r1, #0
 80004e0:	2016      	movs	r0, #22
 80004e2:	f001 fe36 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80004e6:	2016      	movs	r0, #22
 80004e8:	f001 fe4f 	bl	800218a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80004ec:	bf00      	nop
 80004ee:	3728      	adds	r7, #40	@ 0x28
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40006400 	.word	0x40006400
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010c00 	.word	0x40010c00
 8000500:	40010000 	.word	0x40010000

08000504 <HAL_CAN_RxFifo0MsgPendingCallback>:
  /* USER CODE END CAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	2120      	movs	r1, #32
 8000510:	4804      	ldr	r0, [pc, #16]	@ (8000524 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000512:	f001 ffd9 	bl	80024c8 <HAL_GPIO_WritePin>
	CanTP_RcvCallback();
 8000516:	f7ff ff1f 	bl	8000358 <CanTP_RcvCallback>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40010c00 	.word	0x40010c00

08000528 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053c:	4b2d      	ldr	r3, [pc, #180]	@ (80005f4 <MX_GPIO_Init+0xcc>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a2c      	ldr	r2, [pc, #176]	@ (80005f4 <MX_GPIO_Init+0xcc>)
 8000542:	f043 0310 	orr.w	r3, r3, #16
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b2a      	ldr	r3, [pc, #168]	@ (80005f4 <MX_GPIO_Init+0xcc>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0310 	and.w	r3, r3, #16
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000554:	4b27      	ldr	r3, [pc, #156]	@ (80005f4 <MX_GPIO_Init+0xcc>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a26      	ldr	r2, [pc, #152]	@ (80005f4 <MX_GPIO_Init+0xcc>)
 800055a:	f043 0320 	orr.w	r3, r3, #32
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b24      	ldr	r3, [pc, #144]	@ (80005f4 <MX_GPIO_Init+0xcc>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0320 	and.w	r3, r3, #32
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <MX_GPIO_Init+0xcc>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a20      	ldr	r2, [pc, #128]	@ (80005f4 <MX_GPIO_Init+0xcc>)
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b1e      	ldr	r3, [pc, #120]	@ (80005f4 <MX_GPIO_Init+0xcc>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000584:	4b1b      	ldr	r3, [pc, #108]	@ (80005f4 <MX_GPIO_Init+0xcc>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a1a      	ldr	r2, [pc, #104]	@ (80005f4 <MX_GPIO_Init+0xcc>)
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b18      	ldr	r3, [pc, #96]	@ (80005f4 <MX_GPIO_Init+0xcc>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDIn_GPIO_Port, LEDIn_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a2:	4815      	ldr	r0, [pc, #84]	@ (80005f8 <MX_GPIO_Init+0xd0>)
 80005a4:	f001 ff90 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin|LEDG_Pin|LEDB_Pin, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2138      	movs	r1, #56	@ 0x38
 80005ac:	4813      	ldr	r0, [pc, #76]	@ (80005fc <MX_GPIO_Init+0xd4>)
 80005ae:	f001 ff8b 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEDIn_Pin;
 80005b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDIn_GPIO_Port, &GPIO_InitStruct);
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	4619      	mov	r1, r3
 80005ca:	480b      	ldr	r0, [pc, #44]	@ (80005f8 <MX_GPIO_Init+0xd0>)
 80005cc:	f001 fdf8 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDG_Pin|LEDB_Pin;
 80005d0:	2338      	movs	r3, #56	@ 0x38
 80005d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	2302      	movs	r3, #2
 80005de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4619      	mov	r1, r3
 80005e6:	4805      	ldr	r0, [pc, #20]	@ (80005fc <MX_GPIO_Init+0xd4>)
 80005e8:	f001 fdea 	bl	80021c0 <HAL_GPIO_Init>

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40011000 	.word	0x40011000
 80005fc:	40010c00 	.word	0x40010c00

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fdf8 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f826 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f7ff ff8c 	bl	8000528 <MX_GPIO_Init>
  MX_CAN_Init();
 8000610:	f7ff fec0 	bl	8000394 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000614:	f000 f9ba 	bl	800098c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if (diagnosticService_Init() != HAL_OK) {
 8000618:	f000 fb04 	bl	8000c24 <diagnosticService_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d004      	beq.n	800062c <main+0x2c>
	HAL_GPIO_WritePin(LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2108      	movs	r1, #8
 8000626:	4809      	ldr	r0, [pc, #36]	@ (800064c <main+0x4c>)
 8000628:	f001 ff4e 	bl	80024c8 <HAL_GPIO_WritePin>
  }
  HAL_GPIO_WritePin(LEDIn_GPIO_Port, LEDIn_Pin, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000632:	4807      	ldr	r0, [pc, #28]	@ (8000650 <main+0x50>)
 8000634:	f001 ff48 	bl	80024c8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin | LEDG_Pin | LEDR_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2138      	movs	r1, #56	@ 0x38
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <main+0x4c>)
 800063e:	f001 ff43 	bl	80024c8 <HAL_GPIO_WritePin>
	  serviceHandler();
 8000642:	4b04      	ldr	r3, [pc, #16]	@ (8000654 <main+0x54>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4798      	blx	r3
	  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin | LEDG_Pin | LEDR_Pin, GPIO_PIN_RESET);
 8000648:	bf00      	nop
 800064a:	e7f5      	b.n	8000638 <main+0x38>
 800064c:	40010c00 	.word	0x40010c00
 8000650:	40011000 	.word	0x40011000
 8000654:	2000013c 	.word	0x2000013c

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	@ 0x40
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	2228      	movs	r2, #40	@ 0x28
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fc79 	bl	8003f5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000690:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000694:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000696:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800069a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 ff43 	bl	800252c <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006ac:	f000 f819 	bl	80006e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2102      	movs	r1, #2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 f9b0 	bl	8002a30 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006d6:	f000 f804 	bl	80006e2 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3740      	adds	r7, #64	@ 0x40
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e6:	b672      	cpsid	i
}
 80006e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006ea:	bf00      	nop
 80006ec:	e7fd      	b.n	80006ea <Error_Handler+0x8>
	...

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006f6:	4b15      	ldr	r3, [pc, #84]	@ (800074c <HAL_MspInit+0x5c>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	4a14      	ldr	r2, [pc, #80]	@ (800074c <HAL_MspInit+0x5c>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6193      	str	r3, [r2, #24]
 8000702:	4b12      	ldr	r3, [pc, #72]	@ (800074c <HAL_MspInit+0x5c>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <HAL_MspInit+0x5c>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	4a0e      	ldr	r2, [pc, #56]	@ (800074c <HAL_MspInit+0x5c>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000718:	61d3      	str	r3, [r2, #28]
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <HAL_MspInit+0x5c>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000726:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <HAL_MspInit+0x60>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	4a04      	ldr	r2, [pc, #16]	@ (8000750 <HAL_MspInit+0x60>)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	40021000 	.word	0x40021000
 8000750:	40010000 	.word	0x40010000

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <NMI_Handler+0x4>

0800075c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <HardFault_Handler+0x4>

08000764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <MemManage_Handler+0x4>

0800076c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <UsageFault_Handler+0x4>

0800077c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a4:	f000 fd6e 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007b0:	4802      	ldr	r0, [pc, #8]	@ (80007bc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80007b2:	f001 f9d4 	bl	8001b5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000c8 	.word	0x200000c8

080007c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007c4:	4802      	ldr	r0, [pc, #8]	@ (80007d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007c6:	f001 f9ca 	bl	8001b5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000c8 	.word	0x200000c8

080007d4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007d8:	4802      	ldr	r0, [pc, #8]	@ (80007e4 <CAN1_RX1_IRQHandler+0x10>)
 80007da:	f001 f9c0 	bl	8001b5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000c8 	.word	0x200000c8

080007e8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007ec:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <CAN1_SCE_IRQHandler+0x10>)
 80007ee:	f001 f9b6 	bl	8001b5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000c8 	.word	0x200000c8

080007fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return 1;
 8000800:	2301      	movs	r3, #1
}
 8000802:	4618      	mov	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <_kill>:

int _kill(int pid, int sig)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000814:	f003 fc20 	bl	8004058 <__errno>
 8000818:	4603      	mov	r3, r0
 800081a:	2216      	movs	r2, #22
 800081c:	601a      	str	r2, [r3, #0]
  return -1;
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_exit>:

void _exit (int status)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000832:	f04f 31ff 	mov.w	r1, #4294967295
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff ffe7 	bl	800080a <_kill>
  while (1) {}    /* Make sure we hang here */
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <_exit+0x12>

08000840 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	e00a      	b.n	8000868 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000852:	f3af 8000 	nop.w
 8000856:	4601      	mov	r1, r0
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	60ba      	str	r2, [r7, #8]
 800085e:	b2ca      	uxtb	r2, r1
 8000860:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	429a      	cmp	r2, r3
 800086e:	dbf0      	blt.n	8000852 <_read+0x12>
  }

  return len;
 8000870:	687b      	ldr	r3, [r7, #4]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b086      	sub	sp, #24
 800087e:	af00      	add	r7, sp, #0
 8000880:	60f8      	str	r0, [r7, #12]
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	e009      	b.n	80008a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	60ba      	str	r2, [r7, #8]
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	3301      	adds	r3, #1
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dbf1      	blt.n	800088c <_write+0x12>
  }
  return len;
 80008a8:	687b      	ldr	r3, [r7, #4]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <_close>:

int _close(int file)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008d8:	605a      	str	r2, [r3, #4]
  return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <_isatty>:

int _isatty(int file)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b085      	sub	sp, #20
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
	...

08000914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800091c:	4a14      	ldr	r2, [pc, #80]	@ (8000970 <_sbrk+0x5c>)
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <_sbrk+0x60>)
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000928:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <_sbrk+0x64>)
 8000932:	4a12      	ldr	r2, [pc, #72]	@ (800097c <_sbrk+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	429a      	cmp	r2, r3
 8000942:	d207      	bcs.n	8000954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000944:	f003 fb88 	bl	8004058 <__errno>
 8000948:	4603      	mov	r3, r0
 800094a:	220c      	movs	r2, #12
 800094c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	e009      	b.n	8000968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095a:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <_sbrk+0x64>)
 8000964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20005000 	.word	0x20005000
 8000974:	00000400 	.word	0x00000400
 8000978:	200000f0 	.word	0x200000f0
 800097c:	20000290 	.word	0x20000290

08000980 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_USART1_UART_Init+0x4c>)
 8000992:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <MX_USART1_UART_Init+0x50>)
 8000994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <MX_USART1_UART_Init+0x4c>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009c4:	f002 f9c2 	bl	8002d4c <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ce:	f7ff fe88 	bl	80006e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000f4 	.word	0x200000f4
 80009dc:	40013800 	.word	0x40013800

080009e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <HAL_UART_MspInit+0x8c>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d131      	bne.n	8000a64 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <HAL_UART_MspInit+0x90>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a1a      	ldr	r2, [pc, #104]	@ (8000a70 <HAL_UART_MspInit+0x90>)
 8000a06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <HAL_UART_MspInit+0x90>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <HAL_UART_MspInit+0x90>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a14      	ldr	r2, [pc, #80]	@ (8000a70 <HAL_UART_MspInit+0x90>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <HAL_UART_MspInit+0x90>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	4619      	mov	r1, r3
 8000a44:	480b      	ldr	r0, [pc, #44]	@ (8000a74 <HAL_UART_MspInit+0x94>)
 8000a46:	f001 fbbb 	bl	80021c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <HAL_UART_MspInit+0x94>)
 8000a60:	f001 fbae 	bl	80021c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40013800 	.word	0x40013800
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010800 	.word	0x40010800

08000a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a78:	f7ff ff82 	bl	8000980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480b      	ldr	r0, [pc, #44]	@ (8000aac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a7e:	490c      	ldr	r1, [pc, #48]	@ (8000ab0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a80:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a09      	ldr	r2, [pc, #36]	@ (8000ab8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a94:	4c09      	ldr	r4, [pc, #36]	@ (8000abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f003 fadf 	bl	8004064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa6:	f7ff fdab 	bl	8000600 <main>
  bx lr
 8000aaa:	4770      	bx	lr
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ab4:	0800523c 	.word	0x0800523c
  ldr r2, =_sbss
 8000ab8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000abc:	20000290 	.word	0x20000290

08000ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_2_IRQHandler>

08000ac2 <calculateKeys>:
#include "DiagnosticDefine.h"
#include "CanTP.h"

ServiceHandler serviceHandler;

void calculateKeys(uint8_t *Keys, uint8_t *Seeds) {
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	6039      	str	r1, [r7, #0]
	Keys[0]  = Seeds[0] ^ Seeds[1];
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4053      	eors	r3, r2
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	701a      	strb	r2, [r3, #0]
	Keys[1]  = Seeds[1] + Seeds[2];
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	7819      	ldrb	r1, [r3, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3301      	adds	r3, #1
 8000aee:	440a      	add	r2, r1
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	701a      	strb	r2, [r3, #0]
	Keys[2]  = Seeds[2] ^ Seeds[3];
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	3302      	adds	r3, #2
 8000af8:	7819      	ldrb	r1, [r3, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	3303      	adds	r3, #3
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3302      	adds	r3, #2
 8000b04:	404a      	eors	r2, r1
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	701a      	strb	r2, [r3, #0]
	Keys[3]  = Seeds[3] + Seeds[0];
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	3303      	adds	r3, #3
 8000b0e:	7819      	ldrb	r1, [r3, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3303      	adds	r3, #3
 8000b18:	440a      	add	r2, r1
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	701a      	strb	r2, [r3, #0]

	Keys[4]  = Seeds[0] | Seeds[1];
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	7819      	ldrb	r1, [r3, #0]
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	781a      	ldrb	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	701a      	strb	r2, [r3, #0]
	Keys[5]  = Seeds[1] + Seeds[2];
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	7819      	ldrb	r1, [r3, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3305      	adds	r3, #5
 8000b42:	440a      	add	r2, r1
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	701a      	strb	r2, [r3, #0]
	Keys[6]  = Seeds[2] | Seeds[3];
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	7819      	ldrb	r1, [r3, #0]
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	3303      	adds	r3, #3
 8000b52:	781a      	ldrb	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3306      	adds	r3, #6
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	701a      	strb	r2, [r3, #0]
	Keys[7]  = Seeds[3] + Seeds[0];
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	3303      	adds	r3, #3
 8000b62:	7819      	ldrb	r1, [r3, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3307      	adds	r3, #7
 8000b6c:	440a      	add	r2, r1
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	701a      	strb	r2, [r3, #0]

	Keys[8]  = Seeds[0] & Seeds[1];
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	7819      	ldrb	r1, [r3, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3308      	adds	r3, #8
 8000b80:	400a      	ands	r2, r1
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	701a      	strb	r2, [r3, #0]
	Keys[9]  = Seeds[1] + Seeds[2];
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	7819      	ldrb	r1, [r3, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	3302      	adds	r3, #2
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3309      	adds	r3, #9
 8000b96:	440a      	add	r2, r1
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	701a      	strb	r2, [r3, #0]
	Keys[10] = Seeds[2] & Seeds[3];
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	7819      	ldrb	r1, [r3, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	330a      	adds	r3, #10
 8000bac:	400a      	ands	r2, r1
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	701a      	strb	r2, [r3, #0]
	Keys[11] = Seeds[3] + Seeds[0];
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	3303      	adds	r3, #3
 8000bb6:	7819      	ldrb	r1, [r3, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	330b      	adds	r3, #11
 8000bc0:	440a      	add	r2, r1
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	701a      	strb	r2, [r3, #0]

	Keys[12] = Seeds[0] - Seeds[1];
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	7819      	ldrb	r1, [r3, #0]
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	781a      	ldrb	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	330c      	adds	r3, #12
 8000bd4:	1a8a      	subs	r2, r1, r2
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	701a      	strb	r2, [r3, #0]
	Keys[13] = Seeds[1] + Seeds[2];
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	7819      	ldrb	r1, [r3, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	3302      	adds	r3, #2
 8000be4:	781a      	ldrb	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	330d      	adds	r3, #13
 8000bea:	440a      	add	r2, r1
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	701a      	strb	r2, [r3, #0]
	Keys[14] = Seeds[2] - Seeds[3];
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	7819      	ldrb	r1, [r3, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	3303      	adds	r3, #3
 8000bfa:	781a      	ldrb	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	330e      	adds	r3, #14
 8000c00:	1a8a      	subs	r2, r1, r2
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	701a      	strb	r2, [r3, #0]
	Keys[15] = Seeds[3] + Seeds[0];
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	3303      	adds	r3, #3
 8000c0a:	7819      	ldrb	r1, [r3, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	781a      	ldrb	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	330f      	adds	r3, #15
 8000c14:	440a      	add	r2, r1
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	701a      	strb	r2, [r3, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <diagnosticService_Init>:

uint8_t diagnosticService_Init() {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
#ifdef TesterNode
	return Tester_Init();
#elif ECUNode
	return ECU_Init();
 8000c28:	f000 f8ac 	bl	8000d84 <ECU_Init>
 8000c2c:	4603      	mov	r3, r0
#endif
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <generateSeeds>:
#include "CanTP.h"

extern UART_HandleTypeDef huart1;
static SecurityState security_state = LOCK;

static void generateSeeds(uint8_t seeds[]) {
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b084      	sub	sp, #16
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
	srand((unsigned int)time(NULL));  // initialize random seed
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f003 f998 	bl	8003f70 <time>
 8000c40:	4602      	mov	r2, r0
 8000c42:	460b      	mov	r3, r1
 8000c44:	4613      	mov	r3, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 ffe6 	bl	8003c18 <srand>

	for(size_t i = 0; i < 4; i++){
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	e00a      	b.n	8000c68 <generateSeeds+0x36>
		seeds[i] = rand() & 0xFF;
 8000c52:	f003 f80f 	bl	8003c74 <rand>
 8000c56:	4601      	mov	r1, r0
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	b2ca      	uxtb	r2, r1
 8000c60:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < 4; i++){
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	3301      	adds	r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d9f1      	bls.n	8000c52 <generateSeeds+0x20>
	}
}
 8000c6e:	bf00      	nop
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <checkKey>:


static uint8_t checkKey(uint8_t received_keys[], uint8_t calculated_keys[]) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 16; i++) {
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	e00e      	b.n	8000ca6 <checkKey+0x2e>
		if (received_keys[i] != calculated_keys[i])
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	6839      	ldr	r1, [r7, #0]
 8000c94:	440b      	add	r3, r1
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d001      	beq.n	8000ca0 <checkKey+0x28>
			return 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e006      	b.n	8000cae <checkKey+0x36>
	for (int i = 0; i < 16; i++) {
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	dded      	ble.n	8000c88 <checkKey+0x10>
	}
	return 1;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <changeState>:


inline static void changeState(SecurityState state) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
	if (security_state == UNLOCK)
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <changeState+0x3c>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00f      	beq.n	8000cea <changeState+0x32>
		return;

	HAL_GPIO_WritePin(
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bf14      	ite	ne
 8000cd0:	2301      	movne	r3, #1
 8000cd2:	2300      	moveq	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cdc:	4806      	ldr	r0, [pc, #24]	@ (8000cf8 <changeState+0x40>)
 8000cde:	f001 fbf3 	bl	80024c8 <HAL_GPIO_WritePin>
		LEDIn_GPIO_Port,
		LEDIn_Pin,
		(state ? GPIO_PIN_SET : GPIO_PIN_RESET)
	);
	security_state = state;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <changeState+0x3c>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	7013      	strb	r3, [r2, #0]
 8000ce8:	e000      	b.n	8000cec <changeState+0x34>
		return;
 8000cea:	bf00      	nop
}
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000004 	.word	0x20000004
 8000cf8:	40011000 	.word	0x40011000

08000cfc <response>:

void response() {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
	uint8_t received_data[20] = {0};
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
	uint16_t received_data_length = 20;
 8000d14:	2314      	movs	r3, #20
 8000d16:	807b      	strh	r3, [r7, #2]
	uint8_t recv_state = CanTP_Receive(received_data, &received_data_length, 500);
 8000d18:	1cb9      	adds	r1, r7, #2
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fac3 	bl	80002ac <CanTP_Receive>
 8000d26:	4603      	mov	r3, r0
 8000d28:	77fb      	strb	r3, [r7, #31]

	if (recv_state != HAL_OK){
 8000d2a:	7ffb      	ldrb	r3, [r7, #31]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d123      	bne.n	8000d78 <response+0x7c>
		return;
	}

	int recv_SID = received_data[0];
 8000d30:	793b      	ldrb	r3, [r7, #4]
 8000d32:	61bb      	str	r3, [r7, #24]
	switch (recv_SID) {
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d38:	d010      	beq.n	8000d5c <response+0x60>
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d3e:	dc1d      	bgt.n	8000d7c <response+0x80>
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	2b22      	cmp	r3, #34	@ 0x22
 8000d44:	d003      	beq.n	8000d4e <response+0x52>
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	2b27      	cmp	r3, #39	@ 0x27
 8000d4a:	d00e      	beq.n	8000d6a <response+0x6e>
			break;
		case SecurityAccess_RequestSID:
			securityAccess_ResponseService(received_data, received_data_length);
			break;
		default:
			break;
 8000d4c:	e016      	b.n	8000d7c <response+0x80>
			readDataByID_ResponseService(received_data, received_data_length);
 8000d4e:	887a      	ldrh	r2, [r7, #2]
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f84d 	bl	8000df4 <readDataByID_ResponseService>
			break;
 8000d5a:	e010      	b.n	8000d7e <response+0x82>
			writeDataByID_ResponseService(received_data, received_data_length);
 8000d5c:	887a      	ldrh	r2, [r7, #2]
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f89a 	bl	8000e9c <writeDataByID_ResponseService>
			break;
 8000d68:	e009      	b.n	8000d7e <response+0x82>
			securityAccess_ResponseService(received_data, received_data_length);
 8000d6a:	887a      	ldrh	r2, [r7, #2]
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 f939 	bl	8000fe8 <securityAccess_ResponseService>
			break;
 8000d76:	e002      	b.n	8000d7e <response+0x82>
		return;
 8000d78:	bf00      	nop
 8000d7a:	e000      	b.n	8000d7e <response+0x82>
			break;
 8000d7c:	bf00      	nop
	}
}
 8000d7e:	3720      	adds	r7, #32
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <ECU_Init>:

uint8_t ECU_Init() {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
	HAL_ERR(CanTP_Init(SEND_ID, RECEIVE_ID));
 8000d8a:	f240 71a2 	movw	r1, #1954	@ 0x7a2
 8000d8e:	f240 7012 	movw	r0, #1810	@ 0x712
 8000d92:	f7ff f9f9 	bl	8000188 <CanTP_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <ECU_Init+0x22>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	e003      	b.n	8000dae <ECU_Init+0x2a>
	serviceHandler = &response;
 8000da6:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <ECU_Init+0x34>)
 8000da8:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <ECU_Init+0x38>)
 8000daa:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2000013c 	.word	0x2000013c
 8000dbc:	08000cfd 	.word	0x08000cfd

08000dc0 <sendNegativeResponse>:


inline static uint8_t sendNegativeResponse(uint8_t SID, uint8_t exception_ID){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	460a      	mov	r2, r1
 8000dca:	71fb      	strb	r3, [r7, #7]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	71bb      	strb	r3, [r7, #6]
	uint8_t neg_response[3] = {0x7F, SID, exception_ID};
 8000dd0:	237f      	movs	r3, #127	@ 0x7f
 8000dd2:	733b      	strb	r3, [r7, #12]
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	737b      	strb	r3, [r7, #13]
 8000dd8:	79bb      	ldrb	r3, [r7, #6]
 8000dda:	73bb      	strb	r3, [r7, #14]
	return CanTP_Transmit(neg_response, LENGTH(neg_response));
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	2103      	movs	r1, #3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fa32 	bl	800024c <CanTP_Transmit>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <readDataByID_ResponseService>:


uint8_t readDataByID_ResponseService(uint8_t data[], uint16_t length) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	807b      	strh	r3, [r7, #2]
	uint16_t recvDID = Get_Recv_DID(data[1], data[2]);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3301      	adds	r3, #1
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	b21a      	sxth	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	4313      	orrs	r3, r2
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	83fb      	strh	r3, [r7, #30]
	if (recvDID != ReadData_CanID_DID) {
 8000e18:	8bfb      	ldrh	r3, [r7, #30]
 8000e1a:	f240 1223 	movw	r2, #291	@ 0x123
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d012      	beq.n	8000e48 <readDataByID_ResponseService+0x54>
		HAL_ERR(sendNegativeResponse(
 8000e22:	2113      	movs	r1, #19
 8000e24:	2022      	movs	r0, #34	@ 0x22
 8000e26:	f7ff ffcb 	bl	8000dc0 <sendNegativeResponse>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d002      	beq.n	8000e3a <readDataByID_ResponseService+0x46>
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	e02a      	b.n	8000e90 <readDataByID_ResponseService+0x9c>
			ReadDataByID_RequestSID,
			NegResp_InvalidLen
		));
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	4816      	ldr	r0, [pc, #88]	@ (8000e98 <readDataByID_ResponseService+0xa4>)
 8000e40:	f001 fb42 	bl	80024c8 <HAL_GPIO_WritePin>
		return HAL_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	e023      	b.n	8000e90 <readDataByID_ResponseService+0x9c>
	}

	uint8_t pos_response[5] = {
 8000e48:	2362      	movs	r3, #98	@ 0x62
 8000e4a:	733b      	strb	r3, [r7, #12]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	785b      	ldrb	r3, [r3, #1]
 8000e50:	737b      	strb	r3, [r7, #13]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	789b      	ldrb	r3, [r3, #2]
 8000e56:	73bb      	strb	r3, [r7, #14]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	743b      	strb	r3, [r7, #16]
		Get_Positive_RespID(ReadDataByID_RequestSID),
		data[1],
		data[2], 0, 0
	};
	pos_response[3] = RECEIVE_ID >> 8;
 8000e60:	2307      	movs	r3, #7
 8000e62:	73fb      	strb	r3, [r7, #15]
	pos_response[4] = RECEIVE_ID & 0xFF;
 8000e64:	23a2      	movs	r3, #162	@ 0xa2
 8000e66:	743b      	strb	r3, [r7, #16]

	HAL_ERR(CanTP_Transmit(pos_response, 5));
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2105      	movs	r1, #5
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff f9ec 	bl	800024c <CanTP_Transmit>
 8000e74:	4603      	mov	r3, r0
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <readDataByID_ResponseService+0x90>
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	e005      	b.n	8000e90 <readDataByID_ResponseService+0x9c>

	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2110      	movs	r1, #16
 8000e88:	4803      	ldr	r0, [pc, #12]	@ (8000e98 <readDataByID_ResponseService+0xa4>)
 8000e8a:	f001 fb1d 	bl	80024c8 <HAL_GPIO_WritePin>
	return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40010c00 	.word	0x40010c00

08000e9c <writeDataByID_ResponseService>:


uint8_t writeDataByID_ResponseService(uint8_t *data, uint16_t length) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
	if (security_state == LOCK) {
 8000ea8:	4b29      	ldr	r3, [pc, #164]	@ (8000f50 <writeDataByID_ResponseService+0xb4>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d101      	bne.n	8000eb4 <writeDataByID_ResponseService+0x18>
		return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	e048      	b.n	8000f46 <writeDataByID_ResponseService+0xaa>
	}

	// If data length is greater than 4, send negative response to the tester
	if (length < 4) {
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d811      	bhi.n	8000ede <writeDataByID_ResponseService+0x42>
		HAL_ERR(sendNegativeResponse(
 8000eba:	2113      	movs	r1, #19
 8000ebc:	202e      	movs	r0, #46	@ 0x2e
 8000ebe:	f7ff ff7f 	bl	8000dc0 <sendNegativeResponse>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d002      	beq.n	8000ed2 <writeDataByID_ResponseService+0x36>
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	e039      	b.n	8000f46 <writeDataByID_ResponseService+0xaa>
			WriteDataByID_RequestSID,
			NegResp_InvalidLen
		));
		HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 8000ed2:	2108      	movs	r1, #8
 8000ed4:	481f      	ldr	r0, [pc, #124]	@ (8000f54 <writeDataByID_ResponseService+0xb8>)
 8000ed6:	f001 fb0f 	bl	80024f8 <HAL_GPIO_TogglePin>
		return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e033      	b.n	8000f46 <writeDataByID_ResponseService+0xaa>
	}

	// If the MCU get invalid DID, send negative response back to the tester
	uint16_t recvDID = Get_Recv_DID(data[1], data[2]);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3302      	adds	r3, #2
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b21b      	sxth	r3, r3
 8000ef4:	83fb      	strh	r3, [r7, #30]
	if (recvDID != WriteData_CanID_DID) {
 8000ef6:	8bfb      	ldrh	r3, [r7, #30]
 8000ef8:	f240 1223 	movw	r2, #291	@ 0x123
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d011      	beq.n	8000f24 <writeDataByID_ResponseService+0x88>
		HAL_ERR(sendNegativeResponse(
 8000f00:	2131      	movs	r1, #49	@ 0x31
 8000f02:	202e      	movs	r0, #46	@ 0x2e
 8000f04:	f7ff ff5c 	bl	8000dc0 <sendNegativeResponse>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <writeDataByID_ResponseService+0x7c>
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	e016      	b.n	8000f46 <writeDataByID_ResponseService+0xaa>
			WriteDataByID_RequestSID,
			NegResp_DID_notSupport
		));
		HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 8000f18:	2108      	movs	r1, #8
 8000f1a:	480e      	ldr	r0, [pc, #56]	@ (8000f54 <writeDataByID_ResponseService+0xb8>)
 8000f1c:	f001 faec 	bl	80024f8 <HAL_GPIO_TogglePin>
		return HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	e010      	b.n	8000f46 <writeDataByID_ResponseService+0xaa>
	}

	// If the received message is valid, send positive response to the tester
	uint8_t pos_response[] = { Get_Positive_RespID(WriteDataByID_RequestSID) };
 8000f24:	236e      	movs	r3, #110	@ 0x6e
 8000f26:	733b      	strb	r3, [r7, #12]
	HAL_ERR(CanTP_Transmit(pos_response, LENGTH(pos_response)));
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff f98c 	bl	800024c <CanTP_Transmit>
 8000f34:	4603      	mov	r3, r0
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <writeDataByID_ResponseService+0xa8>
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	e000      	b.n	8000f46 <writeDataByID_ResponseService+0xaa>
	return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3720      	adds	r7, #32
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000004 	.word	0x20000004
 8000f54:	40010c00 	.word	0x40010c00

08000f58 <securityAccess_SendSeeds>:


uint8_t securityAccess_SendSeeds(uint8_t* seeds){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	uint8_t pos_response[6] = {
 8000f60:	4a0c      	ldr	r2, [pc, #48]	@ (8000f94 <securityAccess_SendSeeds+0x3c>)
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f6a:	6018      	str	r0, [r3, #0]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	8019      	strh	r1, [r3, #0]
		Get_Positive_RespID(SecurityAccess_RequestSID),
		SecurityAccess_ReqSeedID, 0, 0, 0, 0
	};
	memcpy(pos_response + 2, seeds, 4);
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	3302      	adds	r3, #2
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	601a      	str	r2, [r3, #0]
	return CanTP_Transmit(pos_response, LENGTH(pos_response));
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	2106      	movs	r1, #6
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f962 	bl	800024c <CanTP_Transmit>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	08005038 	.word	0x08005038

08000f98 <notify>:


void notify(const uint8_t* message){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	uint8_t uart_buffer[30] = "";
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	615a      	str	r2, [r3, #20]
 8000fb6:	831a      	strh	r2, [r3, #24]
	uint8_t msg_length = sprintf(uart_buffer, message);
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 ff6a 	bl	8003e98 <siprintf>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	HAL_UART_Transmit(&huart1, uart_buffer, msg_length, 200);
 8000fca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	f107 0108 	add.w	r1, r7, #8
 8000fd4:	23c8      	movs	r3, #200	@ 0xc8
 8000fd6:	4803      	ldr	r0, [pc, #12]	@ (8000fe4 <notify+0x4c>)
 8000fd8:	f001 ff08 	bl	8002dec <HAL_UART_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3728      	adds	r7, #40	@ 0x28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200000f4 	.word	0x200000f4

08000fe8 <securityAccess_ResponseService>:



uint8_t securityAccess_ResponseService(uint8_t *data, uint16_t length) {
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b0a3      	sub	sp, #140	@ 0x8c
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
	uint8_t recv_SF = data[1]; // received sub function ID
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

	if (recv_SF != SecurityAccess_ReqSeedID) {
 8000ffc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001000:	2b01      	cmp	r3, #1
 8001002:	d001      	beq.n	8001008 <securityAccess_ResponseService+0x20>
		return HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	e0e9      	b.n	80011dc <securityAccess_ResponseService+0x1f4>
	}

	uint8_t seeds[4];
	generateSeeds(seeds);
 8001008:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fe10 	bl	8000c32 <generateSeeds>
	HAL_ERR(securityAccess_SendSeeds(seeds));
 8001012:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff9e 	bl	8000f58 <securityAccess_SendSeeds>
 800101c:	4603      	mov	r3, r0
 800101e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001020:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <securityAccess_ResponseService+0x44>
 8001026:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001028:	b2db      	uxtb	r3, r3
 800102a:	e0d7      	b.n	80011dc <securityAccess_ResponseService+0x1f4>

	uint16_t recv_buffer_length = 18;
 800102c:	2312      	movs	r3, #18
 800102e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
	uint8_t recv_buffer[18] = {0};
 8001032:	2300      	movs	r3, #0
 8001034:	653b      	str	r3, [r7, #80]	@ 0x50
 8001036:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	819a      	strh	r2, [r3, #12]
	memset(recv_buffer, 0, recv_buffer_length);
 8001044:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8001048:	461a      	mov	r2, r3
 800104a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f002 ff84 	bl	8003f5e <memset>

	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2110      	movs	r1, #16
 800105a:	4862      	ldr	r0, [pc, #392]	@ (80011e4 <securityAccess_ResponseService+0x1fc>)
 800105c:	f001 fa34 	bl	80024c8 <HAL_GPIO_WritePin>
	uint8_t keys[16] = {0};
 8001060:	2300      	movs	r3, #0
 8001062:	643b      	str	r3, [r7, #64]	@ 0x40
 8001064:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
	calculateKeys(keys, seeds);
 8001070:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001074:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fd21 	bl	8000ac2 <calculateKeys>

	// receive keys from Tester
	HAL_ERR(CanTP_Receive(recv_buffer, &recv_buffer_length, 1500));
 8001080:	f107 0162 	add.w	r1, r7, #98	@ 0x62
 8001084:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001088:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f90d 	bl	80002ac <CanTP_Receive>
 8001092:	4603      	mov	r3, r0
 8001094:	677b      	str	r3, [r7, #116]	@ 0x74
 8001096:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <securityAccess_ResponseService+0xba>
 800109c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	e09c      	b.n	80011dc <securityAccess_ResponseService+0x1f4>

	// keys received message is printed by UART
	notify("RKS\r\n");
 80010a2:	4851      	ldr	r0, [pc, #324]	@ (80011e8 <securityAccess_ResponseService+0x200>)
 80010a4:	f7ff ff78 	bl	8000f98 <notify>
	// toggle LED to notify
	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2110      	movs	r1, #16
 80010ac:	484d      	ldr	r0, [pc, #308]	@ (80011e4 <securityAccess_ResponseService+0x1fc>)
 80010ae:	f001 fa0b 	bl	80024c8 <HAL_GPIO_WritePin>

	uint8_t recv_SID = recv_buffer[0];
 80010b2:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80010b6:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	recv_SF = recv_buffer[1];
 80010ba:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80010be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (recv_SID != SecurityAccess_RequestSID) {
 80010c2:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80010c6:	2b27      	cmp	r3, #39	@ 0x27
 80010c8:	d02a      	beq.n	8001120 <securityAccess_ResponseService+0x138>
		HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 80010ca:	2108      	movs	r1, #8
 80010cc:	4845      	ldr	r0, [pc, #276]	@ (80011e4 <securityAccess_ResponseService+0x1fc>)
 80010ce:	f001 fa13 	bl	80024f8 <HAL_GPIO_TogglePin>

		uint8_t message[30] = "";
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]
 80010e6:	615a      	str	r2, [r3, #20]
 80010e8:	831a      	strh	r2, [r3, #24]
		sprintf(
			message,
			"WSID: %x,%x,%x\r\n",
			recv_buffer[0], recv_buffer[1], recv_buffer[2]
 80010ea:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
		sprintf(
 80010ee:	461a      	mov	r2, r3
			recv_buffer[0], recv_buffer[1], recv_buffer[2]
 80010f0:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
		sprintf(
 80010f4:	4619      	mov	r1, r3
			recv_buffer[0], recv_buffer[1], recv_buffer[2]
 80010f6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
		sprintf(
 80010fa:	f107 000c 	add.w	r0, r7, #12
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	460b      	mov	r3, r1
 8001102:	493a      	ldr	r1, [pc, #232]	@ (80011ec <securityAccess_ResponseService+0x204>)
 8001104:	f002 fec8 	bl	8003e98 <siprintf>
		);
		notify(message);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff43 	bl	8000f98 <notify>
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2110      	movs	r1, #16
 8001116:	4833      	ldr	r0, [pc, #204]	@ (80011e4 <securityAccess_ResponseService+0x1fc>)
 8001118:	f001 f9d6 	bl	80024c8 <HAL_GPIO_WritePin>
		return HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	e05d      	b.n	80011dc <securityAccess_ResponseService+0x1f4>
	} else if (recv_SF != SecurityAccess_SendKeyID) {
 8001120:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001124:	2b02      	cmp	r3, #2
 8001126:	d00d      	beq.n	8001144 <securityAccess_ResponseService+0x15c>
		HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 8001128:	2108      	movs	r1, #8
 800112a:	482e      	ldr	r0, [pc, #184]	@ (80011e4 <securityAccess_ResponseService+0x1fc>)
 800112c:	f001 f9e4 	bl	80024f8 <HAL_GPIO_TogglePin>
		notify("WSF\r\n");
 8001130:	482f      	ldr	r0, [pc, #188]	@ (80011f0 <securityAccess_ResponseService+0x208>)
 8001132:	f7ff ff31 	bl	8000f98 <notify>
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2110      	movs	r1, #16
 800113a:	482a      	ldr	r0, [pc, #168]	@ (80011e4 <securityAccess_ResponseService+0x1fc>)
 800113c:	f001 f9c4 	bl	80024c8 <HAL_GPIO_WritePin>
		return HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	e04b      	b.n	80011dc <securityAccess_ResponseService+0x1f4>
	}

	uint8_t received_keys[16] = {0};
 8001144:	2300      	movs	r3, #0
 8001146:	633b      	str	r3, [r7, #48]	@ 0x30
 8001148:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
	memcpy(received_keys, recv_buffer + 2, 16);
 8001154:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001158:	3302      	adds	r3, #2
 800115a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	6859      	ldr	r1, [r3, #4]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (!checkKey(received_keys, keys)) {
 8001168:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800116c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fd80 	bl	8000c78 <checkKey>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d114      	bne.n	80011a8 <securityAccess_ResponseService+0x1c0>
		HAL_ERR(sendNegativeResponse(
 800117e:	2135      	movs	r1, #53	@ 0x35
 8001180:	2027      	movs	r0, #39	@ 0x27
 8001182:	f7ff fe1d 	bl	8000dc0 <sendNegativeResponse>
 8001186:	4603      	mov	r3, r0
 8001188:	66bb      	str	r3, [r7, #104]	@ 0x68
 800118a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <securityAccess_ResponseService+0x1ae>
 8001190:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001192:	b2db      	uxtb	r3, r3
 8001194:	e022      	b.n	80011dc <securityAccess_ResponseService+0x1f4>
			SecurityAccess_RequestSID,
			NegResp_SecurityAccess_InvalidKey
		));
		HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 8001196:	2108      	movs	r1, #8
 8001198:	4812      	ldr	r0, [pc, #72]	@ (80011e4 <securityAccess_ResponseService+0x1fc>)
 800119a:	f001 f9ad 	bl	80024f8 <HAL_GPIO_TogglePin>
		notify("WK\r\n");
 800119e:	4815      	ldr	r0, [pc, #84]	@ (80011f4 <securityAccess_ResponseService+0x20c>)
 80011a0:	f7ff fefa 	bl	8000f98 <notify>
		return HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	e019      	b.n	80011dc <securityAccess_ResponseService+0x1f4>
	}
	HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2110      	movs	r1, #16
 80011ac:	480d      	ldr	r0, [pc, #52]	@ (80011e4 <securityAccess_ResponseService+0x1fc>)
 80011ae:	f001 f98b 	bl	80024c8 <HAL_GPIO_WritePin>

	changeState(UNLOCK);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff fd80 	bl	8000cb8 <changeState>
	uint8_t pos_response[2] = {
 80011b8:	f240 2367 	movw	r3, #615	@ 0x267
 80011bc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		Get_Positive_RespID(SecurityAccess_RequestSID),
		SecurityAccess_SendKeyID
	};
	HAL_ERR(CanTP_Transmit(pos_response, LENGTH(pos_response)));
 80011be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c2:	2102      	movs	r1, #2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f841 	bl	800024c <CanTP_Transmit>
 80011ca:	4603      	mov	r3, r0
 80011cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80011ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <securityAccess_ResponseService+0x1f2>
 80011d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	e000      	b.n	80011dc <securityAccess_ResponseService+0x1f4>
	return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3784      	adds	r7, #132	@ 0x84
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	40010c00 	.word	0x40010c00
 80011e8:	08005040 	.word	0x08005040
 80011ec:	08005048 	.word	0x08005048
 80011f0:	0800505c 	.word	0x0800505c
 80011f4:	08005064 	.word	0x08005064

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <HAL_Init+0x28>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <HAL_Init+0x28>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 ff97 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	200f      	movs	r0, #15
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff fa6c 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40022000 	.word	0x40022000

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 ffaf 	bl	80021a6 <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 ff77 	bl	8002152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	@ (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000000 	.word	0x20000000
 800127c:	2000000c 	.word	0x2000000c
 8001280:	20000008 	.word	0x20000008

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <HAL_IncTick+0x1c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <HAL_IncTick+0x20>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a03      	ldr	r2, [pc, #12]	@ (80012a4 <HAL_IncTick+0x20>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	2000000c 	.word	0x2000000c
 80012a4:	20000140 	.word	0x20000140

080012a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b02      	ldr	r3, [pc, #8]	@ (80012b8 <HAL_GetTick+0x10>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	20000140 	.word	0x20000140

080012bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e0ed      	b.n	80014aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff f892 	bl	8000404 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0201 	orr.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012f0:	f7ff ffda 	bl	80012a8 <HAL_GetTick>
 80012f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012f6:	e012      	b.n	800131e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012f8:	f7ff ffd6 	bl	80012a8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b0a      	cmp	r3, #10
 8001304:	d90b      	bls.n	800131e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2205      	movs	r2, #5
 8001316:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e0c5      	b.n	80014aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0e5      	beq.n	80012f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0202 	bic.w	r2, r2, #2
 800133a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800133c:	f7ff ffb4 	bl	80012a8 <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001342:	e012      	b.n	800136a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001344:	f7ff ffb0 	bl	80012a8 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b0a      	cmp	r3, #10
 8001350:	d90b      	bls.n	800136a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001356:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2205      	movs	r2, #5
 8001362:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e09f      	b.n	80014aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1e5      	bne.n	8001344 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7e1b      	ldrb	r3, [r3, #24]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d108      	bne.n	8001392 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e007      	b.n	80013a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	7e5b      	ldrb	r3, [r3, #25]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d108      	bne.n	80013bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	e007      	b.n	80013cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7e9b      	ldrb	r3, [r3, #26]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d108      	bne.n	80013e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0220 	orr.w	r2, r2, #32
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e007      	b.n	80013f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0220 	bic.w	r2, r2, #32
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7edb      	ldrb	r3, [r3, #27]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d108      	bne.n	8001410 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0210 	bic.w	r2, r2, #16
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	e007      	b.n	8001420 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0210 	orr.w	r2, r2, #16
 800141e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7f1b      	ldrb	r3, [r3, #28]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d108      	bne.n	800143a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0208 	orr.w	r2, r2, #8
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	e007      	b.n	800144a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0208 	bic.w	r2, r2, #8
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7f5b      	ldrb	r3, [r3, #29]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d108      	bne.n	8001464 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0204 	orr.w	r2, r2, #4
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e007      	b.n	8001474 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0204 	bic.w	r2, r2, #4
 8001472:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	ea42 0103 	orr.w	r1, r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	1e5a      	subs	r2, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b087      	sub	sp, #28
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014ca:	7cfb      	ldrb	r3, [r7, #19]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d003      	beq.n	80014d8 <HAL_CAN_ConfigFilter+0x26>
 80014d0:	7cfb      	ldrb	r3, [r7, #19]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	f040 80aa 	bne.w	800162c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014de:	f043 0201 	orr.w	r2, r3, #1
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	f003 031f 	and.w	r3, r3, #31
 80014f0:	2201      	movs	r2, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43db      	mvns	r3, r3
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d123      	bne.n	800155a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43db      	mvns	r3, r3
 800151c:	401a      	ands	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001534:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3248      	adds	r2, #72	@ 0x48
 800153a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800154e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001550:	6979      	ldr	r1, [r7, #20]
 8001552:	3348      	adds	r3, #72	@ 0x48
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	440b      	add	r3, r1
 8001558:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d122      	bne.n	80015a8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	431a      	orrs	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001582:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	3248      	adds	r2, #72	@ 0x48
 8001588:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800159c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800159e:	6979      	ldr	r1, [r7, #20]
 80015a0:	3348      	adds	r3, #72	@ 0x48
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	440b      	add	r3, r1
 80015a6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d109      	bne.n	80015c4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80015c2:	e007      	b.n	80015d4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	431a      	orrs	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d109      	bne.n	80015f0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80015ee:	e007      	b.n	8001600 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	431a      	orrs	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d107      	bne.n	8001618 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	431a      	orrs	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800161e:	f023 0201 	bic.w	r2, r3, #1
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	e006      	b.n	800163a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001630:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
  }
}
 800163a:	4618      	mov	r0, r3
 800163c:	371c      	adds	r7, #28
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d12e      	bne.n	80016b6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001670:	f7ff fe1a 	bl	80012a8 <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001676:	e012      	b.n	800169e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001678:	f7ff fe16 	bl	80012a8 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b0a      	cmp	r3, #10
 8001684:	d90b      	bls.n	800169e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2205      	movs	r2, #5
 8001696:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e012      	b.n	80016c4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e5      	bne.n	8001678 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e006      	b.n	80016c4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ba:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
  }
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	@ 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016ea:	7ffb      	ldrb	r3, [r7, #31]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d003      	beq.n	80016f8 <HAL_CAN_AddTxMessage+0x2c>
 80016f0:	7ffb      	ldrb	r3, [r7, #31]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	f040 80ad 	bne.w	8001852 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10a      	bne.n	8001718 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8095 	beq.w	8001842 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	0e1b      	lsrs	r3, r3, #24
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001722:	2201      	movs	r2, #1
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	409a      	lsls	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10d      	bne.n	8001750 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800173e:	68f9      	ldr	r1, [r7, #12]
 8001740:	6809      	ldr	r1, [r1, #0]
 8001742:	431a      	orrs	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3318      	adds	r3, #24
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	440b      	add	r3, r1
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e00f      	b.n	8001770 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800175a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001760:	68f9      	ldr	r1, [r7, #12]
 8001762:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001764:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3318      	adds	r3, #24
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	440b      	add	r3, r1
 800176e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6819      	ldr	r1, [r3, #0]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	3318      	adds	r3, #24
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	440b      	add	r3, r1
 8001780:	3304      	adds	r3, #4
 8001782:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	7d1b      	ldrb	r3, [r3, #20]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d111      	bne.n	80017b0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3318      	adds	r3, #24
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	4413      	add	r3, r2
 8001798:	3304      	adds	r3, #4
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	6811      	ldr	r1, [r2, #0]
 80017a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3318      	adds	r3, #24
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	440b      	add	r3, r1
 80017ac:	3304      	adds	r3, #4
 80017ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3307      	adds	r3, #7
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	061a      	lsls	r2, r3, #24
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3306      	adds	r3, #6
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3305      	adds	r3, #5
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	4313      	orrs	r3, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	3204      	adds	r2, #4
 80017d0:	7812      	ldrb	r2, [r2, #0]
 80017d2:	4610      	mov	r0, r2
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	6811      	ldr	r1, [r2, #0]
 80017d8:	ea43 0200 	orr.w	r2, r3, r0
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	440b      	add	r3, r1
 80017e2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80017e6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3303      	adds	r3, #3
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	061a      	lsls	r2, r3, #24
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3302      	adds	r3, #2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	041b      	lsls	r3, r3, #16
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3301      	adds	r3, #1
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	4313      	orrs	r3, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	7812      	ldrb	r2, [r2, #0]
 8001808:	4610      	mov	r0, r2
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	6811      	ldr	r1, [r2, #0]
 800180e:	ea43 0200 	orr.w	r2, r3, r0
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	440b      	add	r3, r1
 8001818:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800181c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3318      	adds	r3, #24
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	4413      	add	r3, r2
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	6811      	ldr	r1, [r2, #0]
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3318      	adds	r3, #24
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	440b      	add	r3, r1
 800183c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e00e      	b.n	8001860 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e006      	b.n	8001860 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
  }
}
 8001860:	4618      	mov	r0, r3
 8001862:	3724      	adds	r7, #36	@ 0x24
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800186a:	b480      	push	{r7}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800187c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800187e:	7afb      	ldrb	r3, [r7, #11]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d002      	beq.n	800188a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001884:	7afb      	ldrb	r3, [r7, #11]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d11d      	bne.n	80018c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3301      	adds	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d002      	beq.n	80018b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d002      	beq.n	80018c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3301      	adds	r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018d2:	b480      	push	{r7}
 80018d4:	b087      	sub	sp, #28
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d003      	beq.n	80018f6 <HAL_CAN_GetRxMessage+0x24>
 80018ee:	7dfb      	ldrb	r3, [r7, #23]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	f040 8103 	bne.w	8001afc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10e      	bne.n	800191a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d116      	bne.n	8001938 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e0f7      	b.n	8001b0a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d107      	bne.n	8001938 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0e8      	b.n	8001b0a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	331b      	adds	r3, #27
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	4413      	add	r3, r2
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0204 	and.w	r2, r3, #4
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10c      	bne.n	8001970 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	331b      	adds	r3, #27
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	4413      	add	r3, r2
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0d5b      	lsrs	r3, r3, #21
 8001966:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e00b      	b.n	8001988 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	331b      	adds	r3, #27
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	4413      	add	r3, r2
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	08db      	lsrs	r3, r3, #3
 8001980:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	331b      	adds	r3, #27
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	4413      	add	r3, r2
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0202 	and.w	r2, r3, #2
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	331b      	adds	r3, #27
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	4413      	add	r3, r2
 80019aa:	3304      	adds	r3, #4
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2208      	movs	r2, #8
 80019ba:	611a      	str	r2, [r3, #16]
 80019bc:	e00b      	b.n	80019d6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	331b      	adds	r3, #27
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	4413      	add	r3, r2
 80019ca:	3304      	adds	r3, #4
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 020f 	and.w	r2, r3, #15
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	331b      	adds	r3, #27
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	4413      	add	r3, r2
 80019e2:	3304      	adds	r3, #4
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	0a1b      	lsrs	r3, r3, #8
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	331b      	adds	r3, #27
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	3304      	adds	r3, #4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	0c1b      	lsrs	r3, r3, #16
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	4413      	add	r3, r2
 8001a10:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0a1a      	lsrs	r2, r3, #8
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	3301      	adds	r3, #1
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	0c1a      	lsrs	r2, r3, #16
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0e1a      	lsrs	r2, r3, #24
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	3303      	adds	r3, #3
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	4413      	add	r3, r2
 8001a74:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0a1a      	lsrs	r2, r3, #8
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	3305      	adds	r3, #5
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0c1a      	lsrs	r2, r3, #16
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	3306      	adds	r3, #6
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	4413      	add	r3, r2
 8001ac0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	0e1a      	lsrs	r2, r3, #24
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	3307      	adds	r3, #7
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d108      	bne.n	8001ae8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0220 	orr.w	r2, r2, #32
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	e007      	b.n	8001af8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0220 	orr.w	r2, r2, #32
 8001af6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	e006      	b.n	8001b0a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b00:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
  }
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	371c      	adds	r7, #28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b24:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d002      	beq.n	8001b32 <HAL_CAN_ActivateNotification+0x1e>
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d109      	bne.n	8001b46 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6959      	ldr	r1, [r3, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e006      	b.n	8001b54 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
  }
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b08a      	sub	sp, #40	@ 0x28
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d07c      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d023      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f983 	bl	8001ecc <HAL_CAN_TxMailbox0CompleteCallback>
 8001bc6:	e016      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d004      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bda:	e00c      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bee:	e002      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f986 	bl	8001f02 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d024      	beq.n	8001c4a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f962 	bl	8001ede <HAL_CAN_TxMailbox1CompleteCallback>
 8001c1a:	e016      	b.n	8001c4a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d004      	beq.n	8001c30 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c2e:	e00c      	b.n	8001c4a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d004      	beq.n	8001c44 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c42:	e002      	b.n	8001c4a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f965 	bl	8001f14 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d024      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f941 	bl	8001ef0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c6e:	e016      	b.n	8001c9e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d004      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c82:	e00c      	b.n	8001c9e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d004      	beq.n	8001c98 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c96:	e002      	b.n	8001c9e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f944 	bl	8001f26 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00c      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2210      	movs	r2, #16
 8001cc0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2208      	movs	r2, #8
 8001cdc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f92a 	bl	8001f38 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7fe fc01 	bl	8000504 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00c      	beq.n	8001d26 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d007      	beq.n	8001d26 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2210      	movs	r2, #16
 8001d24:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00b      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d006      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2208      	movs	r2, #8
 8001d40:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f90a 	bl	8001f5c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f8f2 	bl	8001f4a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00b      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d006      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2210      	movs	r2, #16
 8001d80:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8f3 	bl	8001f6e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00b      	beq.n	8001daa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2208      	movs	r2, #8
 8001da2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f8eb 	bl	8001f80 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d07b      	beq.n	8001eac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d072      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d043      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d03e      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e2c:	2b60      	cmp	r3, #96	@ 0x60
 8001e2e:	d02b      	beq.n	8001e88 <HAL_CAN_IRQHandler+0x32a>
 8001e30:	2b60      	cmp	r3, #96	@ 0x60
 8001e32:	d82e      	bhi.n	8001e92 <HAL_CAN_IRQHandler+0x334>
 8001e34:	2b50      	cmp	r3, #80	@ 0x50
 8001e36:	d022      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x320>
 8001e38:	2b50      	cmp	r3, #80	@ 0x50
 8001e3a:	d82a      	bhi.n	8001e92 <HAL_CAN_IRQHandler+0x334>
 8001e3c:	2b40      	cmp	r3, #64	@ 0x40
 8001e3e:	d019      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x316>
 8001e40:	2b40      	cmp	r3, #64	@ 0x40
 8001e42:	d826      	bhi.n	8001e92 <HAL_CAN_IRQHandler+0x334>
 8001e44:	2b30      	cmp	r3, #48	@ 0x30
 8001e46:	d010      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x30c>
 8001e48:	2b30      	cmp	r3, #48	@ 0x30
 8001e4a:	d822      	bhi.n	8001e92 <HAL_CAN_IRQHandler+0x334>
 8001e4c:	2b10      	cmp	r3, #16
 8001e4e:	d002      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x2f8>
 8001e50:	2b20      	cmp	r3, #32
 8001e52:	d005      	beq.n	8001e60 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e54:	e01d      	b.n	8001e92 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	f043 0308 	orr.w	r3, r3, #8
 8001e5c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e5e:	e019      	b.n	8001e94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	f043 0310 	orr.w	r3, r3, #16
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e68:	e014      	b.n	8001e94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	f043 0320 	orr.w	r3, r3, #32
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e72:	e00f      	b.n	8001e94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e7c:	e00a      	b.n	8001e94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e86:	e005      	b.n	8001e94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e90:	e000      	b.n	8001e94 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e92:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699a      	ldr	r2, [r3, #24]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ea2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f867 	bl	8001f92 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3728      	adds	r7, #40	@ 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd6:	4a04      	ldr	r2, [pc, #16]	@ (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	60d3      	str	r3, [r2, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0b      	blt.n	8002032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4906      	ldr	r1, [pc, #24]	@ (800203c <__NVIC_EnableIRQ+0x34>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	e000e100 	.word	0xe000e100

08002040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	6039      	str	r1, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db0a      	blt.n	800206a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	490c      	ldr	r1, [pc, #48]	@ (800208c <__NVIC_SetPriority+0x4c>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	0112      	lsls	r2, r2, #4
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	440b      	add	r3, r1
 8002064:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002068:	e00a      	b.n	8002080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4908      	ldr	r1, [pc, #32]	@ (8002090 <__NVIC_SetPriority+0x50>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3b04      	subs	r3, #4
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	440b      	add	r3, r1
 800207e:	761a      	strb	r2, [r3, #24]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	@ 0x24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f1c3 0307 	rsb	r3, r3, #7
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	bf28      	it	cs
 80020b2:	2304      	movcs	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d902      	bls.n	80020c4 <NVIC_EncodePriority+0x30>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3b03      	subs	r3, #3
 80020c2:	e000      	b.n	80020c6 <NVIC_EncodePriority+0x32>
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	401a      	ands	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ec:	4313      	orrs	r3, r2
         );
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3724      	adds	r7, #36	@ 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f7ff ff90 	bl	8002040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff2d 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002164:	f7ff ff42 	bl	8001fec <__NVIC_GetPriorityGrouping>
 8002168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff ff90 	bl	8002094 <NVIC_EncodePriority>
 8002174:	4602      	mov	r2, r0
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff5f 	bl	8002040 <__NVIC_SetPriority>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff35 	bl	8002008 <__NVIC_EnableIRQ>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffa2 	bl	80020f8 <SysTick_Config>
 80021b4:	4603      	mov	r3, r0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b08b      	sub	sp, #44	@ 0x2c
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ca:	2300      	movs	r3, #0
 80021cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d2:	e169      	b.n	80024a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021d4:	2201      	movs	r2, #1
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	f040 8158 	bne.w	80024a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4a9a      	ldr	r2, [pc, #616]	@ (8002460 <HAL_GPIO_Init+0x2a0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d05e      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
 80021fc:	4a98      	ldr	r2, [pc, #608]	@ (8002460 <HAL_GPIO_Init+0x2a0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d875      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 8002202:	4a98      	ldr	r2, [pc, #608]	@ (8002464 <HAL_GPIO_Init+0x2a4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d058      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
 8002208:	4a96      	ldr	r2, [pc, #600]	@ (8002464 <HAL_GPIO_Init+0x2a4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d86f      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 800220e:	4a96      	ldr	r2, [pc, #600]	@ (8002468 <HAL_GPIO_Init+0x2a8>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d052      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
 8002214:	4a94      	ldr	r2, [pc, #592]	@ (8002468 <HAL_GPIO_Init+0x2a8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d869      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 800221a:	4a94      	ldr	r2, [pc, #592]	@ (800246c <HAL_GPIO_Init+0x2ac>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d04c      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
 8002220:	4a92      	ldr	r2, [pc, #584]	@ (800246c <HAL_GPIO_Init+0x2ac>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d863      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 8002226:	4a92      	ldr	r2, [pc, #584]	@ (8002470 <HAL_GPIO_Init+0x2b0>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d046      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
 800222c:	4a90      	ldr	r2, [pc, #576]	@ (8002470 <HAL_GPIO_Init+0x2b0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d85d      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 8002232:	2b12      	cmp	r3, #18
 8002234:	d82a      	bhi.n	800228c <HAL_GPIO_Init+0xcc>
 8002236:	2b12      	cmp	r3, #18
 8002238:	d859      	bhi.n	80022ee <HAL_GPIO_Init+0x12e>
 800223a:	a201      	add	r2, pc, #4	@ (adr r2, 8002240 <HAL_GPIO_Init+0x80>)
 800223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002240:	080022bb 	.word	0x080022bb
 8002244:	08002295 	.word	0x08002295
 8002248:	080022a7 	.word	0x080022a7
 800224c:	080022e9 	.word	0x080022e9
 8002250:	080022ef 	.word	0x080022ef
 8002254:	080022ef 	.word	0x080022ef
 8002258:	080022ef 	.word	0x080022ef
 800225c:	080022ef 	.word	0x080022ef
 8002260:	080022ef 	.word	0x080022ef
 8002264:	080022ef 	.word	0x080022ef
 8002268:	080022ef 	.word	0x080022ef
 800226c:	080022ef 	.word	0x080022ef
 8002270:	080022ef 	.word	0x080022ef
 8002274:	080022ef 	.word	0x080022ef
 8002278:	080022ef 	.word	0x080022ef
 800227c:	080022ef 	.word	0x080022ef
 8002280:	080022ef 	.word	0x080022ef
 8002284:	0800229d 	.word	0x0800229d
 8002288:	080022b1 	.word	0x080022b1
 800228c:	4a79      	ldr	r2, [pc, #484]	@ (8002474 <HAL_GPIO_Init+0x2b4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d013      	beq.n	80022ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002292:	e02c      	b.n	80022ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	623b      	str	r3, [r7, #32]
          break;
 800229a:	e029      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	3304      	adds	r3, #4
 80022a2:	623b      	str	r3, [r7, #32]
          break;
 80022a4:	e024      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	3308      	adds	r3, #8
 80022ac:	623b      	str	r3, [r7, #32]
          break;
 80022ae:	e01f      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	330c      	adds	r3, #12
 80022b6:	623b      	str	r3, [r7, #32]
          break;
 80022b8:	e01a      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d102      	bne.n	80022c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022c2:	2304      	movs	r3, #4
 80022c4:	623b      	str	r3, [r7, #32]
          break;
 80022c6:	e013      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d105      	bne.n	80022dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022d0:	2308      	movs	r3, #8
 80022d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	611a      	str	r2, [r3, #16]
          break;
 80022da:	e009      	b.n	80022f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022dc:	2308      	movs	r3, #8
 80022de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	615a      	str	r2, [r3, #20]
          break;
 80022e6:	e003      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022e8:	2300      	movs	r3, #0
 80022ea:	623b      	str	r3, [r7, #32]
          break;
 80022ec:	e000      	b.n	80022f0 <HAL_GPIO_Init+0x130>
          break;
 80022ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2bff      	cmp	r3, #255	@ 0xff
 80022f4:	d801      	bhi.n	80022fa <HAL_GPIO_Init+0x13a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	e001      	b.n	80022fe <HAL_GPIO_Init+0x13e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3304      	adds	r3, #4
 80022fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2bff      	cmp	r3, #255	@ 0xff
 8002304:	d802      	bhi.n	800230c <HAL_GPIO_Init+0x14c>
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	e002      	b.n	8002312 <HAL_GPIO_Init+0x152>
 800230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230e:	3b08      	subs	r3, #8
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	210f      	movs	r1, #15
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	401a      	ands	r2, r3
 8002324:	6a39      	ldr	r1, [r7, #32]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	431a      	orrs	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80b1 	beq.w	80024a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002340:	4b4d      	ldr	r3, [pc, #308]	@ (8002478 <HAL_GPIO_Init+0x2b8>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	4a4c      	ldr	r2, [pc, #304]	@ (8002478 <HAL_GPIO_Init+0x2b8>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6193      	str	r3, [r2, #24]
 800234c:	4b4a      	ldr	r3, [pc, #296]	@ (8002478 <HAL_GPIO_Init+0x2b8>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002358:	4a48      	ldr	r2, [pc, #288]	@ (800247c <HAL_GPIO_Init+0x2bc>)
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002364:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a40      	ldr	r2, [pc, #256]	@ (8002480 <HAL_GPIO_Init+0x2c0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d013      	beq.n	80023ac <HAL_GPIO_Init+0x1ec>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a3f      	ldr	r2, [pc, #252]	@ (8002484 <HAL_GPIO_Init+0x2c4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d00d      	beq.n	80023a8 <HAL_GPIO_Init+0x1e8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a3e      	ldr	r2, [pc, #248]	@ (8002488 <HAL_GPIO_Init+0x2c8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d007      	beq.n	80023a4 <HAL_GPIO_Init+0x1e4>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a3d      	ldr	r2, [pc, #244]	@ (800248c <HAL_GPIO_Init+0x2cc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d101      	bne.n	80023a0 <HAL_GPIO_Init+0x1e0>
 800239c:	2303      	movs	r3, #3
 800239e:	e006      	b.n	80023ae <HAL_GPIO_Init+0x1ee>
 80023a0:	2304      	movs	r3, #4
 80023a2:	e004      	b.n	80023ae <HAL_GPIO_Init+0x1ee>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e002      	b.n	80023ae <HAL_GPIO_Init+0x1ee>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_GPIO_Init+0x1ee>
 80023ac:	2300      	movs	r3, #0
 80023ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b0:	f002 0203 	and.w	r2, r2, #3
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	4093      	lsls	r3, r2
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023be:	492f      	ldr	r1, [pc, #188]	@ (800247c <HAL_GPIO_Init+0x2bc>)
 80023c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	492c      	ldr	r1, [pc, #176]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	608b      	str	r3, [r1, #8]
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	4928      	ldr	r1, [pc, #160]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d006      	beq.n	800240e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002400:	4b23      	ldr	r3, [pc, #140]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	4922      	ldr	r1, [pc, #136]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	60cb      	str	r3, [r1, #12]
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800240e:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	43db      	mvns	r3, r3
 8002416:	491e      	ldr	r1, [pc, #120]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 8002418:	4013      	ands	r3, r2
 800241a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002428:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	4918      	ldr	r1, [pc, #96]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002436:	4b16      	ldr	r3, [pc, #88]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	43db      	mvns	r3, r3
 800243e:	4914      	ldr	r1, [pc, #80]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 8002440:	4013      	ands	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d021      	beq.n	8002494 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002450:	4b0f      	ldr	r3, [pc, #60]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	490e      	ldr	r1, [pc, #56]	@ (8002490 <HAL_GPIO_Init+0x2d0>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
 800245c:	e021      	b.n	80024a2 <HAL_GPIO_Init+0x2e2>
 800245e:	bf00      	nop
 8002460:	10320000 	.word	0x10320000
 8002464:	10310000 	.word	0x10310000
 8002468:	10220000 	.word	0x10220000
 800246c:	10210000 	.word	0x10210000
 8002470:	10120000 	.word	0x10120000
 8002474:	10110000 	.word	0x10110000
 8002478:	40021000 	.word	0x40021000
 800247c:	40010000 	.word	0x40010000
 8002480:	40010800 	.word	0x40010800
 8002484:	40010c00 	.word	0x40010c00
 8002488:	40011000 	.word	0x40011000
 800248c:	40011400 	.word	0x40011400
 8002490:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002494:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <HAL_GPIO_Init+0x304>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	43db      	mvns	r3, r3
 800249c:	4909      	ldr	r1, [pc, #36]	@ (80024c4 <HAL_GPIO_Init+0x304>)
 800249e:	4013      	ands	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	3301      	adds	r3, #1
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f47f ae8e 	bne.w	80021d4 <HAL_GPIO_Init+0x14>
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	372c      	adds	r7, #44	@ 0x2c
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	40010400 	.word	0x40010400

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024e4:	e003      	b.n	80024ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	611a      	str	r2, [r3, #16]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	041a      	lsls	r2, r3, #16
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43d9      	mvns	r1, r3
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	400b      	ands	r3, r1
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	611a      	str	r2, [r3, #16]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
	...

0800252c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e272      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8087 	beq.w	800265a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800254c:	4b92      	ldr	r3, [pc, #584]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b04      	cmp	r3, #4
 8002556:	d00c      	beq.n	8002572 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002558:	4b8f      	ldr	r3, [pc, #572]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d112      	bne.n	800258a <HAL_RCC_OscConfig+0x5e>
 8002564:	4b8c      	ldr	r3, [pc, #560]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002570:	d10b      	bne.n	800258a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002572:	4b89      	ldr	r3, [pc, #548]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d06c      	beq.n	8002658 <HAL_RCC_OscConfig+0x12c>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d168      	bne.n	8002658 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e24c      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x76>
 8002594:	4b80      	ldr	r3, [pc, #512]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a7f      	ldr	r2, [pc, #508]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 800259a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	e02e      	b.n	8002600 <HAL_RCC_OscConfig+0xd4>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x98>
 80025aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a7a      	ldr	r2, [pc, #488]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b78      	ldr	r3, [pc, #480]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a77      	ldr	r2, [pc, #476]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e01d      	b.n	8002600 <HAL_RCC_OscConfig+0xd4>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0xbc>
 80025ce:	4b72      	ldr	r3, [pc, #456]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a71      	ldr	r2, [pc, #452]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b6f      	ldr	r3, [pc, #444]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6e      	ldr	r2, [pc, #440]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e00b      	b.n	8002600 <HAL_RCC_OscConfig+0xd4>
 80025e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b68      	ldr	r3, [pc, #416]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a67      	ldr	r2, [pc, #412]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe fe4e 	bl	80012a8 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002610:	f7fe fe4a 	bl	80012a8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	@ 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e200      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	4b5d      	ldr	r3, [pc, #372]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0xe4>
 800262e:	e014      	b.n	800265a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fe3a 	bl	80012a8 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002638:	f7fe fe36 	bl	80012a8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	@ 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e1ec      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264a:	4b53      	ldr	r3, [pc, #332]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x10c>
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d063      	beq.n	800272e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002666:	4b4c      	ldr	r3, [pc, #304]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00b      	beq.n	800268a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002672:	4b49      	ldr	r3, [pc, #292]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b08      	cmp	r3, #8
 800267c:	d11c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x18c>
 800267e:	4b46      	ldr	r3, [pc, #280]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d116      	bne.n	80026b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268a:	4b43      	ldr	r3, [pc, #268]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_RCC_OscConfig+0x176>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e1c0      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4939      	ldr	r1, [pc, #228]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b6:	e03a      	b.n	800272e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d020      	beq.n	8002702 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c0:	4b36      	ldr	r3, [pc, #216]	@ (800279c <HAL_RCC_OscConfig+0x270>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7fe fdef 	bl	80012a8 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ce:	f7fe fdeb 	bl	80012a8 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e1a1      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4927      	ldr	r1, [pc, #156]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
 8002700:	e015      	b.n	800272e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002702:	4b26      	ldr	r3, [pc, #152]	@ (800279c <HAL_RCC_OscConfig+0x270>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe fdce 	bl	80012a8 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002710:	f7fe fdca 	bl	80012a8 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e180      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	4b1d      	ldr	r3, [pc, #116]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d03a      	beq.n	80027b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d019      	beq.n	8002776 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002742:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <HAL_RCC_OscConfig+0x274>)
 8002744:	2201      	movs	r2, #1
 8002746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002748:	f7fe fdae 	bl	80012a8 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002750:	f7fe fdaa 	bl	80012a8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e160      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	4b0d      	ldr	r3, [pc, #52]	@ (8002798 <HAL_RCC_OscConfig+0x26c>)
 8002764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800276e:	2001      	movs	r0, #1
 8002770:	f000 face 	bl	8002d10 <RCC_Delay>
 8002774:	e01c      	b.n	80027b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002776:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <HAL_RCC_OscConfig+0x274>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277c:	f7fe fd94 	bl	80012a8 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002782:	e00f      	b.n	80027a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002784:	f7fe fd90 	bl	80012a8 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d908      	bls.n	80027a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e146      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	42420000 	.word	0x42420000
 80027a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a4:	4b92      	ldr	r3, [pc, #584]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e9      	bne.n	8002784 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80a6 	beq.w	800290a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c2:	4b8b      	ldr	r3, [pc, #556]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10d      	bne.n	80027ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	4b88      	ldr	r3, [pc, #544]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	4a87      	ldr	r2, [pc, #540]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d8:	61d3      	str	r3, [r2, #28]
 80027da:	4b85      	ldr	r3, [pc, #532]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e6:	2301      	movs	r3, #1
 80027e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ea:	4b82      	ldr	r3, [pc, #520]	@ (80029f4 <HAL_RCC_OscConfig+0x4c8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d118      	bne.n	8002828 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f6:	4b7f      	ldr	r3, [pc, #508]	@ (80029f4 <HAL_RCC_OscConfig+0x4c8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a7e      	ldr	r2, [pc, #504]	@ (80029f4 <HAL_RCC_OscConfig+0x4c8>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002802:	f7fe fd51 	bl	80012a8 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280a:	f7fe fd4d 	bl	80012a8 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b64      	cmp	r3, #100	@ 0x64
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e103      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	4b75      	ldr	r3, [pc, #468]	@ (80029f4 <HAL_RCC_OscConfig+0x4c8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d106      	bne.n	800283e <HAL_RCC_OscConfig+0x312>
 8002830:	4b6f      	ldr	r3, [pc, #444]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4a6e      	ldr	r2, [pc, #440]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6213      	str	r3, [r2, #32]
 800283c:	e02d      	b.n	800289a <HAL_RCC_OscConfig+0x36e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10c      	bne.n	8002860 <HAL_RCC_OscConfig+0x334>
 8002846:	4b6a      	ldr	r3, [pc, #424]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	4a69      	ldr	r2, [pc, #420]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6213      	str	r3, [r2, #32]
 8002852:	4b67      	ldr	r3, [pc, #412]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	4a66      	ldr	r2, [pc, #408]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	f023 0304 	bic.w	r3, r3, #4
 800285c:	6213      	str	r3, [r2, #32]
 800285e:	e01c      	b.n	800289a <HAL_RCC_OscConfig+0x36e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b05      	cmp	r3, #5
 8002866:	d10c      	bne.n	8002882 <HAL_RCC_OscConfig+0x356>
 8002868:	4b61      	ldr	r3, [pc, #388]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4a60      	ldr	r2, [pc, #384]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800286e:	f043 0304 	orr.w	r3, r3, #4
 8002872:	6213      	str	r3, [r2, #32]
 8002874:	4b5e      	ldr	r3, [pc, #376]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4a5d      	ldr	r2, [pc, #372]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6213      	str	r3, [r2, #32]
 8002880:	e00b      	b.n	800289a <HAL_RCC_OscConfig+0x36e>
 8002882:	4b5b      	ldr	r3, [pc, #364]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	4a5a      	ldr	r2, [pc, #360]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	6213      	str	r3, [r2, #32]
 800288e:	4b58      	ldr	r3, [pc, #352]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4a57      	ldr	r2, [pc, #348]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002894:	f023 0304 	bic.w	r3, r3, #4
 8002898:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d015      	beq.n	80028ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a2:	f7fe fd01 	bl	80012a8 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7fe fcfd 	bl	80012a8 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e0b1      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c0:	4b4b      	ldr	r3, [pc, #300]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0ee      	beq.n	80028aa <HAL_RCC_OscConfig+0x37e>
 80028cc:	e014      	b.n	80028f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ce:	f7fe fceb 	bl	80012a8 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7fe fce7 	bl	80012a8 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e09b      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ec:	4b40      	ldr	r3, [pc, #256]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1ee      	bne.n	80028d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d105      	bne.n	800290a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fe:	4b3c      	ldr	r3, [pc, #240]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4a3b      	ldr	r2, [pc, #236]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002908:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8087 	beq.w	8002a22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002914:	4b36      	ldr	r3, [pc, #216]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 030c 	and.w	r3, r3, #12
 800291c:	2b08      	cmp	r3, #8
 800291e:	d061      	beq.n	80029e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d146      	bne.n	80029b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002928:	4b33      	ldr	r3, [pc, #204]	@ (80029f8 <HAL_RCC_OscConfig+0x4cc>)
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7fe fcbb 	bl	80012a8 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002936:	f7fe fcb7 	bl	80012a8 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e06d      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002948:	4b29      	ldr	r3, [pc, #164]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f0      	bne.n	8002936 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800295c:	d108      	bne.n	8002970 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800295e:	4b24      	ldr	r3, [pc, #144]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	4921      	ldr	r1, [pc, #132]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002970:	4b1f      	ldr	r3, [pc, #124]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a19      	ldr	r1, [r3, #32]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	430b      	orrs	r3, r1
 8002982:	491b      	ldr	r1, [pc, #108]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_RCC_OscConfig+0x4cc>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fe fc8b 	bl	80012a8 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe fc87 	bl	80012a8 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e03d      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a8:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x46a>
 80029b4:	e035      	b.n	8002a22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b6:	4b10      	ldr	r3, [pc, #64]	@ (80029f8 <HAL_RCC_OscConfig+0x4cc>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7fe fc74 	bl	80012a8 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fc70 	bl	80012a8 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e026      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d6:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x498>
 80029e2:	e01e      	b.n	8002a22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e019      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40007000 	.word	0x40007000
 80029f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029fc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <HAL_RCC_OscConfig+0x500>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40021000 	.word	0x40021000

08002a30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0d0      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a44:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d910      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b67      	ldr	r3, [pc, #412]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 0207 	bic.w	r2, r3, #7
 8002a5a:	4965      	ldr	r1, [pc, #404]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b63      	ldr	r3, [pc, #396]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0b8      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a8c:	4b59      	ldr	r3, [pc, #356]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a58      	ldr	r2, [pc, #352]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa4:	4b53      	ldr	r3, [pc, #332]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a52      	ldr	r2, [pc, #328]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002aae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b50      	ldr	r3, [pc, #320]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	494d      	ldr	r1, [pc, #308]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d040      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b47      	ldr	r3, [pc, #284]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d115      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e07f      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aee:	4b41      	ldr	r3, [pc, #260]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e073      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afe:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e06b      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b0e:	4b39      	ldr	r3, [pc, #228]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f023 0203 	bic.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4936      	ldr	r1, [pc, #216]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b20:	f7fe fbc2 	bl	80012a8 <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b28:	f7fe fbbe 	bl	80012a8 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e053      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 020c 	and.w	r2, r3, #12
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d1eb      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b50:	4b27      	ldr	r3, [pc, #156]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d210      	bcs.n	8002b80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b24      	ldr	r3, [pc, #144]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 0207 	bic.w	r2, r3, #7
 8002b66:	4922      	ldr	r1, [pc, #136]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e032      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b8c:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4916      	ldr	r1, [pc, #88]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002baa:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	490e      	ldr	r1, [pc, #56]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bbe:	f000 f821 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	490a      	ldr	r1, [pc, #40]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd0:	5ccb      	ldrb	r3, [r1, r3]
 8002bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd6:	4a09      	ldr	r2, [pc, #36]	@ (8002bfc <HAL_RCC_ClockConfig+0x1cc>)
 8002bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bda:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <HAL_RCC_ClockConfig+0x1d0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe fb20 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40022000 	.word	0x40022000
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	080050dc 	.word	0x080050dc
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	20000008 	.word	0x20000008

08002c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d002      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x30>
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_GetSysClockFreq+0x36>
 8002c32:	e027      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c34:	4b19      	ldr	r3, [pc, #100]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c36:	613b      	str	r3, [r7, #16]
      break;
 8002c38:	e027      	b.n	8002c8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	0c9b      	lsrs	r3, r3, #18
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	4a17      	ldr	r2, [pc, #92]	@ (8002ca0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c44:	5cd3      	ldrb	r3, [r2, r3]
 8002c46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d010      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c52:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	0c5b      	lsrs	r3, r3, #17
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	4a11      	ldr	r2, [pc, #68]	@ (8002ca4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a0d      	ldr	r2, [pc, #52]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c66:	fb03 f202 	mul.w	r2, r3, r2
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e004      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a0c      	ldr	r2, [pc, #48]	@ (8002ca8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c78:	fb02 f303 	mul.w	r3, r2, r3
 8002c7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	613b      	str	r3, [r7, #16]
      break;
 8002c82:	e002      	b.n	8002c8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c84:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c86:	613b      	str	r3, [r7, #16]
      break;
 8002c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c8a:	693b      	ldr	r3, [r7, #16]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	007a1200 	.word	0x007a1200
 8002ca0:	080050f4 	.word	0x080050f4
 8002ca4:	08005104 	.word	0x08005104
 8002ca8:	003d0900 	.word	0x003d0900

08002cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb0:	4b02      	ldr	r3, [pc, #8]	@ (8002cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	20000000 	.word	0x20000000

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cc4:	f7ff fff2 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4903      	ldr	r1, [pc, #12]	@ (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	080050ec 	.word	0x080050ec

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cec:	f7ff ffde 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	0adb      	lsrs	r3, r3, #11
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	@ (8002d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	080050ec 	.word	0x080050ec

08002d10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d18:	4b0a      	ldr	r3, [pc, #40]	@ (8002d44 <RCC_Delay+0x34>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d48 <RCC_Delay+0x38>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0a5b      	lsrs	r3, r3, #9
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d2c:	bf00      	nop
  }
  while (Delay --);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1e5a      	subs	r2, r3, #1
 8002d32:	60fa      	str	r2, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f9      	bne.n	8002d2c <RCC_Delay+0x1c>
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	20000000 	.word	0x20000000
 8002d48:	10624dd3 	.word	0x10624dd3

08002d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e042      	b.n	8002de4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fd fe34 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2224      	movs	r2, #36	@ 0x24
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f971 	bl	8003078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	@ 0x28
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d175      	bne.n	8002ef8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_UART_Transmit+0x2c>
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e06e      	b.n	8002efa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2221      	movs	r2, #33	@ 0x21
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e2a:	f7fe fa3d 	bl	80012a8 <HAL_GetTick>
 8002e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	88fa      	ldrh	r2, [r7, #6]
 8002e3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e44:	d108      	bne.n	8002e58 <HAL_UART_Transmit+0x6c>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d104      	bne.n	8002e58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	e003      	b.n	8002e60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e60:	e02e      	b.n	8002ec0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2180      	movs	r1, #128	@ 0x80
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f848 	bl	8002f02 <UART_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e03a      	b.n	8002efa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10b      	bne.n	8002ea2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	3302      	adds	r3, #2
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	e007      	b.n	8002eb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	781a      	ldrb	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1cb      	bne.n	8002e62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2140      	movs	r1, #64	@ 0x40
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 f814 	bl	8002f02 <UART_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e006      	b.n	8002efa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f12:	e03b      	b.n	8002f8c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1a:	d037      	beq.n	8002f8c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1c:	f7fe f9c4 	bl	80012a8 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	6a3a      	ldr	r2, [r7, #32]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d302      	bcc.n	8002f32 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e03a      	b.n	8002fac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d023      	beq.n	8002f8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b80      	cmp	r3, #128	@ 0x80
 8002f48:	d020      	beq.n	8002f8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b40      	cmp	r3, #64	@ 0x40
 8002f4e:	d01d      	beq.n	8002f8c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d116      	bne.n	8002f8c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f81d 	bl	8002fb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e00f      	b.n	8002fac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4013      	ands	r3, r2
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d0b4      	beq.n	8002f14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b095      	sub	sp, #84	@ 0x54
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	330c      	adds	r3, #12
 8002fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc6:	e853 3f00 	ldrex	r3, [r3]
 8002fca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fdc:	643a      	str	r2, [r7, #64]	@ 0x40
 8002fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fe2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fe4:	e841 2300 	strex	r3, r2, [r1]
 8002fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e5      	bne.n	8002fbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3314      	adds	r3, #20
 8002ff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	e853 3f00 	ldrex	r3, [r3]
 8002ffe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3314      	adds	r3, #20
 800300e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003010:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003012:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003018:	e841 2300 	strex	r3, r2, [r1]
 800301c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e5      	bne.n	8002ff0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003028:	2b01      	cmp	r3, #1
 800302a:	d119      	bne.n	8003060 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	330c      	adds	r3, #12
 8003032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	e853 3f00 	ldrex	r3, [r3]
 800303a:	60bb      	str	r3, [r7, #8]
   return(result);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f023 0310 	bic.w	r3, r3, #16
 8003042:	647b      	str	r3, [r7, #68]	@ 0x44
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800304c:	61ba      	str	r2, [r7, #24]
 800304e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003050:	6979      	ldr	r1, [r7, #20]
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	e841 2300 	strex	r3, r2, [r1]
 8003058:	613b      	str	r3, [r7, #16]
   return(result);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e5      	bne.n	800302c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800306e:	bf00      	nop
 8003070:	3754      	adds	r7, #84	@ 0x54
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80030b2:	f023 030c 	bic.w	r3, r3, #12
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	430b      	orrs	r3, r1
 80030be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a2c      	ldr	r2, [pc, #176]	@ (800318c <UART_SetConfig+0x114>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d103      	bne.n	80030e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030e0:	f7ff fe02 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	e002      	b.n	80030ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030e8:	f7ff fdea 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 80030ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	009a      	lsls	r2, r3, #2
 80030f8:	441a      	add	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	4a22      	ldr	r2, [pc, #136]	@ (8003190 <UART_SetConfig+0x118>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	0119      	lsls	r1, r3, #4
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009a      	lsls	r2, r3, #2
 8003118:	441a      	add	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fbb2 f2f3 	udiv	r2, r2, r3
 8003124:	4b1a      	ldr	r3, [pc, #104]	@ (8003190 <UART_SetConfig+0x118>)
 8003126:	fba3 0302 	umull	r0, r3, r3, r2
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2064      	movs	r0, #100	@ 0x64
 800312e:	fb00 f303 	mul.w	r3, r0, r3
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	3332      	adds	r3, #50	@ 0x32
 8003138:	4a15      	ldr	r2, [pc, #84]	@ (8003190 <UART_SetConfig+0x118>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003144:	4419      	add	r1, r3
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	009a      	lsls	r2, r3, #2
 8003150:	441a      	add	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	fbb2 f2f3 	udiv	r2, r2, r3
 800315c:	4b0c      	ldr	r3, [pc, #48]	@ (8003190 <UART_SetConfig+0x118>)
 800315e:	fba3 0302 	umull	r0, r3, r3, r2
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2064      	movs	r0, #100	@ 0x64
 8003166:	fb00 f303 	mul.w	r3, r0, r3
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	3332      	adds	r3, #50	@ 0x32
 8003170:	4a07      	ldr	r2, [pc, #28]	@ (8003190 <UART_SetConfig+0x118>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	f003 020f 	and.w	r2, r3, #15
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	440a      	add	r2, r1
 8003182:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40013800 	.word	0x40013800
 8003190:	51eb851f 	.word	0x51eb851f

08003194 <isotp_user_send_can>:
///////////////////////////////////////////////////////
///                 STATIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_user_send_can(const uint32_t arbitration_id, const uint8_t *data,
		const uint8_t size) {
 8003194:	b580      	push	{r7, lr}
 8003196:	b08e      	sub	sp, #56	@ 0x38
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	4613      	mov	r3, r2
 80031a0:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef TxHeader = {0};
 80031a2:	f107 0318 	add.w	r3, r7, #24
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	609a      	str	r2, [r3, #8]
 80031ae:	60da      	str	r2, [r3, #12]
 80031b0:	611a      	str	r2, [r3, #16]
 80031b2:	615a      	str	r2, [r3, #20]
	TxHeader.DLC = size;
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.RTR = CAN_RTR_DATA;
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.IDE = CAN_ID_STD;
 80031bc:	2300      	movs	r3, #0
 80031be:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = arbitration_id;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	61bb      	str	r3, [r7, #24]
	uint32_t TxMailBox;
	uint32_t FreeLevel = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 80031c4:	480d      	ldr	r0, [pc, #52]	@ (80031fc <isotp_user_send_can+0x68>)
 80031c6:	f7fe fb50 	bl	800186a <HAL_CAN_GetTxMailboxesFreeLevel>
 80031ca:	6378      	str	r0, [r7, #52]	@ 0x34
	if (FreeLevel == 0) return ISOTP_RET_ERROR;
 80031cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d102      	bne.n	80031d8 <isotp_user_send_can+0x44>
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295
 80031d6:	e00c      	b.n	80031f2 <isotp_user_send_can+0x5e>
	uint8_t ret = HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailBox);
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	f107 0118 	add.w	r1, r7, #24
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	4806      	ldr	r0, [pc, #24]	@ (80031fc <isotp_user_send_can+0x68>)
 80031e4:	f7fe fa72 	bl	80016cc <HAL_CAN_AddTxMessage>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	return ret;
 80031ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3738      	adds	r7, #56	@ 0x38
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200000c8 	.word	0x200000c8

08003200 <isotp_user_get_ms>:

uint32_t isotp_user_get_ms(void){
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8003204:	f7fe f850 	bl	80012a8 <HAL_GetTick>
 8003208:	4603      	mov	r3, r0
}
 800320a:	4618      	mov	r0, r3
 800320c:	bd80      	pop	{r7, pc}

0800320e <isotp_ms_to_st_min>:

/* st_min to microsecond */
static uint8_t isotp_ms_to_st_min(uint8_t ms) {
 800320e:	b480      	push	{r7}
 8003210:	b085      	sub	sp, #20
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	71fb      	strb	r3, [r7, #7]
    uint8_t st_min;

    st_min = ms;
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	73fb      	strb	r3, [r7, #15]
    if (st_min > 0x7F) {
 800321c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003220:	2b00      	cmp	r3, #0
 8003222:	da01      	bge.n	8003228 <isotp_ms_to_st_min+0x1a>
        st_min = 0x7F;
 8003224:	237f      	movs	r3, #127	@ 0x7f
 8003226:	73fb      	strb	r3, [r7, #15]
    }

    return st_min;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <isotp_st_min_to_ms>:

/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) {
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9) {
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	2bf0      	cmp	r3, #240	@ 0xf0
 8003242:	d905      	bls.n	8003250 <isotp_st_min_to_ms+0x1c>
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	2bf9      	cmp	r3, #249	@ 0xf9
 8003248:	d802      	bhi.n	8003250 <isotp_st_min_to_ms+0x1c>
        ms = 1;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
 800324e:	e008      	b.n	8003262 <isotp_st_min_to_ms+0x2e>
    } else if (st_min <= 0x7F) {
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	2b00      	cmp	r3, #0
 8003256:	db02      	blt.n	800325e <isotp_st_min_to_ms+0x2a>
        ms = st_min;
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	73fb      	strb	r3, [r7, #15]
 800325c:	e001      	b.n	8003262 <isotp_st_min_to_ms+0x2e>
    } else {
        ms = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]
    }

    return ms;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr

0800326e <isotp_send_flow_control>:

static int isotp_send_flow_control(IsoTpLink* link, uint8_t flow_status, uint8_t block_size, uint8_t st_min_ms) {
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	4608      	mov	r0, r1
 8003278:	4611      	mov	r1, r2
 800327a:	461a      	mov	r2, r3
 800327c:	4603      	mov	r3, r0
 800327e:	70fb      	strb	r3, [r7, #3]
 8003280:	460b      	mov	r3, r1
 8003282:	70bb      	strb	r3, [r7, #2]
 8003284:	4613      	mov	r3, r2
 8003286:	707b      	strb	r3, [r7, #1]

    IsoTpCanMessage message;
    int ret;

    /* setup message  */
    message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
 8003288:	7b3b      	ldrb	r3, [r7, #12]
 800328a:	2203      	movs	r2, #3
 800328c:	f362 1307 	bfi	r3, r2, #4, #4
 8003290:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.FS = flow_status;
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	b2da      	uxtb	r2, r3
 800329a:	7b3b      	ldrb	r3, [r7, #12]
 800329c:	f362 0303 	bfi	r3, r2, #0, #4
 80032a0:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.BS = block_size;
 80032a2:	78bb      	ldrb	r3, [r7, #2]
 80032a4:	737b      	strb	r3, [r7, #13]
    message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
 80032a6:	787b      	ldrb	r3, [r7, #1]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff ffb0 	bl	800320e <isotp_ms_to_st_min>
 80032ae:	4603      	mov	r3, r0
 80032b0:	73bb      	strb	r3, [r7, #14]

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.flow_control.reserve, 0x55, sizeof(message.as.flow_control.reserve));
 80032b2:	f107 030c 	add.w	r3, r7, #12
 80032b6:	3303      	adds	r3, #3
 80032b8:	2205      	movs	r2, #5
 80032ba:	2155      	movs	r1, #85	@ 0x55
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fe4e 	bl	8003f5e <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f107 010c 	add.w	r1, r7, #12
 80032ca:	2208      	movs	r2, #8
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff61 	bl	8003194 <isotp_user_send_can>
 80032d2:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            3);
#endif

    return ret;
 80032d4:	697b      	ldr	r3, [r7, #20]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <isotp_send_single_frame>:

static int isotp_send_single_frame(IsoTpLink* link, uint32_t id) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	895b      	ldrh	r3, [r3, #10]
 80032ee:	2b07      	cmp	r3, #7
 80032f0:	d905      	bls.n	80032fe <isotp_send_single_frame+0x1e>
 80032f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003368 <isotp_send_single_frame+0x88>)
 80032f4:	4a1d      	ldr	r2, [pc, #116]	@ (800336c <isotp_send_single_frame+0x8c>)
 80032f6:	2156      	movs	r1, #86	@ 0x56
 80032f8:	481d      	ldr	r0, [pc, #116]	@ (8003370 <isotp_send_single_frame+0x90>)
 80032fa:	f000 fc6f 	bl	8003bdc <__assert_func>

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
 80032fe:	7b3b      	ldrb	r3, [r7, #12]
 8003300:	f36f 1307 	bfc	r3, #4, #4
 8003304:	733b      	strb	r3, [r7, #12]
    message.as.single_frame.SF_DL = (uint8_t) link->send_size;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	895b      	ldrh	r3, [r3, #10]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	b2da      	uxtb	r2, r3
 8003310:	7b3b      	ldrb	r3, [r7, #12]
 8003312:	f362 0303 	bfi	r3, r2, #0, #4
 8003316:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6859      	ldr	r1, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	895b      	ldrh	r3, [r3, #10]
 8003320:	461a      	mov	r2, r3
 8003322:	f107 030c 	add.w	r3, r7, #12
 8003326:	3301      	adds	r3, #1
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fec2 	bl	80040b2 <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.single_frame.data + link->send_size, 0x55, sizeof(message.as.single_frame.data) - link->send_size);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	895b      	ldrh	r3, [r3, #10]
 8003332:	461a      	mov	r2, r3
 8003334:	f107 030c 	add.w	r3, r7, #12
 8003338:	3301      	adds	r3, #1
 800333a:	1898      	adds	r0, r3, r2
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	895b      	ldrh	r3, [r3, #10]
 8003340:	f1c3 0307 	rsb	r3, r3, #7
 8003344:	461a      	mov	r2, r3
 8003346:	2155      	movs	r1, #85	@ 0x55
 8003348:	f000 fe09 	bl	8003f5e <memset>
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 800334c:	f107 030c 	add.w	r3, r7, #12
 8003350:	2208      	movs	r2, #8
 8003352:	4619      	mov	r1, r3
 8003354:	6838      	ldr	r0, [r7, #0]
 8003356:	f7ff ff1d 	bl	8003194 <isotp_user_send_can>
 800335a:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(id,
            message.as.data_array.ptr,
            link->send_size + 1);
#endif

    return ret;
 800335c:	697b      	ldr	r3, [r7, #20]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	0800506c 	.word	0x0800506c
 800336c:	08005108 	.word	0x08005108
 8003370:	08005084 	.word	0x08005084

08003374 <isotp_send_first_frame>:

static int isotp_send_first_frame(IsoTpLink* link, uint32_t id) {
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
    
    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	895b      	ldrh	r3, [r3, #10]
 8003382:	2b07      	cmp	r3, #7
 8003384:	d805      	bhi.n	8003392 <isotp_send_first_frame+0x1e>
 8003386:	4b1d      	ldr	r3, [pc, #116]	@ (80033fc <isotp_send_first_frame+0x88>)
 8003388:	4a1d      	ldr	r2, [pc, #116]	@ (8003400 <isotp_send_first_frame+0x8c>)
 800338a:	2170      	movs	r1, #112	@ 0x70
 800338c:	481d      	ldr	r0, [pc, #116]	@ (8003404 <isotp_send_first_frame+0x90>)
 800338e:	f000 fc25 	bl	8003bdc <__assert_func>

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
 8003392:	7b3b      	ldrb	r3, [r7, #12]
 8003394:	2201      	movs	r2, #1
 8003396:	f362 1307 	bfi	r3, r2, #4, #4
 800339a:	733b      	strb	r3, [r7, #12]
    message.as.first_frame.FF_DL_low = (uint8_t) link->send_size;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	895b      	ldrh	r3, [r3, #10]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	737b      	strb	r3, [r7, #13]
    message.as.first_frame.FF_DL_high = (uint8_t) (0x0F & (link->send_size >> 8));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	895b      	ldrh	r3, [r3, #10]
 80033a8:	0a1b      	lsrs	r3, r3, #8
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	7b3b      	ldrb	r3, [r7, #12]
 80033b4:	f362 0303 	bfi	r3, r2, #0, #4
 80033b8:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.first_frame.data, link->send_buffer, sizeof(message.as.first_frame.data));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	f107 030e 	add.w	r3, r7, #14
 80033c2:	6811      	ldr	r1, [r2, #0]
 80033c4:	6019      	str	r1, [r3, #0]
 80033c6:	8892      	ldrh	r2, [r2, #4]
 80033c8:	809a      	strh	r2, [r3, #4]

    /* send message */
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 80033ca:	f107 030c 	add.w	r3, r7, #12
 80033ce:	2208      	movs	r2, #8
 80033d0:	4619      	mov	r1, r3
 80033d2:	6838      	ldr	r0, [r7, #0]
 80033d4:	f7ff fede 	bl	8003194 <isotp_user_send_can>
 80033d8:	6178      	str	r0, [r7, #20]
    if (ISOTP_RET_OK == ret) {
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d108      	bne.n	80033f2 <isotp_send_first_frame+0x7e>
        link->send_offset += sizeof(message.as.first_frame.data);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	899b      	ldrh	r3, [r3, #12]
 80033e4:	3306      	adds	r3, #6
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	819a      	strh	r2, [r3, #12]
        link->send_sn = 1;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	739a      	strb	r2, [r3, #14]
    }

    return ret;
 80033f2:	697b      	ldr	r3, [r7, #20]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	08005098 	.word	0x08005098
 8003400:	08005120 	.word	0x08005120
 8003404:	08005084 	.word	0x08005084

08003408 <isotp_send_consecutive_frame>:

static int isotp_send_consecutive_frame(IsoTpLink* link) {
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
    IsoTpCanMessage message;
    uint16_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	895b      	ldrh	r3, [r3, #10]
 8003414:	2b07      	cmp	r3, #7
 8003416:	d805      	bhi.n	8003424 <isotp_send_consecutive_frame+0x1c>
 8003418:	4b2d      	ldr	r3, [pc, #180]	@ (80034d0 <isotp_send_consecutive_frame+0xc8>)
 800341a:	4a2e      	ldr	r2, [pc, #184]	@ (80034d4 <isotp_send_consecutive_frame+0xcc>)
 800341c:	2189      	movs	r1, #137	@ 0x89
 800341e:	482e      	ldr	r0, [pc, #184]	@ (80034d8 <isotp_send_consecutive_frame+0xd0>)
 8003420:	f000 fbdc 	bl	8003bdc <__assert_func>

    /* setup message  */
    message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
 8003424:	7a3b      	ldrb	r3, [r7, #8]
 8003426:	2202      	movs	r2, #2
 8003428:	f362 1307 	bfi	r3, r2, #4, #4
 800342c:	723b      	strb	r3, [r7, #8]
    message.as.consecutive_frame.SN = link->send_sn;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	7b9b      	ldrb	r3, [r3, #14]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	b2da      	uxtb	r2, r3
 8003438:	7a3b      	ldrb	r3, [r7, #8]
 800343a:	f362 0303 	bfi	r3, r2, #0, #4
 800343e:	723b      	strb	r3, [r7, #8]
    data_length = link->send_size - link->send_offset;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	895a      	ldrh	r2, [r3, #10]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	899b      	ldrh	r3, [r3, #12]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	82fb      	strh	r3, [r7, #22]
    if (data_length > sizeof(message.as.consecutive_frame.data)) {
 800344c:	8afb      	ldrh	r3, [r7, #22]
 800344e:	2b07      	cmp	r3, #7
 8003450:	d901      	bls.n	8003456 <isotp_send_consecutive_frame+0x4e>
        data_length = sizeof(message.as.consecutive_frame.data);
 8003452:	2307      	movs	r3, #7
 8003454:	82fb      	strh	r3, [r7, #22]
    }
    (void) memcpy(message.as.consecutive_frame.data, link->send_buffer + link->send_offset, data_length);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	8992      	ldrh	r2, [r2, #12]
 800345e:	1899      	adds	r1, r3, r2
 8003460:	8afa      	ldrh	r2, [r7, #22]
 8003462:	f107 0308 	add.w	r3, r7, #8
 8003466:	3301      	adds	r3, #1
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fe22 	bl	80040b2 <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.consecutive_frame.data + data_length, 0x55, sizeof(message.as.consecutive_frame.data) - data_length);
 800346e:	8afb      	ldrh	r3, [r7, #22]
 8003470:	f107 0208 	add.w	r2, r7, #8
 8003474:	3201      	adds	r2, #1
 8003476:	18d0      	adds	r0, r2, r3
 8003478:	8afb      	ldrh	r3, [r7, #22]
 800347a:	f1c3 0307 	rsb	r3, r3, #7
 800347e:	461a      	mov	r2, r3
 8003480:	2155      	movs	r1, #85	@ 0x55
 8003482:	f000 fd6c 	bl	8003f5e <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f107 0108 	add.w	r1, r7, #8
 800348e:	2208      	movs	r2, #8
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fe7f 	bl	8003194 <isotp_user_send_can>
 8003496:	6138      	str	r0, [r7, #16]
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            data_length + 1);
#endif
    if (ISOTP_RET_OK == ret) {
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d113      	bne.n	80034c6 <isotp_send_consecutive_frame+0xbe>
        link->send_offset += data_length;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	899a      	ldrh	r2, [r3, #12]
 80034a2:	8afb      	ldrh	r3, [r7, #22]
 80034a4:	4413      	add	r3, r2
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	819a      	strh	r2, [r3, #12]
        if (++(link->send_sn) > 0x0F) {
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7b9b      	ldrb	r3, [r3, #14]
 80034b0:	3301      	adds	r3, #1
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	739a      	strb	r2, [r3, #14]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	7b9b      	ldrb	r3, [r3, #14]
 80034bc:	2b0f      	cmp	r3, #15
 80034be:	d902      	bls.n	80034c6 <isotp_send_consecutive_frame+0xbe>
            link->send_sn = 0;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	739a      	strb	r2, [r3, #14]
        }
    }
    
    return ret;
 80034c6:	693b      	ldr	r3, [r7, #16]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	08005098 	.word	0x08005098
 80034d4:	08005138 	.word	0x08005138
 80034d8:	08005084 	.word	0x08005084

080034dc <isotp_receive_single_frame>:

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	4613      	mov	r3, r2
 80034e8:	71fb      	strb	r3, [r7, #7]
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) || (message->as.single_frame.SF_DL > (len - 1))) {
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <isotp_receive_single_frame+0x2e>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	4293      	cmp	r3, r2
 8003508:	d802      	bhi.n	8003510 <isotp_receive_single_frame+0x34>
        // isotp_user_debug("Single-frame length too small.");
        return ISOTP_RET_LENGTH;
 800350a:	f06f 0306 	mvn.w	r3, #6
 800350e:	e014      	b.n	800353a <isotp_receive_single_frame+0x5e>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.single_frame.data, message->as.single_frame.SF_DL);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	1c59      	adds	r1, r3, #1
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	f000 fdc5 	bl	80040b2 <memcpy>
    link->receive_size = message->as.single_frame.SF_DL;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	85da      	strh	r2, [r3, #46]	@ 0x2e
    
    return ISOTP_RET_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <isotp_receive_first_frame>:

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8003542:	b580      	push	{r7, lr}
 8003544:	b086      	sub	sp, #24
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	4613      	mov	r3, r2
 800354e:	71fb      	strb	r3, [r7, #7]
    uint16_t payload_length;

    if (8 != len) {
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	2b08      	cmp	r3, #8
 8003554:	d002      	beq.n	800355c <isotp_receive_first_frame+0x1a>
        // isotp_user_debug("First frame should be 8 bytes in length.");
        return ISOTP_RET_LENGTH;
 8003556:	f06f 0306 	mvn.w	r3, #6
 800355a:	e02d      	b.n	80035b8 <isotp_receive_first_frame+0x76>
    }

    /* check data length */
    payload_length = message->as.first_frame.FF_DL_high;
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003564:	b2db      	uxtb	r3, r3
 8003566:	82fb      	strh	r3, [r7, #22]
    payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
 8003568:	8afb      	ldrh	r3, [r7, #22]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	b29b      	uxth	r3, r3
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	7852      	ldrb	r2, [r2, #1]
 8003572:	4413      	add	r3, r2
 8003574:	82fb      	strh	r3, [r7, #22]

    /* should not use multiple frame transmition */
    if (payload_length <= 7) {
 8003576:	8afb      	ldrh	r3, [r7, #22]
 8003578:	2b07      	cmp	r3, #7
 800357a:	d802      	bhi.n	8003582 <isotp_receive_first_frame+0x40>
        // isotp_user_debug("Should not use multiple frame transmission.");
        return ISOTP_RET_LENGTH;
 800357c:	f06f 0306 	mvn.w	r3, #6
 8003580:	e01a      	b.n	80035b8 <isotp_receive_first_frame+0x76>
    }
    
    if (payload_length > link->receive_buf_size) {
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003586:	8afa      	ldrh	r2, [r7, #22]
 8003588:	429a      	cmp	r2, r3
 800358a:	d902      	bls.n	8003592 <isotp_receive_first_frame+0x50>
        // isotp_user_debug("Multi-frame response too large for receiving buffer.");
        return ISOTP_RET_OVERFLOW;
 800358c:	f06f 0302 	mvn.w	r3, #2
 8003590:	e012      	b.n	80035b8 <isotp_receive_first_frame+0x76>
    }
    
    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.first_frame.data, sizeof(message->as.first_frame.data));
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3302      	adds	r3, #2
 800359a:	2206      	movs	r2, #6
 800359c:	4619      	mov	r1, r3
 800359e:	f000 fd88 	bl	80040b2 <memcpy>
    link->receive_size = payload_length;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8afa      	ldrh	r2, [r7, #22]
 80035a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    link->receive_offset = sizeof(message->as.first_frame.data);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2206      	movs	r2, #6
 80035ac:	861a      	strh	r2, [r3, #48]	@ 0x30
    link->receive_sn = 1;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

    return ISOTP_RET_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <isotp_receive_consecutive_frame>:

static int isotp_receive_consecutive_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	71fb      	strb	r3, [r7, #7]
    uint16_t remaining_bytes;
    
    /* check sn */
    if (link->receive_sn != message->as.consecutive_frame.SN) {
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	7812      	ldrb	r2, [r2, #0]
 80035d8:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	4293      	cmp	r3, r2
 80035e0:	d002      	beq.n	80035e8 <isotp_receive_consecutive_frame+0x28>
        return ISOTP_RET_WRONG_SN;
 80035e2:	f06f 0303 	mvn.w	r3, #3
 80035e6:	e035      	b.n	8003654 <isotp_receive_consecutive_frame+0x94>
    }

    /* check data length */
    remaining_bytes = link->receive_size - link->receive_offset;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	82fb      	strh	r3, [r7, #22]
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)) {
 80035f4:	8afb      	ldrh	r3, [r7, #22]
 80035f6:	2b07      	cmp	r3, #7
 80035f8:	d901      	bls.n	80035fe <isotp_receive_consecutive_frame+0x3e>
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
 80035fa:	2307      	movs	r3, #7
 80035fc:	82fb      	strh	r3, [r7, #22]
    }
    if (remaining_bytes > len - 1) {
 80035fe:	79fa      	ldrb	r2, [r7, #7]
 8003600:	8afb      	ldrh	r3, [r7, #22]
 8003602:	429a      	cmp	r2, r3
 8003604:	dc02      	bgt.n	800360c <isotp_receive_consecutive_frame+0x4c>
        // isotp_user_debug("Consecutive frame too short.");
        return ISOTP_RET_LENGTH;
 8003606:	f06f 0306 	mvn.w	r3, #6
 800360a:	e023      	b.n	8003654 <isotp_receive_consecutive_frame+0x94>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer + link->receive_offset, message->as.consecutive_frame.data, remaining_bytes);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 8003614:	1898      	adds	r0, r3, r2
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3301      	adds	r3, #1
 800361a:	8afa      	ldrh	r2, [r7, #22]
 800361c:	4619      	mov	r1, r3
 800361e:	f000 fd48 	bl	80040b2 <memcpy>

    link->receive_offset += remaining_bytes;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8003626:	8afb      	ldrh	r3, [r7, #22]
 8003628:	4413      	add	r3, r2
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (++(link->receive_sn) > 0x0F) {
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003636:	3301      	adds	r3, #1
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003646:	2b0f      	cmp	r3, #15
 8003648:	d903      	bls.n	8003652 <isotp_receive_consecutive_frame+0x92>
        link->receive_sn = 0;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }

    return ISOTP_RET_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <isotp_receive_flow_control_frame>:

static int isotp_receive_flow_control_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	4613      	mov	r3, r2
 8003668:	71fb      	strb	r3, [r7, #7]
    /* check message length */
    if (len < 3) {
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d802      	bhi.n	8003676 <isotp_receive_flow_control_frame+0x1a>
        // isotp_user_debug("Flow control frame too short.");
        return ISOTP_RET_LENGTH;
 8003670:	f06f 0306 	mvn.w	r3, #6
 8003674:	e000      	b.n	8003678 <isotp_receive_flow_control_frame+0x1c>
    }

    return ISOTP_RET_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <isotp_send>:

///////////////////////////////////////////////////////
///                 PUBLIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size) {
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	4613      	mov	r3, r2
 800368e:	80fb      	strh	r3, [r7, #6]
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6819      	ldr	r1, [r3, #0]
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f805 	bl	80036a8 <isotp_send_with_id>
 800369e:	4603      	mov	r3, r0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <isotp_send_with_id>:

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b0a6      	sub	sp, #152	@ 0x98
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	807b      	strh	r3, [r7, #2]
    int ret;

    if (link == 0x0) {
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d102      	bne.n	80036c2 <isotp_send_with_id+0x1a>
        // isotp_user_debug("Link is null!");
        return ISOTP_RET_ERROR;
 80036bc:	f04f 33ff 	mov.w	r3, #4294967295
 80036c0:	e057      	b.n	8003772 <isotp_send_with_id+0xca>
    }

    if (size > link->send_buf_size) {
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	891b      	ldrh	r3, [r3, #8]
 80036c6:	887a      	ldrh	r2, [r7, #2]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d90a      	bls.n	80036e2 <isotp_send_with_id+0x3a>
        // isotp_user_debug("Message size too large. Increase ISO_TP_MAX_MESSAGE_SIZE to set a larger buffer\n");
        char message[128];
        sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n", size, link->send_buf_size);
 80036cc:	887a      	ldrh	r2, [r7, #2]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	891b      	ldrh	r3, [r3, #8]
 80036d2:	f107 0014 	add.w	r0, r7, #20
 80036d6:	4929      	ldr	r1, [pc, #164]	@ (800377c <isotp_send_with_id+0xd4>)
 80036d8:	f000 fbde 	bl	8003e98 <siprintf>
        return ISOTP_RET_OVERFLOW;
 80036dc:	f06f 0302 	mvn.w	r3, #2
 80036e0:	e047      	b.n	8003772 <isotp_send_with_id+0xca>
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d102      	bne.n	80036f2 <isotp_send_with_id+0x4a>
        // isotp_user_debug("Abort previous message, transmission in progress.\n");
        return ISOTP_RET_INPROGRESS;
 80036ec:	f06f 0301 	mvn.w	r3, #1
 80036f0:	e03f      	b.n	8003772 <isotp_send_with_id+0xca>
    }

    /* copy into local buffer */
    link->send_size = size;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	887a      	ldrh	r2, [r7, #2]
 80036f6:	815a      	strh	r2, [r3, #10]
    link->send_offset = 0;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	819a      	strh	r2, [r3, #12]
    (void) memcpy(link->send_buffer, payload, size);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	887a      	ldrh	r2, [r7, #2]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fcd3 	bl	80040b2 <memcpy>

    if (link->send_size < 8) {
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	895b      	ldrh	r3, [r3, #10]
 8003710:	2b07      	cmp	r3, #7
 8003712:	d806      	bhi.n	8003722 <isotp_send_with_id+0x7a>
        /* send single frame */
        ret = isotp_send_single_frame(link, id);
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7ff fde2 	bl	80032e0 <isotp_send_single_frame>
 800371c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8003720:	e025      	b.n	800376e <isotp_send_with_id+0xc6>
    } else {
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id);
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7ff fe25 	bl	8003374 <isotp_send_first_frame>
 800372a:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret) {
 800372e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11b      	bne.n	800376e <isotp_send_with_id+0xc6>
            link->send_bs_remain = 0;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	821a      	strh	r2, [r3, #16]
            link->send_st_min = 0;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	749a      	strb	r2, [r3, #18]
            link->send_wtf_count = 0;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	74da      	strb	r2, [r3, #19]
            link->send_timer_st = isotp_user_get_ms();
 8003748:	f7ff fd5a 	bl	8003200 <isotp_user_get_ms>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	615a      	str	r2, [r3, #20]
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8003752:	f7ff fd55 	bl	8003200 <isotp_user_get_ms>
 8003756:	4603      	mov	r3, r0
 8003758:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	619a      	str	r2, [r3, #24]
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    return ret;
 800376e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
}
 8003772:	4618      	mov	r0, r3
 8003774:	3798      	adds	r7, #152	@ 0x98
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	080050ac 	.word	0x080050ac

08003780 <isotp_on_can_message>:

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	4613      	mov	r3, r2
 800378c:	71fb      	strb	r3, [r7, #7]
    IsoTpCanMessage message;
    int ret;
    
    if (len < 2 || len > 8) {
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	2b01      	cmp	r3, #1
 8003792:	f240 8149 	bls.w	8003a28 <isotp_on_can_message+0x2a8>
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	2b08      	cmp	r3, #8
 800379a:	f200 8145 	bhi.w	8003a28 <isotp_on_can_message+0x2a8>
        return;
    }

    memcpy(message.as.data_array.ptr, data, len);
 800379e:	79fa      	ldrb	r2, [r7, #7]
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fc83 	bl	80040b2 <memcpy>
    memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	f107 0214 	add.w	r2, r7, #20
 80037b2:	18d0      	adds	r0, r2, r3
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	f1c3 0308 	rsb	r3, r3, #8
 80037ba:	461a      	mov	r2, r3
 80037bc:	2100      	movs	r1, #0
 80037be:	f000 fbce 	bl	8003f5e <memset>

    switch (message.as.common.type) {
 80037c2:	7d3b      	ldrb	r3, [r7, #20]
 80037c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	f200 8120 	bhi.w	8003a10 <isotp_on_can_message+0x290>
 80037d0:	a201      	add	r2, pc, #4	@ (adr r2, 80037d8 <isotp_on_can_message+0x58>)
 80037d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d6:	bf00      	nop
 80037d8:	080037e9 	.word	0x080037e9
 80037dc:	08003825 	.word	0x08003825
 80037e0:	080038ad 	.word	0x080038ad
 80037e4:	0800394b 	.word	0x0800394b
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d104      	bne.n	80037fc <isotp_on_can_message+0x7c>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f06f 0205 	mvn.w	r2, #5
 80037f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80037fa:	e002      	b.n	8003802 <isotp_on_can_message+0x82>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_single_frame(link, &message, len);
 8003802:	79fa      	ldrb	r2, [r7, #7]
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	4619      	mov	r1, r3
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f7ff fe66 	bl	80034dc <isotp_receive_single_frame>
 8003810:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	2b00      	cmp	r3, #0
 8003816:	f040 80fd 	bne.w	8003a14 <isotp_on_can_message+0x294>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            }
            break;
 8003822:	e0f7      	b.n	8003a14 <isotp_on_can_message+0x294>
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800382a:	2b01      	cmp	r3, #1
 800382c:	d104      	bne.n	8003838 <isotp_on_can_message+0xb8>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f06f 0205 	mvn.w	r2, #5
 8003834:	639a      	str	r2, [r3, #56]	@ 0x38
 8003836:	e002      	b.n	800383e <isotp_on_can_message+0xbe>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_first_frame(link, &message, len);
 800383e:	79fa      	ldrb	r2, [r7, #7]
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	4619      	mov	r1, r3
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7ff fe7b 	bl	8003542 <isotp_receive_first_frame>
 800384c:	61f8      	str	r0, [r7, #28]

            /* if overflow happened */
            if (ISOTP_RET_OVERFLOW == ret) {
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f113 0f03 	cmn.w	r3, #3
 8003854:	d10e      	bne.n	8003874 <isotp_on_can_message+0xf4>
                /* update protocol result */
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f06f 0207 	mvn.w	r2, #7
 800385c:	639a      	str	r2, [r3, #56]	@ 0x38
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send error message */
                isotp_send_flow_control(link, PCI_FLOW_STATUS_OVERFLOW, 0, 0);
 8003866:	2300      	movs	r3, #0
 8003868:	2200      	movs	r2, #0
 800386a:	2102      	movs	r1, #2
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f7ff fcfe 	bl	800326e <isotp_send_flow_control>
                break;
 8003872:	e0d8      	b.n	8003a26 <isotp_on_can_message+0x2a6>
            }

            /* if receive successful */
            if (ISOTP_RET_OK == ret) {
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 80ce 	bne.w	8003a18 <isotp_on_can_message+0x298>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send fc frame */
                link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2208      	movs	r2, #8
 8003888:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8003892:	2319      	movs	r3, #25
 8003894:	2100      	movs	r1, #0
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f7ff fce9 	bl	800326e <isotp_send_flow_control>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800389c:	f7ff fcb0 	bl	8003200 <isotp_user_get_ms>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	635a      	str	r2, [r3, #52]	@ 0x34
            }
            
            break;
 80038aa:	e0b5      	b.n	8003a18 <isotp_on_can_message+0x298>
        }
        case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
            /* check if in receiving status */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status) {
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d004      	beq.n	80038c0 <isotp_on_can_message+0x140>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f06f 0205 	mvn.w	r2, #5
 80038bc:	639a      	str	r2, [r3, #56]	@ 0x38
                break;
 80038be:	e0b2      	b.n	8003a26 <isotp_on_can_message+0x2a6>
            }

            /* handle message */
            ret = isotp_receive_consecutive_frame(link, &message, len);
 80038c0:	79fa      	ldrb	r2, [r7, #7]
 80038c2:	f107 0314 	add.w	r3, r7, #20
 80038c6:	4619      	mov	r1, r3
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff fe79 	bl	80035c0 <isotp_receive_consecutive_frame>
 80038ce:	61f8      	str	r0, [r7, #28]

            /* if wrong sn */
            if (ISOTP_RET_WRONG_SN == ret) {
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f113 0f04 	cmn.w	r3, #4
 80038d6:	d108      	bne.n	80038ea <isotp_on_can_message+0x16a>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_WRONG_SN;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f06f 0203 	mvn.w	r2, #3
 80038de:	639a      	str	r2, [r3, #56]	@ 0x38
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                break;
 80038e8:	e09d      	b.n	8003a26 <isotp_on_can_message+0x2a6>
            }

            /* if success */
            if (ISOTP_RET_OK == ret) {
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f040 8095 	bne.w	8003a1c <isotp_on_can_message+0x29c>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80038f2:	f7ff fc85 	bl	8003200 <isotp_user_get_ms>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	635a      	str	r2, [r3, #52]	@ 0x34
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size) {
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003908:	429a      	cmp	r2, r3
 800390a:	d304      	bcc.n	8003916 <isotp_on_can_message+0x196>
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
                    }
                }
            }
            
            break;
 8003914:	e082      	b.n	8003a1c <isotp_on_can_message+0x29c>
                    if (0 == --link->receive_bs_count) {
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800391c:	3b01      	subs	r3, #1
 800391e:	b2da      	uxtb	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800392c:	2b00      	cmp	r3, #0
 800392e:	d175      	bne.n	8003a1c <isotp_on_can_message+0x29c>
                        link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2208      	movs	r2, #8
 8003934:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800393e:	2319      	movs	r3, #25
 8003940:	2100      	movs	r1, #0
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f7ff fc93 	bl	800326e <isotp_send_flow_control>
            break;
 8003948:	e068      	b.n	8003a1c <isotp_on_can_message+0x29c>
        }
        case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
        	HAL_GPIO_WritePin(LEDIn_GPIO_Port, LEDIn_Pin, 0);
 800394a:	2200      	movs	r2, #0
 800394c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003950:	4837      	ldr	r0, [pc, #220]	@ (8003a30 <isotp_on_can_message+0x2b0>)
 8003952:	f7fe fdb9 	bl	80024c8 <HAL_GPIO_WritePin>
            /* handle fc frame only when sending in progress  */
            if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status) {
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d15f      	bne.n	8003a20 <isotp_on_can_message+0x2a0>
                break;
            }

            /* handle message */
            ret = isotp_receive_flow_control_frame(link, &message, len);
 8003960:	79fa      	ldrb	r2, [r7, #7]
 8003962:	f107 0314 	add.w	r3, r7, #20
 8003966:	4619      	mov	r1, r3
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f7ff fe77 	bl	800365c <isotp_receive_flow_control_frame>
 800396e:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d156      	bne.n	8003a24 <isotp_on_can_message+0x2a4>
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8003976:	f7ff fc43 	bl	8003200 <isotp_user_get_ms>
 800397a:	4603      	mov	r3, r0
 800397c:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	619a      	str	r2, [r3, #24]

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
 8003984:	7d3b      	ldrb	r3, [r7, #20]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d108      	bne.n	80039a2 <isotp_on_can_message+0x222>
                    link->send_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f06f 0207 	mvn.w	r2, #7
 8003996:	61da      	str	r2, [r3, #28]
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2020 	strb.w	r2, [r3, #32]
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
                    link->send_wtf_count = 0;
                }
            }
            break;
 80039a0:	e040      	b.n	8003a24 <isotp_on_can_message+0x2a4>
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
 80039a2:	7d3b      	ldrb	r3, [r7, #20]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d112      	bne.n	80039d4 <isotp_on_can_message+0x254>
                    link->send_wtf_count += 1;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	7cdb      	ldrb	r3, [r3, #19]
 80039b2:	3301      	adds	r3, #1
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	74da      	strb	r2, [r3, #19]
                    if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER) {
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	7cdb      	ldrb	r3, [r3, #19]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d930      	bls.n	8003a24 <isotp_on_can_message+0x2a4>
                        link->send_protocol_result = ISOTP_PROTOCOL_RESULT_WFT_OVRN;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f06f 0206 	mvn.w	r2, #6
 80039c8:	61da      	str	r2, [r3, #28]
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 80039d2:	e027      	b.n	8003a24 <isotp_on_can_message+0x2a4>
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS) {
 80039d4:	7d3b      	ldrb	r3, [r7, #20]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d121      	bne.n	8003a24 <isotp_on_can_message+0x2a4>
                    if (0 == message.as.flow_control.BS) {
 80039e0:	7d7b      	ldrb	r3, [r7, #21]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <isotp_on_can_message+0x270>
                        link->send_bs_remain = ISOTP_INVALID_BS;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80039ec:	821a      	strh	r2, [r3, #16]
 80039ee:	e003      	b.n	80039f8 <isotp_on_can_message+0x278>
                        link->send_bs_remain = message.as.flow_control.BS;
 80039f0:	7d7b      	ldrb	r3, [r7, #21]
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	821a      	strh	r2, [r3, #16]
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
 80039f8:	7dbb      	ldrb	r3, [r7, #22]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fc1a 	bl	8003234 <isotp_st_min_to_ms>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	749a      	strb	r2, [r3, #18]
                    link->send_wtf_count = 0;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	74da      	strb	r2, [r3, #19]
            break;
 8003a0e:	e009      	b.n	8003a24 <isotp_on_can_message+0x2a4>
        default:
            break;
 8003a10:	bf00      	nop
 8003a12:	e00a      	b.n	8003a2a <isotp_on_can_message+0x2aa>
            break;
 8003a14:	bf00      	nop
 8003a16:	e008      	b.n	8003a2a <isotp_on_can_message+0x2aa>
            break;
 8003a18:	bf00      	nop
 8003a1a:	e006      	b.n	8003a2a <isotp_on_can_message+0x2aa>
            break;
 8003a1c:	bf00      	nop
 8003a1e:	e004      	b.n	8003a2a <isotp_on_can_message+0x2aa>
                break;
 8003a20:	bf00      	nop
 8003a22:	e002      	b.n	8003a2a <isotp_on_can_message+0x2aa>
            break;
 8003a24:	bf00      	nop
    };
    
    return;
 8003a26:	e000      	b.n	8003a2a <isotp_on_can_message+0x2aa>
        return;
 8003a28:	bf00      	nop
}
 8003a2a:	3720      	adds	r7, #32
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40011000 	.word	0x40011000

08003a34 <isotp_receive>:

int isotp_receive(IsoTpLink *link, uint8_t *payload, const uint16_t payload_size, uint16_t *out_size) {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	80fb      	strh	r3, [r7, #6]
    uint16_t copylen;
    
    if (ISOTP_RECEIVE_STATUS_FULL != link->receive_status) {
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d002      	beq.n	8003a54 <isotp_receive+0x20>
        return ISOTP_RET_NO_DATA;
 8003a4e:	f06f 0304 	mvn.w	r3, #4
 8003a52:	e017      	b.n	8003a84 <isotp_receive+0x50>
    }

    copylen = link->receive_size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a58:	82fb      	strh	r3, [r7, #22]
    if (copylen > payload_size) {
 8003a5a:	8afa      	ldrh	r2, [r7, #22]
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d901      	bls.n	8003a66 <isotp_receive+0x32>
        copylen = payload_size;
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	82fb      	strh	r3, [r7, #22]
    }

    memcpy(payload, link->receive_buffer, copylen);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6a:	8afa      	ldrh	r2, [r7, #22]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	68b8      	ldr	r0, [r7, #8]
 8003a70:	f000 fb1f 	bl	80040b2 <memcpy>
    *out_size = copylen;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	8afa      	ldrh	r2, [r7, #22]
 8003a78:	801a      	strh	r2, [r3, #0]

    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return ISOTP_RET_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <isotp_init_link>:

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf, uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	807b      	strh	r3, [r7, #2]
    memset(link, 0, sizeof(*link));
 8003a9a:	2240      	movs	r2, #64	@ 0x40
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fa5d 	bl	8003f5e <memset>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    link->send_status = ISOTP_SEND_STATUS_IDLE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2020 	strb.w	r2, [r3, #32]
    link->send_arbitration_id = sendid;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	601a      	str	r2, [r3, #0]
    link->send_buffer = sendbuf;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	605a      	str	r2, [r3, #4]
    link->send_buf_size = sendbufsize;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	811a      	strh	r2, [r3, #8]
    link->receive_buffer = recvbuf;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	629a      	str	r2, [r3, #40]	@ 0x28
    link->receive_buf_size = recvbufsize;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8bba      	ldrh	r2, [r7, #28]
 8003ad0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    
    return;
 8003ad2:	bf00      	nop
}
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <isotp_poll>:

void isotp_poll(IsoTpLink *link) {
 8003ada:	b590      	push	{r4, r7, lr}
 8003adc:	b085      	sub	sp, #20
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
    int ret;

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d15c      	bne.n	8003ba6 <isotp_poll+0xcc>

        /* continue send data */
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8a1b      	ldrh	r3, [r3, #16]
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
 8003af0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d003      	beq.n	8003b00 <isotp_poll+0x26>
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8a1b      	ldrh	r3, [r3, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d041      	beq.n	8003b84 <isotp_poll+0xaa>
        /* and if st_min is zero or go beyond interval time */
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	7c9b      	ldrb	r3, [r3, #18]
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00c      	beq.n	8003b22 <isotp_poll+0x48>
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	7c9b      	ldrb	r3, [r3, #18]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d039      	beq.n	8003b84 <isotp_poll+0xaa>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	461c      	mov	r4, r3
 8003b16:	f7ff fb73 	bl	8003200 <isotp_user_get_ms>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	1ae3      	subs	r3, r4, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	da30      	bge.n	8003b84 <isotp_poll+0xaa>
            
            ret = isotp_send_consecutive_frame(link);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff fc70 	bl	8003408 <isotp_send_consecutive_frame>
 8003b28:	60f8      	str	r0, [r7, #12]
            if (ISOTP_RET_OK == ret) {
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d125      	bne.n	8003b7c <isotp_poll+0xa2>
                if (ISOTP_INVALID_BS != link->send_bs_remain) {
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8a1b      	ldrh	r3, [r3, #16]
 8003b34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d005      	beq.n	8003b48 <isotp_poll+0x6e>
                    link->send_bs_remain -= 1;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8a1b      	ldrh	r3, [r3, #16]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	821a      	strh	r2, [r3, #16]
                }
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8003b48:	f7ff fb5a 	bl	8003200 <isotp_user_get_ms>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	619a      	str	r2, [r3, #24]
                link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
 8003b56:	f7ff fb53 	bl	8003200 <isotp_user_get_ms>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	7c9b      	ldrb	r3, [r3, #18]
 8003b60:	441a      	add	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	615a      	str	r2, [r3, #20]

                /* check if send finish */
                if (link->send_offset >= link->send_size) {
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	899a      	ldrh	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	895b      	ldrh	r3, [r3, #10]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d308      	bcc.n	8003b84 <isotp_poll+0xaa>
                    link->send_status = ISOTP_SEND_STATUS_IDLE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2020 	strb.w	r2, [r3, #32]
 8003b7a:	e003      	b.n	8003b84 <isotp_poll+0xaa>
                }
            } else {
                link->send_status = ISOTP_SEND_STATUS_ERROR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)) {
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	461c      	mov	r4, r3
 8003b8a:	f7ff fb39 	bl	8003200 <isotp_user_get_ms>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	1ae3      	subs	r3, r4, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	da07      	bge.n	8003ba6 <isotp_poll+0xcc>
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_BS;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f06f 0201 	mvn.w	r2, #1
 8003b9c:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_ERROR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d111      	bne.n	8003bd4 <isotp_poll+0xfa>
        
        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)) {
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb4:	461c      	mov	r4, r3
 8003bb6:	f7ff fb23 	bl	8003200 <isotp_user_get_ms>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	1ae3      	subs	r3, r4, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	da08      	bge.n	8003bd4 <isotp_poll+0xfa>
            link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_CR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f06f 0202 	mvn.w	r2, #2
 8003bc8:	639a      	str	r2, [r3, #56]	@ 0x38
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    return;
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
}
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd90      	pop	{r4, r7, pc}

08003bdc <__assert_func>:
 8003bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003bde:	4614      	mov	r4, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <__assert_func+0x2c>)
 8003be4:	4605      	mov	r5, r0
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68d8      	ldr	r0, [r3, #12]
 8003bea:	b954      	cbnz	r4, 8003c02 <__assert_func+0x26>
 8003bec:	4b07      	ldr	r3, [pc, #28]	@ (8003c0c <__assert_func+0x30>)
 8003bee:	461c      	mov	r4, r3
 8003bf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003bf4:	9100      	str	r1, [sp, #0]
 8003bf6:	462b      	mov	r3, r5
 8003bf8:	4905      	ldr	r1, [pc, #20]	@ (8003c10 <__assert_func+0x34>)
 8003bfa:	f000 f91d 	bl	8003e38 <fiprintf>
 8003bfe:	f000 fa66 	bl	80040ce <abort>
 8003c02:	4b04      	ldr	r3, [pc, #16]	@ (8003c14 <__assert_func+0x38>)
 8003c04:	e7f4      	b.n	8003bf0 <__assert_func+0x14>
 8003c06:	bf00      	nop
 8003c08:	2000001c 	.word	0x2000001c
 8003c0c:	08005190 	.word	0x08005190
 8003c10:	08005162 	.word	0x08005162
 8003c14:	08005155 	.word	0x08005155

08003c18 <srand>:
 8003c18:	b538      	push	{r3, r4, r5, lr}
 8003c1a:	4b10      	ldr	r3, [pc, #64]	@ (8003c5c <srand+0x44>)
 8003c1c:	4604      	mov	r4, r0
 8003c1e:	681d      	ldr	r5, [r3, #0]
 8003c20:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003c22:	b9b3      	cbnz	r3, 8003c52 <srand+0x3a>
 8003c24:	2018      	movs	r0, #24
 8003c26:	f000 faa1 	bl	800416c <malloc>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	6328      	str	r0, [r5, #48]	@ 0x30
 8003c2e:	b920      	cbnz	r0, 8003c3a <srand+0x22>
 8003c30:	2146      	movs	r1, #70	@ 0x46
 8003c32:	4b0b      	ldr	r3, [pc, #44]	@ (8003c60 <srand+0x48>)
 8003c34:	480b      	ldr	r0, [pc, #44]	@ (8003c64 <srand+0x4c>)
 8003c36:	f7ff ffd1 	bl	8003bdc <__assert_func>
 8003c3a:	490b      	ldr	r1, [pc, #44]	@ (8003c68 <srand+0x50>)
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c6c <srand+0x54>)
 8003c3e:	e9c0 1300 	strd	r1, r3, [r0]
 8003c42:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <srand+0x58>)
 8003c44:	2100      	movs	r1, #0
 8003c46:	6083      	str	r3, [r0, #8]
 8003c48:	230b      	movs	r3, #11
 8003c4a:	8183      	strh	r3, [r0, #12]
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003c52:	2200      	movs	r2, #0
 8003c54:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003c56:	611c      	str	r4, [r3, #16]
 8003c58:	615a      	str	r2, [r3, #20]
 8003c5a:	bd38      	pop	{r3, r4, r5, pc}
 8003c5c:	2000001c 	.word	0x2000001c
 8003c60:	08005191 	.word	0x08005191
 8003c64:	080051a8 	.word	0x080051a8
 8003c68:	abcd330e 	.word	0xabcd330e
 8003c6c:	e66d1234 	.word	0xe66d1234
 8003c70:	0005deec 	.word	0x0005deec

08003c74 <rand>:
 8003c74:	4b16      	ldr	r3, [pc, #88]	@ (8003cd0 <rand+0x5c>)
 8003c76:	b510      	push	{r4, lr}
 8003c78:	681c      	ldr	r4, [r3, #0]
 8003c7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c7c:	b9b3      	cbnz	r3, 8003cac <rand+0x38>
 8003c7e:	2018      	movs	r0, #24
 8003c80:	f000 fa74 	bl	800416c <malloc>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6320      	str	r0, [r4, #48]	@ 0x30
 8003c88:	b920      	cbnz	r0, 8003c94 <rand+0x20>
 8003c8a:	2152      	movs	r1, #82	@ 0x52
 8003c8c:	4b11      	ldr	r3, [pc, #68]	@ (8003cd4 <rand+0x60>)
 8003c8e:	4812      	ldr	r0, [pc, #72]	@ (8003cd8 <rand+0x64>)
 8003c90:	f7ff ffa4 	bl	8003bdc <__assert_func>
 8003c94:	4911      	ldr	r1, [pc, #68]	@ (8003cdc <rand+0x68>)
 8003c96:	4b12      	ldr	r3, [pc, #72]	@ (8003ce0 <rand+0x6c>)
 8003c98:	e9c0 1300 	strd	r1, r3, [r0]
 8003c9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ce4 <rand+0x70>)
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	6083      	str	r3, [r0, #8]
 8003ca2:	230b      	movs	r3, #11
 8003ca4:	8183      	strh	r3, [r0, #12]
 8003ca6:	2001      	movs	r0, #1
 8003ca8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003cac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003cae:	480e      	ldr	r0, [pc, #56]	@ (8003ce8 <rand+0x74>)
 8003cb0:	690b      	ldr	r3, [r1, #16]
 8003cb2:	694c      	ldr	r4, [r1, #20]
 8003cb4:	4358      	muls	r0, r3
 8003cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8003cec <rand+0x78>)
 8003cb8:	fb02 0004 	mla	r0, r2, r4, r0
 8003cbc:	fba3 3202 	umull	r3, r2, r3, r2
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	eb40 0002 	adc.w	r0, r0, r2
 8003cc6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003cca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003cce:	bd10      	pop	{r4, pc}
 8003cd0:	2000001c 	.word	0x2000001c
 8003cd4:	08005191 	.word	0x08005191
 8003cd8:	080051a8 	.word	0x080051a8
 8003cdc:	abcd330e 	.word	0xabcd330e
 8003ce0:	e66d1234 	.word	0xe66d1234
 8003ce4:	0005deec 	.word	0x0005deec
 8003ce8:	5851f42d 	.word	0x5851f42d
 8003cec:	4c957f2d 	.word	0x4c957f2d

08003cf0 <std>:
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	b510      	push	{r4, lr}
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8003cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cfe:	6083      	str	r3, [r0, #8]
 8003d00:	8181      	strh	r1, [r0, #12]
 8003d02:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d04:	81c2      	strh	r2, [r0, #14]
 8003d06:	6183      	str	r3, [r0, #24]
 8003d08:	4619      	mov	r1, r3
 8003d0a:	2208      	movs	r2, #8
 8003d0c:	305c      	adds	r0, #92	@ 0x5c
 8003d0e:	f000 f926 	bl	8003f5e <memset>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <std+0x58>)
 8003d14:	6224      	str	r4, [r4, #32]
 8003d16:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d18:	4b0c      	ldr	r3, [pc, #48]	@ (8003d4c <std+0x5c>)
 8003d1a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d50 <std+0x60>)
 8003d1e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d20:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <std+0x64>)
 8003d22:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d24:	4b0c      	ldr	r3, [pc, #48]	@ (8003d58 <std+0x68>)
 8003d26:	429c      	cmp	r4, r3
 8003d28:	d006      	beq.n	8003d38 <std+0x48>
 8003d2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d2e:	4294      	cmp	r4, r2
 8003d30:	d002      	beq.n	8003d38 <std+0x48>
 8003d32:	33d0      	adds	r3, #208	@ 0xd0
 8003d34:	429c      	cmp	r4, r3
 8003d36:	d105      	bne.n	8003d44 <std+0x54>
 8003d38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d40:	f000 b9b4 	b.w	80040ac <__retarget_lock_init_recursive>
 8003d44:	bd10      	pop	{r4, pc}
 8003d46:	bf00      	nop
 8003d48:	08003ed9 	.word	0x08003ed9
 8003d4c:	08003efb 	.word	0x08003efb
 8003d50:	08003f33 	.word	0x08003f33
 8003d54:	08003f57 	.word	0x08003f57
 8003d58:	20000144 	.word	0x20000144

08003d5c <stdio_exit_handler>:
 8003d5c:	4a02      	ldr	r2, [pc, #8]	@ (8003d68 <stdio_exit_handler+0xc>)
 8003d5e:	4903      	ldr	r1, [pc, #12]	@ (8003d6c <stdio_exit_handler+0x10>)
 8003d60:	4803      	ldr	r0, [pc, #12]	@ (8003d70 <stdio_exit_handler+0x14>)
 8003d62:	f000 b87b 	b.w	8003e5c <_fwalk_sglue>
 8003d66:	bf00      	nop
 8003d68:	20000010 	.word	0x20000010
 8003d6c:	08004c2d 	.word	0x08004c2d
 8003d70:	20000020 	.word	0x20000020

08003d74 <cleanup_stdio>:
 8003d74:	6841      	ldr	r1, [r0, #4]
 8003d76:	4b0c      	ldr	r3, [pc, #48]	@ (8003da8 <cleanup_stdio+0x34>)
 8003d78:	b510      	push	{r4, lr}
 8003d7a:	4299      	cmp	r1, r3
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	d001      	beq.n	8003d84 <cleanup_stdio+0x10>
 8003d80:	f000 ff54 	bl	8004c2c <_fflush_r>
 8003d84:	68a1      	ldr	r1, [r4, #8]
 8003d86:	4b09      	ldr	r3, [pc, #36]	@ (8003dac <cleanup_stdio+0x38>)
 8003d88:	4299      	cmp	r1, r3
 8003d8a:	d002      	beq.n	8003d92 <cleanup_stdio+0x1e>
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f000 ff4d 	bl	8004c2c <_fflush_r>
 8003d92:	68e1      	ldr	r1, [r4, #12]
 8003d94:	4b06      	ldr	r3, [pc, #24]	@ (8003db0 <cleanup_stdio+0x3c>)
 8003d96:	4299      	cmp	r1, r3
 8003d98:	d004      	beq.n	8003da4 <cleanup_stdio+0x30>
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003da0:	f000 bf44 	b.w	8004c2c <_fflush_r>
 8003da4:	bd10      	pop	{r4, pc}
 8003da6:	bf00      	nop
 8003da8:	20000144 	.word	0x20000144
 8003dac:	200001ac 	.word	0x200001ac
 8003db0:	20000214 	.word	0x20000214

08003db4 <global_stdio_init.part.0>:
 8003db4:	b510      	push	{r4, lr}
 8003db6:	4b0b      	ldr	r3, [pc, #44]	@ (8003de4 <global_stdio_init.part.0+0x30>)
 8003db8:	4c0b      	ldr	r4, [pc, #44]	@ (8003de8 <global_stdio_init.part.0+0x34>)
 8003dba:	4a0c      	ldr	r2, [pc, #48]	@ (8003dec <global_stdio_init.part.0+0x38>)
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	2104      	movs	r1, #4
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f7ff ff94 	bl	8003cf0 <std>
 8003dc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003dcc:	2201      	movs	r2, #1
 8003dce:	2109      	movs	r1, #9
 8003dd0:	f7ff ff8e 	bl	8003cf0 <std>
 8003dd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003dd8:	2202      	movs	r2, #2
 8003dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dde:	2112      	movs	r1, #18
 8003de0:	f7ff bf86 	b.w	8003cf0 <std>
 8003de4:	2000027c 	.word	0x2000027c
 8003de8:	20000144 	.word	0x20000144
 8003dec:	08003d5d 	.word	0x08003d5d

08003df0 <__sfp_lock_acquire>:
 8003df0:	4801      	ldr	r0, [pc, #4]	@ (8003df8 <__sfp_lock_acquire+0x8>)
 8003df2:	f000 b95c 	b.w	80040ae <__retarget_lock_acquire_recursive>
 8003df6:	bf00      	nop
 8003df8:	20000285 	.word	0x20000285

08003dfc <__sfp_lock_release>:
 8003dfc:	4801      	ldr	r0, [pc, #4]	@ (8003e04 <__sfp_lock_release+0x8>)
 8003dfe:	f000 b957 	b.w	80040b0 <__retarget_lock_release_recursive>
 8003e02:	bf00      	nop
 8003e04:	20000285 	.word	0x20000285

08003e08 <__sinit>:
 8003e08:	b510      	push	{r4, lr}
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	f7ff fff0 	bl	8003df0 <__sfp_lock_acquire>
 8003e10:	6a23      	ldr	r3, [r4, #32]
 8003e12:	b11b      	cbz	r3, 8003e1c <__sinit+0x14>
 8003e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e18:	f7ff bff0 	b.w	8003dfc <__sfp_lock_release>
 8003e1c:	4b04      	ldr	r3, [pc, #16]	@ (8003e30 <__sinit+0x28>)
 8003e1e:	6223      	str	r3, [r4, #32]
 8003e20:	4b04      	ldr	r3, [pc, #16]	@ (8003e34 <__sinit+0x2c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f5      	bne.n	8003e14 <__sinit+0xc>
 8003e28:	f7ff ffc4 	bl	8003db4 <global_stdio_init.part.0>
 8003e2c:	e7f2      	b.n	8003e14 <__sinit+0xc>
 8003e2e:	bf00      	nop
 8003e30:	08003d75 	.word	0x08003d75
 8003e34:	2000027c 	.word	0x2000027c

08003e38 <fiprintf>:
 8003e38:	b40e      	push	{r1, r2, r3}
 8003e3a:	b503      	push	{r0, r1, lr}
 8003e3c:	4601      	mov	r1, r0
 8003e3e:	ab03      	add	r3, sp, #12
 8003e40:	4805      	ldr	r0, [pc, #20]	@ (8003e58 <fiprintf+0x20>)
 8003e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e46:	6800      	ldr	r0, [r0, #0]
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	f000 fbc5 	bl	80045d8 <_vfiprintf_r>
 8003e4e:	b002      	add	sp, #8
 8003e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e54:	b003      	add	sp, #12
 8003e56:	4770      	bx	lr
 8003e58:	2000001c 	.word	0x2000001c

08003e5c <_fwalk_sglue>:
 8003e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e60:	4607      	mov	r7, r0
 8003e62:	4688      	mov	r8, r1
 8003e64:	4614      	mov	r4, r2
 8003e66:	2600      	movs	r6, #0
 8003e68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e6c:	f1b9 0901 	subs.w	r9, r9, #1
 8003e70:	d505      	bpl.n	8003e7e <_fwalk_sglue+0x22>
 8003e72:	6824      	ldr	r4, [r4, #0]
 8003e74:	2c00      	cmp	r4, #0
 8003e76:	d1f7      	bne.n	8003e68 <_fwalk_sglue+0xc>
 8003e78:	4630      	mov	r0, r6
 8003e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e7e:	89ab      	ldrh	r3, [r5, #12]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d907      	bls.n	8003e94 <_fwalk_sglue+0x38>
 8003e84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	d003      	beq.n	8003e94 <_fwalk_sglue+0x38>
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	4638      	mov	r0, r7
 8003e90:	47c0      	blx	r8
 8003e92:	4306      	orrs	r6, r0
 8003e94:	3568      	adds	r5, #104	@ 0x68
 8003e96:	e7e9      	b.n	8003e6c <_fwalk_sglue+0x10>

08003e98 <siprintf>:
 8003e98:	b40e      	push	{r1, r2, r3}
 8003e9a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e9e:	b500      	push	{lr}
 8003ea0:	b09c      	sub	sp, #112	@ 0x70
 8003ea2:	ab1d      	add	r3, sp, #116	@ 0x74
 8003ea4:	9002      	str	r0, [sp, #8]
 8003ea6:	9006      	str	r0, [sp, #24]
 8003ea8:	9107      	str	r1, [sp, #28]
 8003eaa:	9104      	str	r1, [sp, #16]
 8003eac:	4808      	ldr	r0, [pc, #32]	@ (8003ed0 <siprintf+0x38>)
 8003eae:	4909      	ldr	r1, [pc, #36]	@ (8003ed4 <siprintf+0x3c>)
 8003eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eb4:	9105      	str	r1, [sp, #20]
 8003eb6:	6800      	ldr	r0, [r0, #0]
 8003eb8:	a902      	add	r1, sp, #8
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	f000 fa68 	bl	8004390 <_svfiprintf_r>
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	9b02      	ldr	r3, [sp, #8]
 8003ec4:	701a      	strb	r2, [r3, #0]
 8003ec6:	b01c      	add	sp, #112	@ 0x70
 8003ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ecc:	b003      	add	sp, #12
 8003ece:	4770      	bx	lr
 8003ed0:	2000001c 	.word	0x2000001c
 8003ed4:	ffff0208 	.word	0xffff0208

08003ed8 <__sread>:
 8003ed8:	b510      	push	{r4, lr}
 8003eda:	460c      	mov	r4, r1
 8003edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee0:	f000 f896 	bl	8004010 <_read_r>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	bfab      	itete	ge
 8003ee8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003eea:	89a3      	ldrhlt	r3, [r4, #12]
 8003eec:	181b      	addge	r3, r3, r0
 8003eee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003ef2:	bfac      	ite	ge
 8003ef4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003ef6:	81a3      	strhlt	r3, [r4, #12]
 8003ef8:	bd10      	pop	{r4, pc}

08003efa <__swrite>:
 8003efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003efe:	461f      	mov	r7, r3
 8003f00:	898b      	ldrh	r3, [r1, #12]
 8003f02:	4605      	mov	r5, r0
 8003f04:	05db      	lsls	r3, r3, #23
 8003f06:	460c      	mov	r4, r1
 8003f08:	4616      	mov	r6, r2
 8003f0a:	d505      	bpl.n	8003f18 <__swrite+0x1e>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f14:	f000 f86a 	bl	8003fec <_lseek_r>
 8003f18:	89a3      	ldrh	r3, [r4, #12]
 8003f1a:	4632      	mov	r2, r6
 8003f1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f20:	81a3      	strh	r3, [r4, #12]
 8003f22:	4628      	mov	r0, r5
 8003f24:	463b      	mov	r3, r7
 8003f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2e:	f000 b881 	b.w	8004034 <_write_r>

08003f32 <__sseek>:
 8003f32:	b510      	push	{r4, lr}
 8003f34:	460c      	mov	r4, r1
 8003f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f3a:	f000 f857 	bl	8003fec <_lseek_r>
 8003f3e:	1c43      	adds	r3, r0, #1
 8003f40:	89a3      	ldrh	r3, [r4, #12]
 8003f42:	bf15      	itete	ne
 8003f44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f4e:	81a3      	strheq	r3, [r4, #12]
 8003f50:	bf18      	it	ne
 8003f52:	81a3      	strhne	r3, [r4, #12]
 8003f54:	bd10      	pop	{r4, pc}

08003f56 <__sclose>:
 8003f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5a:	f000 b825 	b.w	8003fa8 <_close_r>

08003f5e <memset>:
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4402      	add	r2, r0
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d100      	bne.n	8003f68 <memset+0xa>
 8003f66:	4770      	bx	lr
 8003f68:	f803 1b01 	strb.w	r1, [r3], #1
 8003f6c:	e7f9      	b.n	8003f62 <memset+0x4>
	...

08003f70 <time>:
 8003f70:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8003f72:	f04f 36ff 	mov.w	r6, #4294967295
 8003f76:	f04f 37ff 	mov.w	r7, #4294967295
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa4 <time+0x34>)
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	2200      	movs	r2, #0
 8003f80:	4669      	mov	r1, sp
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	e9cd 6700 	strd	r6, r7, [sp]
 8003f88:	f000 f81e 	bl	8003fc8 <_gettimeofday_r>
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	da01      	bge.n	8003f94 <time+0x24>
 8003f90:	e9cd 6700 	strd	r6, r7, [sp]
 8003f94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f98:	b10c      	cbz	r4, 8003f9e <time+0x2e>
 8003f9a:	e9c4 0100 	strd	r0, r1, [r4]
 8003f9e:	b004      	add	sp, #16
 8003fa0:	bdd0      	pop	{r4, r6, r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	2000001c 	.word	0x2000001c

08003fa8 <_close_r>:
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	2300      	movs	r3, #0
 8003fac:	4d05      	ldr	r5, [pc, #20]	@ (8003fc4 <_close_r+0x1c>)
 8003fae:	4604      	mov	r4, r0
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	602b      	str	r3, [r5, #0]
 8003fb4:	f7fc fc7d 	bl	80008b2 <_close>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d102      	bne.n	8003fc2 <_close_r+0x1a>
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	b103      	cbz	r3, 8003fc2 <_close_r+0x1a>
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	20000280 	.word	0x20000280

08003fc8 <_gettimeofday_r>:
 8003fc8:	b538      	push	{r3, r4, r5, lr}
 8003fca:	2300      	movs	r3, #0
 8003fcc:	4d06      	ldr	r5, [pc, #24]	@ (8003fe8 <_gettimeofday_r+0x20>)
 8003fce:	4604      	mov	r4, r0
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	602b      	str	r3, [r5, #0]
 8003fd6:	f001 f81b 	bl	8005010 <_gettimeofday>
 8003fda:	1c43      	adds	r3, r0, #1
 8003fdc:	d102      	bne.n	8003fe4 <_gettimeofday_r+0x1c>
 8003fde:	682b      	ldr	r3, [r5, #0]
 8003fe0:	b103      	cbz	r3, 8003fe4 <_gettimeofday_r+0x1c>
 8003fe2:	6023      	str	r3, [r4, #0]
 8003fe4:	bd38      	pop	{r3, r4, r5, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000280 	.word	0x20000280

08003fec <_lseek_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4604      	mov	r4, r0
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	4d05      	ldr	r5, [pc, #20]	@ (800400c <_lseek_r+0x20>)
 8003ff8:	602a      	str	r2, [r5, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f7fc fc7d 	bl	80008fa <_lseek>
 8004000:	1c43      	adds	r3, r0, #1
 8004002:	d102      	bne.n	800400a <_lseek_r+0x1e>
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	b103      	cbz	r3, 800400a <_lseek_r+0x1e>
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	bd38      	pop	{r3, r4, r5, pc}
 800400c:	20000280 	.word	0x20000280

08004010 <_read_r>:
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	4604      	mov	r4, r0
 8004014:	4608      	mov	r0, r1
 8004016:	4611      	mov	r1, r2
 8004018:	2200      	movs	r2, #0
 800401a:	4d05      	ldr	r5, [pc, #20]	@ (8004030 <_read_r+0x20>)
 800401c:	602a      	str	r2, [r5, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	f7fc fc0e 	bl	8000840 <_read>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	d102      	bne.n	800402e <_read_r+0x1e>
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	b103      	cbz	r3, 800402e <_read_r+0x1e>
 800402c:	6023      	str	r3, [r4, #0]
 800402e:	bd38      	pop	{r3, r4, r5, pc}
 8004030:	20000280 	.word	0x20000280

08004034 <_write_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	4604      	mov	r4, r0
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	2200      	movs	r2, #0
 800403e:	4d05      	ldr	r5, [pc, #20]	@ (8004054 <_write_r+0x20>)
 8004040:	602a      	str	r2, [r5, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	f7fc fc19 	bl	800087a <_write>
 8004048:	1c43      	adds	r3, r0, #1
 800404a:	d102      	bne.n	8004052 <_write_r+0x1e>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	b103      	cbz	r3, 8004052 <_write_r+0x1e>
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	bd38      	pop	{r3, r4, r5, pc}
 8004054:	20000280 	.word	0x20000280

08004058 <__errno>:
 8004058:	4b01      	ldr	r3, [pc, #4]	@ (8004060 <__errno+0x8>)
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	2000001c 	.word	0x2000001c

08004064 <__libc_init_array>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	2600      	movs	r6, #0
 8004068:	4d0c      	ldr	r5, [pc, #48]	@ (800409c <__libc_init_array+0x38>)
 800406a:	4c0d      	ldr	r4, [pc, #52]	@ (80040a0 <__libc_init_array+0x3c>)
 800406c:	1b64      	subs	r4, r4, r5
 800406e:	10a4      	asrs	r4, r4, #2
 8004070:	42a6      	cmp	r6, r4
 8004072:	d109      	bne.n	8004088 <__libc_init_array+0x24>
 8004074:	f000 ffd4 	bl	8005020 <_init>
 8004078:	2600      	movs	r6, #0
 800407a:	4d0a      	ldr	r5, [pc, #40]	@ (80040a4 <__libc_init_array+0x40>)
 800407c:	4c0a      	ldr	r4, [pc, #40]	@ (80040a8 <__libc_init_array+0x44>)
 800407e:	1b64      	subs	r4, r4, r5
 8004080:	10a4      	asrs	r4, r4, #2
 8004082:	42a6      	cmp	r6, r4
 8004084:	d105      	bne.n	8004092 <__libc_init_array+0x2e>
 8004086:	bd70      	pop	{r4, r5, r6, pc}
 8004088:	f855 3b04 	ldr.w	r3, [r5], #4
 800408c:	4798      	blx	r3
 800408e:	3601      	adds	r6, #1
 8004090:	e7ee      	b.n	8004070 <__libc_init_array+0xc>
 8004092:	f855 3b04 	ldr.w	r3, [r5], #4
 8004096:	4798      	blx	r3
 8004098:	3601      	adds	r6, #1
 800409a:	e7f2      	b.n	8004082 <__libc_init_array+0x1e>
 800409c:	08005234 	.word	0x08005234
 80040a0:	08005234 	.word	0x08005234
 80040a4:	08005234 	.word	0x08005234
 80040a8:	08005238 	.word	0x08005238

080040ac <__retarget_lock_init_recursive>:
 80040ac:	4770      	bx	lr

080040ae <__retarget_lock_acquire_recursive>:
 80040ae:	4770      	bx	lr

080040b0 <__retarget_lock_release_recursive>:
 80040b0:	4770      	bx	lr

080040b2 <memcpy>:
 80040b2:	440a      	add	r2, r1
 80040b4:	4291      	cmp	r1, r2
 80040b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80040ba:	d100      	bne.n	80040be <memcpy+0xc>
 80040bc:	4770      	bx	lr
 80040be:	b510      	push	{r4, lr}
 80040c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040c4:	4291      	cmp	r1, r2
 80040c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040ca:	d1f9      	bne.n	80040c0 <memcpy+0xe>
 80040cc:	bd10      	pop	{r4, pc}

080040ce <abort>:
 80040ce:	2006      	movs	r0, #6
 80040d0:	b508      	push	{r3, lr}
 80040d2:	f000 fea9 	bl	8004e28 <raise>
 80040d6:	2001      	movs	r0, #1
 80040d8:	f7fc fba7 	bl	800082a <_exit>

080040dc <_free_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4605      	mov	r5, r0
 80040e0:	2900      	cmp	r1, #0
 80040e2:	d040      	beq.n	8004166 <_free_r+0x8a>
 80040e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040e8:	1f0c      	subs	r4, r1, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bfb8      	it	lt
 80040ee:	18e4      	addlt	r4, r4, r3
 80040f0:	f000 f8e6 	bl	80042c0 <__malloc_lock>
 80040f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004168 <_free_r+0x8c>)
 80040f6:	6813      	ldr	r3, [r2, #0]
 80040f8:	b933      	cbnz	r3, 8004108 <_free_r+0x2c>
 80040fa:	6063      	str	r3, [r4, #4]
 80040fc:	6014      	str	r4, [r2, #0]
 80040fe:	4628      	mov	r0, r5
 8004100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004104:	f000 b8e2 	b.w	80042cc <__malloc_unlock>
 8004108:	42a3      	cmp	r3, r4
 800410a:	d908      	bls.n	800411e <_free_r+0x42>
 800410c:	6820      	ldr	r0, [r4, #0]
 800410e:	1821      	adds	r1, r4, r0
 8004110:	428b      	cmp	r3, r1
 8004112:	bf01      	itttt	eq
 8004114:	6819      	ldreq	r1, [r3, #0]
 8004116:	685b      	ldreq	r3, [r3, #4]
 8004118:	1809      	addeq	r1, r1, r0
 800411a:	6021      	streq	r1, [r4, #0]
 800411c:	e7ed      	b.n	80040fa <_free_r+0x1e>
 800411e:	461a      	mov	r2, r3
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	b10b      	cbz	r3, 8004128 <_free_r+0x4c>
 8004124:	42a3      	cmp	r3, r4
 8004126:	d9fa      	bls.n	800411e <_free_r+0x42>
 8004128:	6811      	ldr	r1, [r2, #0]
 800412a:	1850      	adds	r0, r2, r1
 800412c:	42a0      	cmp	r0, r4
 800412e:	d10b      	bne.n	8004148 <_free_r+0x6c>
 8004130:	6820      	ldr	r0, [r4, #0]
 8004132:	4401      	add	r1, r0
 8004134:	1850      	adds	r0, r2, r1
 8004136:	4283      	cmp	r3, r0
 8004138:	6011      	str	r1, [r2, #0]
 800413a:	d1e0      	bne.n	80040fe <_free_r+0x22>
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	4408      	add	r0, r1
 8004142:	6010      	str	r0, [r2, #0]
 8004144:	6053      	str	r3, [r2, #4]
 8004146:	e7da      	b.n	80040fe <_free_r+0x22>
 8004148:	d902      	bls.n	8004150 <_free_r+0x74>
 800414a:	230c      	movs	r3, #12
 800414c:	602b      	str	r3, [r5, #0]
 800414e:	e7d6      	b.n	80040fe <_free_r+0x22>
 8004150:	6820      	ldr	r0, [r4, #0]
 8004152:	1821      	adds	r1, r4, r0
 8004154:	428b      	cmp	r3, r1
 8004156:	bf01      	itttt	eq
 8004158:	6819      	ldreq	r1, [r3, #0]
 800415a:	685b      	ldreq	r3, [r3, #4]
 800415c:	1809      	addeq	r1, r1, r0
 800415e:	6021      	streq	r1, [r4, #0]
 8004160:	6063      	str	r3, [r4, #4]
 8004162:	6054      	str	r4, [r2, #4]
 8004164:	e7cb      	b.n	80040fe <_free_r+0x22>
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	2000028c 	.word	0x2000028c

0800416c <malloc>:
 800416c:	4b02      	ldr	r3, [pc, #8]	@ (8004178 <malloc+0xc>)
 800416e:	4601      	mov	r1, r0
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	f000 b825 	b.w	80041c0 <_malloc_r>
 8004176:	bf00      	nop
 8004178:	2000001c 	.word	0x2000001c

0800417c <sbrk_aligned>:
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	4e0f      	ldr	r6, [pc, #60]	@ (80041bc <sbrk_aligned+0x40>)
 8004180:	460c      	mov	r4, r1
 8004182:	6831      	ldr	r1, [r6, #0]
 8004184:	4605      	mov	r5, r0
 8004186:	b911      	cbnz	r1, 800418e <sbrk_aligned+0x12>
 8004188:	f000 fe6a 	bl	8004e60 <_sbrk_r>
 800418c:	6030      	str	r0, [r6, #0]
 800418e:	4621      	mov	r1, r4
 8004190:	4628      	mov	r0, r5
 8004192:	f000 fe65 	bl	8004e60 <_sbrk_r>
 8004196:	1c43      	adds	r3, r0, #1
 8004198:	d103      	bne.n	80041a2 <sbrk_aligned+0x26>
 800419a:	f04f 34ff 	mov.w	r4, #4294967295
 800419e:	4620      	mov	r0, r4
 80041a0:	bd70      	pop	{r4, r5, r6, pc}
 80041a2:	1cc4      	adds	r4, r0, #3
 80041a4:	f024 0403 	bic.w	r4, r4, #3
 80041a8:	42a0      	cmp	r0, r4
 80041aa:	d0f8      	beq.n	800419e <sbrk_aligned+0x22>
 80041ac:	1a21      	subs	r1, r4, r0
 80041ae:	4628      	mov	r0, r5
 80041b0:	f000 fe56 	bl	8004e60 <_sbrk_r>
 80041b4:	3001      	adds	r0, #1
 80041b6:	d1f2      	bne.n	800419e <sbrk_aligned+0x22>
 80041b8:	e7ef      	b.n	800419a <sbrk_aligned+0x1e>
 80041ba:	bf00      	nop
 80041bc:	20000288 	.word	0x20000288

080041c0 <_malloc_r>:
 80041c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041c4:	1ccd      	adds	r5, r1, #3
 80041c6:	f025 0503 	bic.w	r5, r5, #3
 80041ca:	3508      	adds	r5, #8
 80041cc:	2d0c      	cmp	r5, #12
 80041ce:	bf38      	it	cc
 80041d0:	250c      	movcc	r5, #12
 80041d2:	2d00      	cmp	r5, #0
 80041d4:	4606      	mov	r6, r0
 80041d6:	db01      	blt.n	80041dc <_malloc_r+0x1c>
 80041d8:	42a9      	cmp	r1, r5
 80041da:	d904      	bls.n	80041e6 <_malloc_r+0x26>
 80041dc:	230c      	movs	r3, #12
 80041de:	6033      	str	r3, [r6, #0]
 80041e0:	2000      	movs	r0, #0
 80041e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042bc <_malloc_r+0xfc>
 80041ea:	f000 f869 	bl	80042c0 <__malloc_lock>
 80041ee:	f8d8 3000 	ldr.w	r3, [r8]
 80041f2:	461c      	mov	r4, r3
 80041f4:	bb44      	cbnz	r4, 8004248 <_malloc_r+0x88>
 80041f6:	4629      	mov	r1, r5
 80041f8:	4630      	mov	r0, r6
 80041fa:	f7ff ffbf 	bl	800417c <sbrk_aligned>
 80041fe:	1c43      	adds	r3, r0, #1
 8004200:	4604      	mov	r4, r0
 8004202:	d158      	bne.n	80042b6 <_malloc_r+0xf6>
 8004204:	f8d8 4000 	ldr.w	r4, [r8]
 8004208:	4627      	mov	r7, r4
 800420a:	2f00      	cmp	r7, #0
 800420c:	d143      	bne.n	8004296 <_malloc_r+0xd6>
 800420e:	2c00      	cmp	r4, #0
 8004210:	d04b      	beq.n	80042aa <_malloc_r+0xea>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	4639      	mov	r1, r7
 8004216:	4630      	mov	r0, r6
 8004218:	eb04 0903 	add.w	r9, r4, r3
 800421c:	f000 fe20 	bl	8004e60 <_sbrk_r>
 8004220:	4581      	cmp	r9, r0
 8004222:	d142      	bne.n	80042aa <_malloc_r+0xea>
 8004224:	6821      	ldr	r1, [r4, #0]
 8004226:	4630      	mov	r0, r6
 8004228:	1a6d      	subs	r5, r5, r1
 800422a:	4629      	mov	r1, r5
 800422c:	f7ff ffa6 	bl	800417c <sbrk_aligned>
 8004230:	3001      	adds	r0, #1
 8004232:	d03a      	beq.n	80042aa <_malloc_r+0xea>
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	442b      	add	r3, r5
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	f8d8 3000 	ldr.w	r3, [r8]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	bb62      	cbnz	r2, 800429c <_malloc_r+0xdc>
 8004242:	f8c8 7000 	str.w	r7, [r8]
 8004246:	e00f      	b.n	8004268 <_malloc_r+0xa8>
 8004248:	6822      	ldr	r2, [r4, #0]
 800424a:	1b52      	subs	r2, r2, r5
 800424c:	d420      	bmi.n	8004290 <_malloc_r+0xd0>
 800424e:	2a0b      	cmp	r2, #11
 8004250:	d917      	bls.n	8004282 <_malloc_r+0xc2>
 8004252:	1961      	adds	r1, r4, r5
 8004254:	42a3      	cmp	r3, r4
 8004256:	6025      	str	r5, [r4, #0]
 8004258:	bf18      	it	ne
 800425a:	6059      	strne	r1, [r3, #4]
 800425c:	6863      	ldr	r3, [r4, #4]
 800425e:	bf08      	it	eq
 8004260:	f8c8 1000 	streq.w	r1, [r8]
 8004264:	5162      	str	r2, [r4, r5]
 8004266:	604b      	str	r3, [r1, #4]
 8004268:	4630      	mov	r0, r6
 800426a:	f000 f82f 	bl	80042cc <__malloc_unlock>
 800426e:	f104 000b 	add.w	r0, r4, #11
 8004272:	1d23      	adds	r3, r4, #4
 8004274:	f020 0007 	bic.w	r0, r0, #7
 8004278:	1ac2      	subs	r2, r0, r3
 800427a:	bf1c      	itt	ne
 800427c:	1a1b      	subne	r3, r3, r0
 800427e:	50a3      	strne	r3, [r4, r2]
 8004280:	e7af      	b.n	80041e2 <_malloc_r+0x22>
 8004282:	6862      	ldr	r2, [r4, #4]
 8004284:	42a3      	cmp	r3, r4
 8004286:	bf0c      	ite	eq
 8004288:	f8c8 2000 	streq.w	r2, [r8]
 800428c:	605a      	strne	r2, [r3, #4]
 800428e:	e7eb      	b.n	8004268 <_malloc_r+0xa8>
 8004290:	4623      	mov	r3, r4
 8004292:	6864      	ldr	r4, [r4, #4]
 8004294:	e7ae      	b.n	80041f4 <_malloc_r+0x34>
 8004296:	463c      	mov	r4, r7
 8004298:	687f      	ldr	r7, [r7, #4]
 800429a:	e7b6      	b.n	800420a <_malloc_r+0x4a>
 800429c:	461a      	mov	r2, r3
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	42a3      	cmp	r3, r4
 80042a2:	d1fb      	bne.n	800429c <_malloc_r+0xdc>
 80042a4:	2300      	movs	r3, #0
 80042a6:	6053      	str	r3, [r2, #4]
 80042a8:	e7de      	b.n	8004268 <_malloc_r+0xa8>
 80042aa:	230c      	movs	r3, #12
 80042ac:	4630      	mov	r0, r6
 80042ae:	6033      	str	r3, [r6, #0]
 80042b0:	f000 f80c 	bl	80042cc <__malloc_unlock>
 80042b4:	e794      	b.n	80041e0 <_malloc_r+0x20>
 80042b6:	6005      	str	r5, [r0, #0]
 80042b8:	e7d6      	b.n	8004268 <_malloc_r+0xa8>
 80042ba:	bf00      	nop
 80042bc:	2000028c 	.word	0x2000028c

080042c0 <__malloc_lock>:
 80042c0:	4801      	ldr	r0, [pc, #4]	@ (80042c8 <__malloc_lock+0x8>)
 80042c2:	f7ff bef4 	b.w	80040ae <__retarget_lock_acquire_recursive>
 80042c6:	bf00      	nop
 80042c8:	20000284 	.word	0x20000284

080042cc <__malloc_unlock>:
 80042cc:	4801      	ldr	r0, [pc, #4]	@ (80042d4 <__malloc_unlock+0x8>)
 80042ce:	f7ff beef 	b.w	80040b0 <__retarget_lock_release_recursive>
 80042d2:	bf00      	nop
 80042d4:	20000284 	.word	0x20000284

080042d8 <__ssputs_r>:
 80042d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042dc:	461f      	mov	r7, r3
 80042de:	688e      	ldr	r6, [r1, #8]
 80042e0:	4682      	mov	sl, r0
 80042e2:	42be      	cmp	r6, r7
 80042e4:	460c      	mov	r4, r1
 80042e6:	4690      	mov	r8, r2
 80042e8:	680b      	ldr	r3, [r1, #0]
 80042ea:	d82d      	bhi.n	8004348 <__ssputs_r+0x70>
 80042ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042f4:	d026      	beq.n	8004344 <__ssputs_r+0x6c>
 80042f6:	6965      	ldr	r5, [r4, #20]
 80042f8:	6909      	ldr	r1, [r1, #16]
 80042fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042fe:	eba3 0901 	sub.w	r9, r3, r1
 8004302:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004306:	1c7b      	adds	r3, r7, #1
 8004308:	444b      	add	r3, r9
 800430a:	106d      	asrs	r5, r5, #1
 800430c:	429d      	cmp	r5, r3
 800430e:	bf38      	it	cc
 8004310:	461d      	movcc	r5, r3
 8004312:	0553      	lsls	r3, r2, #21
 8004314:	d527      	bpl.n	8004366 <__ssputs_r+0x8e>
 8004316:	4629      	mov	r1, r5
 8004318:	f7ff ff52 	bl	80041c0 <_malloc_r>
 800431c:	4606      	mov	r6, r0
 800431e:	b360      	cbz	r0, 800437a <__ssputs_r+0xa2>
 8004320:	464a      	mov	r2, r9
 8004322:	6921      	ldr	r1, [r4, #16]
 8004324:	f7ff fec5 	bl	80040b2 <memcpy>
 8004328:	89a3      	ldrh	r3, [r4, #12]
 800432a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800432e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004332:	81a3      	strh	r3, [r4, #12]
 8004334:	6126      	str	r6, [r4, #16]
 8004336:	444e      	add	r6, r9
 8004338:	6026      	str	r6, [r4, #0]
 800433a:	463e      	mov	r6, r7
 800433c:	6165      	str	r5, [r4, #20]
 800433e:	eba5 0509 	sub.w	r5, r5, r9
 8004342:	60a5      	str	r5, [r4, #8]
 8004344:	42be      	cmp	r6, r7
 8004346:	d900      	bls.n	800434a <__ssputs_r+0x72>
 8004348:	463e      	mov	r6, r7
 800434a:	4632      	mov	r2, r6
 800434c:	4641      	mov	r1, r8
 800434e:	6820      	ldr	r0, [r4, #0]
 8004350:	f000 fd28 	bl	8004da4 <memmove>
 8004354:	2000      	movs	r0, #0
 8004356:	68a3      	ldr	r3, [r4, #8]
 8004358:	1b9b      	subs	r3, r3, r6
 800435a:	60a3      	str	r3, [r4, #8]
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	4433      	add	r3, r6
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004366:	462a      	mov	r2, r5
 8004368:	f000 fd98 	bl	8004e9c <_realloc_r>
 800436c:	4606      	mov	r6, r0
 800436e:	2800      	cmp	r0, #0
 8004370:	d1e0      	bne.n	8004334 <__ssputs_r+0x5c>
 8004372:	4650      	mov	r0, sl
 8004374:	6921      	ldr	r1, [r4, #16]
 8004376:	f7ff feb1 	bl	80040dc <_free_r>
 800437a:	230c      	movs	r3, #12
 800437c:	f8ca 3000 	str.w	r3, [sl]
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	f04f 30ff 	mov.w	r0, #4294967295
 8004386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800438a:	81a3      	strh	r3, [r4, #12]
 800438c:	e7e9      	b.n	8004362 <__ssputs_r+0x8a>
	...

08004390 <_svfiprintf_r>:
 8004390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004394:	4698      	mov	r8, r3
 8004396:	898b      	ldrh	r3, [r1, #12]
 8004398:	4607      	mov	r7, r0
 800439a:	061b      	lsls	r3, r3, #24
 800439c:	460d      	mov	r5, r1
 800439e:	4614      	mov	r4, r2
 80043a0:	b09d      	sub	sp, #116	@ 0x74
 80043a2:	d510      	bpl.n	80043c6 <_svfiprintf_r+0x36>
 80043a4:	690b      	ldr	r3, [r1, #16]
 80043a6:	b973      	cbnz	r3, 80043c6 <_svfiprintf_r+0x36>
 80043a8:	2140      	movs	r1, #64	@ 0x40
 80043aa:	f7ff ff09 	bl	80041c0 <_malloc_r>
 80043ae:	6028      	str	r0, [r5, #0]
 80043b0:	6128      	str	r0, [r5, #16]
 80043b2:	b930      	cbnz	r0, 80043c2 <_svfiprintf_r+0x32>
 80043b4:	230c      	movs	r3, #12
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	f04f 30ff 	mov.w	r0, #4294967295
 80043bc:	b01d      	add	sp, #116	@ 0x74
 80043be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043c2:	2340      	movs	r3, #64	@ 0x40
 80043c4:	616b      	str	r3, [r5, #20]
 80043c6:	2300      	movs	r3, #0
 80043c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80043ca:	2320      	movs	r3, #32
 80043cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043d0:	2330      	movs	r3, #48	@ 0x30
 80043d2:	f04f 0901 	mov.w	r9, #1
 80043d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80043da:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004574 <_svfiprintf_r+0x1e4>
 80043de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043e2:	4623      	mov	r3, r4
 80043e4:	469a      	mov	sl, r3
 80043e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043ea:	b10a      	cbz	r2, 80043f0 <_svfiprintf_r+0x60>
 80043ec:	2a25      	cmp	r2, #37	@ 0x25
 80043ee:	d1f9      	bne.n	80043e4 <_svfiprintf_r+0x54>
 80043f0:	ebba 0b04 	subs.w	fp, sl, r4
 80043f4:	d00b      	beq.n	800440e <_svfiprintf_r+0x7e>
 80043f6:	465b      	mov	r3, fp
 80043f8:	4622      	mov	r2, r4
 80043fa:	4629      	mov	r1, r5
 80043fc:	4638      	mov	r0, r7
 80043fe:	f7ff ff6b 	bl	80042d8 <__ssputs_r>
 8004402:	3001      	adds	r0, #1
 8004404:	f000 80a7 	beq.w	8004556 <_svfiprintf_r+0x1c6>
 8004408:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800440a:	445a      	add	r2, fp
 800440c:	9209      	str	r2, [sp, #36]	@ 0x24
 800440e:	f89a 3000 	ldrb.w	r3, [sl]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 809f 	beq.w	8004556 <_svfiprintf_r+0x1c6>
 8004418:	2300      	movs	r3, #0
 800441a:	f04f 32ff 	mov.w	r2, #4294967295
 800441e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004422:	f10a 0a01 	add.w	sl, sl, #1
 8004426:	9304      	str	r3, [sp, #16]
 8004428:	9307      	str	r3, [sp, #28]
 800442a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800442e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004430:	4654      	mov	r4, sl
 8004432:	2205      	movs	r2, #5
 8004434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004438:	484e      	ldr	r0, [pc, #312]	@ (8004574 <_svfiprintf_r+0x1e4>)
 800443a:	f000 fd21 	bl	8004e80 <memchr>
 800443e:	9a04      	ldr	r2, [sp, #16]
 8004440:	b9d8      	cbnz	r0, 800447a <_svfiprintf_r+0xea>
 8004442:	06d0      	lsls	r0, r2, #27
 8004444:	bf44      	itt	mi
 8004446:	2320      	movmi	r3, #32
 8004448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800444c:	0711      	lsls	r1, r2, #28
 800444e:	bf44      	itt	mi
 8004450:	232b      	movmi	r3, #43	@ 0x2b
 8004452:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004456:	f89a 3000 	ldrb.w	r3, [sl]
 800445a:	2b2a      	cmp	r3, #42	@ 0x2a
 800445c:	d015      	beq.n	800448a <_svfiprintf_r+0xfa>
 800445e:	4654      	mov	r4, sl
 8004460:	2000      	movs	r0, #0
 8004462:	f04f 0c0a 	mov.w	ip, #10
 8004466:	9a07      	ldr	r2, [sp, #28]
 8004468:	4621      	mov	r1, r4
 800446a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800446e:	3b30      	subs	r3, #48	@ 0x30
 8004470:	2b09      	cmp	r3, #9
 8004472:	d94b      	bls.n	800450c <_svfiprintf_r+0x17c>
 8004474:	b1b0      	cbz	r0, 80044a4 <_svfiprintf_r+0x114>
 8004476:	9207      	str	r2, [sp, #28]
 8004478:	e014      	b.n	80044a4 <_svfiprintf_r+0x114>
 800447a:	eba0 0308 	sub.w	r3, r0, r8
 800447e:	fa09 f303 	lsl.w	r3, r9, r3
 8004482:	4313      	orrs	r3, r2
 8004484:	46a2      	mov	sl, r4
 8004486:	9304      	str	r3, [sp, #16]
 8004488:	e7d2      	b.n	8004430 <_svfiprintf_r+0xa0>
 800448a:	9b03      	ldr	r3, [sp, #12]
 800448c:	1d19      	adds	r1, r3, #4
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	9103      	str	r1, [sp, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	bfbb      	ittet	lt
 8004496:	425b      	neglt	r3, r3
 8004498:	f042 0202 	orrlt.w	r2, r2, #2
 800449c:	9307      	strge	r3, [sp, #28]
 800449e:	9307      	strlt	r3, [sp, #28]
 80044a0:	bfb8      	it	lt
 80044a2:	9204      	strlt	r2, [sp, #16]
 80044a4:	7823      	ldrb	r3, [r4, #0]
 80044a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80044a8:	d10a      	bne.n	80044c0 <_svfiprintf_r+0x130>
 80044aa:	7863      	ldrb	r3, [r4, #1]
 80044ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80044ae:	d132      	bne.n	8004516 <_svfiprintf_r+0x186>
 80044b0:	9b03      	ldr	r3, [sp, #12]
 80044b2:	3402      	adds	r4, #2
 80044b4:	1d1a      	adds	r2, r3, #4
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	9203      	str	r2, [sp, #12]
 80044ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044be:	9305      	str	r3, [sp, #20]
 80044c0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004578 <_svfiprintf_r+0x1e8>
 80044c4:	2203      	movs	r2, #3
 80044c6:	4650      	mov	r0, sl
 80044c8:	7821      	ldrb	r1, [r4, #0]
 80044ca:	f000 fcd9 	bl	8004e80 <memchr>
 80044ce:	b138      	cbz	r0, 80044e0 <_svfiprintf_r+0x150>
 80044d0:	2240      	movs	r2, #64	@ 0x40
 80044d2:	9b04      	ldr	r3, [sp, #16]
 80044d4:	eba0 000a 	sub.w	r0, r0, sl
 80044d8:	4082      	lsls	r2, r0
 80044da:	4313      	orrs	r3, r2
 80044dc:	3401      	adds	r4, #1
 80044de:	9304      	str	r3, [sp, #16]
 80044e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044e4:	2206      	movs	r2, #6
 80044e6:	4825      	ldr	r0, [pc, #148]	@ (800457c <_svfiprintf_r+0x1ec>)
 80044e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044ec:	f000 fcc8 	bl	8004e80 <memchr>
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d036      	beq.n	8004562 <_svfiprintf_r+0x1d2>
 80044f4:	4b22      	ldr	r3, [pc, #136]	@ (8004580 <_svfiprintf_r+0x1f0>)
 80044f6:	bb1b      	cbnz	r3, 8004540 <_svfiprintf_r+0x1b0>
 80044f8:	9b03      	ldr	r3, [sp, #12]
 80044fa:	3307      	adds	r3, #7
 80044fc:	f023 0307 	bic.w	r3, r3, #7
 8004500:	3308      	adds	r3, #8
 8004502:	9303      	str	r3, [sp, #12]
 8004504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004506:	4433      	add	r3, r6
 8004508:	9309      	str	r3, [sp, #36]	@ 0x24
 800450a:	e76a      	b.n	80043e2 <_svfiprintf_r+0x52>
 800450c:	460c      	mov	r4, r1
 800450e:	2001      	movs	r0, #1
 8004510:	fb0c 3202 	mla	r2, ip, r2, r3
 8004514:	e7a8      	b.n	8004468 <_svfiprintf_r+0xd8>
 8004516:	2300      	movs	r3, #0
 8004518:	f04f 0c0a 	mov.w	ip, #10
 800451c:	4619      	mov	r1, r3
 800451e:	3401      	adds	r4, #1
 8004520:	9305      	str	r3, [sp, #20]
 8004522:	4620      	mov	r0, r4
 8004524:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004528:	3a30      	subs	r2, #48	@ 0x30
 800452a:	2a09      	cmp	r2, #9
 800452c:	d903      	bls.n	8004536 <_svfiprintf_r+0x1a6>
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0c6      	beq.n	80044c0 <_svfiprintf_r+0x130>
 8004532:	9105      	str	r1, [sp, #20]
 8004534:	e7c4      	b.n	80044c0 <_svfiprintf_r+0x130>
 8004536:	4604      	mov	r4, r0
 8004538:	2301      	movs	r3, #1
 800453a:	fb0c 2101 	mla	r1, ip, r1, r2
 800453e:	e7f0      	b.n	8004522 <_svfiprintf_r+0x192>
 8004540:	ab03      	add	r3, sp, #12
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	462a      	mov	r2, r5
 8004546:	4638      	mov	r0, r7
 8004548:	4b0e      	ldr	r3, [pc, #56]	@ (8004584 <_svfiprintf_r+0x1f4>)
 800454a:	a904      	add	r1, sp, #16
 800454c:	f3af 8000 	nop.w
 8004550:	1c42      	adds	r2, r0, #1
 8004552:	4606      	mov	r6, r0
 8004554:	d1d6      	bne.n	8004504 <_svfiprintf_r+0x174>
 8004556:	89ab      	ldrh	r3, [r5, #12]
 8004558:	065b      	lsls	r3, r3, #25
 800455a:	f53f af2d 	bmi.w	80043b8 <_svfiprintf_r+0x28>
 800455e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004560:	e72c      	b.n	80043bc <_svfiprintf_r+0x2c>
 8004562:	ab03      	add	r3, sp, #12
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	462a      	mov	r2, r5
 8004568:	4638      	mov	r0, r7
 800456a:	4b06      	ldr	r3, [pc, #24]	@ (8004584 <_svfiprintf_r+0x1f4>)
 800456c:	a904      	add	r1, sp, #16
 800456e:	f000 f9bd 	bl	80048ec <_printf_i>
 8004572:	e7ed      	b.n	8004550 <_svfiprintf_r+0x1c0>
 8004574:	08005200 	.word	0x08005200
 8004578:	08005206 	.word	0x08005206
 800457c:	0800520a 	.word	0x0800520a
 8004580:	00000000 	.word	0x00000000
 8004584:	080042d9 	.word	0x080042d9

08004588 <__sfputc_r>:
 8004588:	6893      	ldr	r3, [r2, #8]
 800458a:	b410      	push	{r4}
 800458c:	3b01      	subs	r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	6093      	str	r3, [r2, #8]
 8004592:	da07      	bge.n	80045a4 <__sfputc_r+0x1c>
 8004594:	6994      	ldr	r4, [r2, #24]
 8004596:	42a3      	cmp	r3, r4
 8004598:	db01      	blt.n	800459e <__sfputc_r+0x16>
 800459a:	290a      	cmp	r1, #10
 800459c:	d102      	bne.n	80045a4 <__sfputc_r+0x1c>
 800459e:	bc10      	pop	{r4}
 80045a0:	f000 bb6c 	b.w	8004c7c <__swbuf_r>
 80045a4:	6813      	ldr	r3, [r2, #0]
 80045a6:	1c58      	adds	r0, r3, #1
 80045a8:	6010      	str	r0, [r2, #0]
 80045aa:	7019      	strb	r1, [r3, #0]
 80045ac:	4608      	mov	r0, r1
 80045ae:	bc10      	pop	{r4}
 80045b0:	4770      	bx	lr

080045b2 <__sfputs_r>:
 80045b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b4:	4606      	mov	r6, r0
 80045b6:	460f      	mov	r7, r1
 80045b8:	4614      	mov	r4, r2
 80045ba:	18d5      	adds	r5, r2, r3
 80045bc:	42ac      	cmp	r4, r5
 80045be:	d101      	bne.n	80045c4 <__sfputs_r+0x12>
 80045c0:	2000      	movs	r0, #0
 80045c2:	e007      	b.n	80045d4 <__sfputs_r+0x22>
 80045c4:	463a      	mov	r2, r7
 80045c6:	4630      	mov	r0, r6
 80045c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045cc:	f7ff ffdc 	bl	8004588 <__sfputc_r>
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	d1f3      	bne.n	80045bc <__sfputs_r+0xa>
 80045d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045d8 <_vfiprintf_r>:
 80045d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045dc:	460d      	mov	r5, r1
 80045de:	4614      	mov	r4, r2
 80045e0:	4698      	mov	r8, r3
 80045e2:	4606      	mov	r6, r0
 80045e4:	b09d      	sub	sp, #116	@ 0x74
 80045e6:	b118      	cbz	r0, 80045f0 <_vfiprintf_r+0x18>
 80045e8:	6a03      	ldr	r3, [r0, #32]
 80045ea:	b90b      	cbnz	r3, 80045f0 <_vfiprintf_r+0x18>
 80045ec:	f7ff fc0c 	bl	8003e08 <__sinit>
 80045f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045f2:	07d9      	lsls	r1, r3, #31
 80045f4:	d405      	bmi.n	8004602 <_vfiprintf_r+0x2a>
 80045f6:	89ab      	ldrh	r3, [r5, #12]
 80045f8:	059a      	lsls	r2, r3, #22
 80045fa:	d402      	bmi.n	8004602 <_vfiprintf_r+0x2a>
 80045fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045fe:	f7ff fd56 	bl	80040ae <__retarget_lock_acquire_recursive>
 8004602:	89ab      	ldrh	r3, [r5, #12]
 8004604:	071b      	lsls	r3, r3, #28
 8004606:	d501      	bpl.n	800460c <_vfiprintf_r+0x34>
 8004608:	692b      	ldr	r3, [r5, #16]
 800460a:	b99b      	cbnz	r3, 8004634 <_vfiprintf_r+0x5c>
 800460c:	4629      	mov	r1, r5
 800460e:	4630      	mov	r0, r6
 8004610:	f000 fb72 	bl	8004cf8 <__swsetup_r>
 8004614:	b170      	cbz	r0, 8004634 <_vfiprintf_r+0x5c>
 8004616:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004618:	07dc      	lsls	r4, r3, #31
 800461a:	d504      	bpl.n	8004626 <_vfiprintf_r+0x4e>
 800461c:	f04f 30ff 	mov.w	r0, #4294967295
 8004620:	b01d      	add	sp, #116	@ 0x74
 8004622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004626:	89ab      	ldrh	r3, [r5, #12]
 8004628:	0598      	lsls	r0, r3, #22
 800462a:	d4f7      	bmi.n	800461c <_vfiprintf_r+0x44>
 800462c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800462e:	f7ff fd3f 	bl	80040b0 <__retarget_lock_release_recursive>
 8004632:	e7f3      	b.n	800461c <_vfiprintf_r+0x44>
 8004634:	2300      	movs	r3, #0
 8004636:	9309      	str	r3, [sp, #36]	@ 0x24
 8004638:	2320      	movs	r3, #32
 800463a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800463e:	2330      	movs	r3, #48	@ 0x30
 8004640:	f04f 0901 	mov.w	r9, #1
 8004644:	f8cd 800c 	str.w	r8, [sp, #12]
 8004648:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80047f4 <_vfiprintf_r+0x21c>
 800464c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004650:	4623      	mov	r3, r4
 8004652:	469a      	mov	sl, r3
 8004654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004658:	b10a      	cbz	r2, 800465e <_vfiprintf_r+0x86>
 800465a:	2a25      	cmp	r2, #37	@ 0x25
 800465c:	d1f9      	bne.n	8004652 <_vfiprintf_r+0x7a>
 800465e:	ebba 0b04 	subs.w	fp, sl, r4
 8004662:	d00b      	beq.n	800467c <_vfiprintf_r+0xa4>
 8004664:	465b      	mov	r3, fp
 8004666:	4622      	mov	r2, r4
 8004668:	4629      	mov	r1, r5
 800466a:	4630      	mov	r0, r6
 800466c:	f7ff ffa1 	bl	80045b2 <__sfputs_r>
 8004670:	3001      	adds	r0, #1
 8004672:	f000 80a7 	beq.w	80047c4 <_vfiprintf_r+0x1ec>
 8004676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004678:	445a      	add	r2, fp
 800467a:	9209      	str	r2, [sp, #36]	@ 0x24
 800467c:	f89a 3000 	ldrb.w	r3, [sl]
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 809f 	beq.w	80047c4 <_vfiprintf_r+0x1ec>
 8004686:	2300      	movs	r3, #0
 8004688:	f04f 32ff 	mov.w	r2, #4294967295
 800468c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004690:	f10a 0a01 	add.w	sl, sl, #1
 8004694:	9304      	str	r3, [sp, #16]
 8004696:	9307      	str	r3, [sp, #28]
 8004698:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800469c:	931a      	str	r3, [sp, #104]	@ 0x68
 800469e:	4654      	mov	r4, sl
 80046a0:	2205      	movs	r2, #5
 80046a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046a6:	4853      	ldr	r0, [pc, #332]	@ (80047f4 <_vfiprintf_r+0x21c>)
 80046a8:	f000 fbea 	bl	8004e80 <memchr>
 80046ac:	9a04      	ldr	r2, [sp, #16]
 80046ae:	b9d8      	cbnz	r0, 80046e8 <_vfiprintf_r+0x110>
 80046b0:	06d1      	lsls	r1, r2, #27
 80046b2:	bf44      	itt	mi
 80046b4:	2320      	movmi	r3, #32
 80046b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046ba:	0713      	lsls	r3, r2, #28
 80046bc:	bf44      	itt	mi
 80046be:	232b      	movmi	r3, #43	@ 0x2b
 80046c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046c4:	f89a 3000 	ldrb.w	r3, [sl]
 80046c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80046ca:	d015      	beq.n	80046f8 <_vfiprintf_r+0x120>
 80046cc:	4654      	mov	r4, sl
 80046ce:	2000      	movs	r0, #0
 80046d0:	f04f 0c0a 	mov.w	ip, #10
 80046d4:	9a07      	ldr	r2, [sp, #28]
 80046d6:	4621      	mov	r1, r4
 80046d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046dc:	3b30      	subs	r3, #48	@ 0x30
 80046de:	2b09      	cmp	r3, #9
 80046e0:	d94b      	bls.n	800477a <_vfiprintf_r+0x1a2>
 80046e2:	b1b0      	cbz	r0, 8004712 <_vfiprintf_r+0x13a>
 80046e4:	9207      	str	r2, [sp, #28]
 80046e6:	e014      	b.n	8004712 <_vfiprintf_r+0x13a>
 80046e8:	eba0 0308 	sub.w	r3, r0, r8
 80046ec:	fa09 f303 	lsl.w	r3, r9, r3
 80046f0:	4313      	orrs	r3, r2
 80046f2:	46a2      	mov	sl, r4
 80046f4:	9304      	str	r3, [sp, #16]
 80046f6:	e7d2      	b.n	800469e <_vfiprintf_r+0xc6>
 80046f8:	9b03      	ldr	r3, [sp, #12]
 80046fa:	1d19      	adds	r1, r3, #4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	9103      	str	r1, [sp, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	bfbb      	ittet	lt
 8004704:	425b      	neglt	r3, r3
 8004706:	f042 0202 	orrlt.w	r2, r2, #2
 800470a:	9307      	strge	r3, [sp, #28]
 800470c:	9307      	strlt	r3, [sp, #28]
 800470e:	bfb8      	it	lt
 8004710:	9204      	strlt	r2, [sp, #16]
 8004712:	7823      	ldrb	r3, [r4, #0]
 8004714:	2b2e      	cmp	r3, #46	@ 0x2e
 8004716:	d10a      	bne.n	800472e <_vfiprintf_r+0x156>
 8004718:	7863      	ldrb	r3, [r4, #1]
 800471a:	2b2a      	cmp	r3, #42	@ 0x2a
 800471c:	d132      	bne.n	8004784 <_vfiprintf_r+0x1ac>
 800471e:	9b03      	ldr	r3, [sp, #12]
 8004720:	3402      	adds	r4, #2
 8004722:	1d1a      	adds	r2, r3, #4
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	9203      	str	r2, [sp, #12]
 8004728:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800472c:	9305      	str	r3, [sp, #20]
 800472e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80047f8 <_vfiprintf_r+0x220>
 8004732:	2203      	movs	r2, #3
 8004734:	4650      	mov	r0, sl
 8004736:	7821      	ldrb	r1, [r4, #0]
 8004738:	f000 fba2 	bl	8004e80 <memchr>
 800473c:	b138      	cbz	r0, 800474e <_vfiprintf_r+0x176>
 800473e:	2240      	movs	r2, #64	@ 0x40
 8004740:	9b04      	ldr	r3, [sp, #16]
 8004742:	eba0 000a 	sub.w	r0, r0, sl
 8004746:	4082      	lsls	r2, r0
 8004748:	4313      	orrs	r3, r2
 800474a:	3401      	adds	r4, #1
 800474c:	9304      	str	r3, [sp, #16]
 800474e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004752:	2206      	movs	r2, #6
 8004754:	4829      	ldr	r0, [pc, #164]	@ (80047fc <_vfiprintf_r+0x224>)
 8004756:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800475a:	f000 fb91 	bl	8004e80 <memchr>
 800475e:	2800      	cmp	r0, #0
 8004760:	d03f      	beq.n	80047e2 <_vfiprintf_r+0x20a>
 8004762:	4b27      	ldr	r3, [pc, #156]	@ (8004800 <_vfiprintf_r+0x228>)
 8004764:	bb1b      	cbnz	r3, 80047ae <_vfiprintf_r+0x1d6>
 8004766:	9b03      	ldr	r3, [sp, #12]
 8004768:	3307      	adds	r3, #7
 800476a:	f023 0307 	bic.w	r3, r3, #7
 800476e:	3308      	adds	r3, #8
 8004770:	9303      	str	r3, [sp, #12]
 8004772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004774:	443b      	add	r3, r7
 8004776:	9309      	str	r3, [sp, #36]	@ 0x24
 8004778:	e76a      	b.n	8004650 <_vfiprintf_r+0x78>
 800477a:	460c      	mov	r4, r1
 800477c:	2001      	movs	r0, #1
 800477e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004782:	e7a8      	b.n	80046d6 <_vfiprintf_r+0xfe>
 8004784:	2300      	movs	r3, #0
 8004786:	f04f 0c0a 	mov.w	ip, #10
 800478a:	4619      	mov	r1, r3
 800478c:	3401      	adds	r4, #1
 800478e:	9305      	str	r3, [sp, #20]
 8004790:	4620      	mov	r0, r4
 8004792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004796:	3a30      	subs	r2, #48	@ 0x30
 8004798:	2a09      	cmp	r2, #9
 800479a:	d903      	bls.n	80047a4 <_vfiprintf_r+0x1cc>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0c6      	beq.n	800472e <_vfiprintf_r+0x156>
 80047a0:	9105      	str	r1, [sp, #20]
 80047a2:	e7c4      	b.n	800472e <_vfiprintf_r+0x156>
 80047a4:	4604      	mov	r4, r0
 80047a6:	2301      	movs	r3, #1
 80047a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80047ac:	e7f0      	b.n	8004790 <_vfiprintf_r+0x1b8>
 80047ae:	ab03      	add	r3, sp, #12
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	462a      	mov	r2, r5
 80047b4:	4630      	mov	r0, r6
 80047b6:	4b13      	ldr	r3, [pc, #76]	@ (8004804 <_vfiprintf_r+0x22c>)
 80047b8:	a904      	add	r1, sp, #16
 80047ba:	f3af 8000 	nop.w
 80047be:	4607      	mov	r7, r0
 80047c0:	1c78      	adds	r0, r7, #1
 80047c2:	d1d6      	bne.n	8004772 <_vfiprintf_r+0x19a>
 80047c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80047c6:	07d9      	lsls	r1, r3, #31
 80047c8:	d405      	bmi.n	80047d6 <_vfiprintf_r+0x1fe>
 80047ca:	89ab      	ldrh	r3, [r5, #12]
 80047cc:	059a      	lsls	r2, r3, #22
 80047ce:	d402      	bmi.n	80047d6 <_vfiprintf_r+0x1fe>
 80047d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047d2:	f7ff fc6d 	bl	80040b0 <__retarget_lock_release_recursive>
 80047d6:	89ab      	ldrh	r3, [r5, #12]
 80047d8:	065b      	lsls	r3, r3, #25
 80047da:	f53f af1f 	bmi.w	800461c <_vfiprintf_r+0x44>
 80047de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80047e0:	e71e      	b.n	8004620 <_vfiprintf_r+0x48>
 80047e2:	ab03      	add	r3, sp, #12
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	462a      	mov	r2, r5
 80047e8:	4630      	mov	r0, r6
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <_vfiprintf_r+0x22c>)
 80047ec:	a904      	add	r1, sp, #16
 80047ee:	f000 f87d 	bl	80048ec <_printf_i>
 80047f2:	e7e4      	b.n	80047be <_vfiprintf_r+0x1e6>
 80047f4:	08005200 	.word	0x08005200
 80047f8:	08005206 	.word	0x08005206
 80047fc:	0800520a 	.word	0x0800520a
 8004800:	00000000 	.word	0x00000000
 8004804:	080045b3 	.word	0x080045b3

08004808 <_printf_common>:
 8004808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800480c:	4616      	mov	r6, r2
 800480e:	4698      	mov	r8, r3
 8004810:	688a      	ldr	r2, [r1, #8]
 8004812:	690b      	ldr	r3, [r1, #16]
 8004814:	4607      	mov	r7, r0
 8004816:	4293      	cmp	r3, r2
 8004818:	bfb8      	it	lt
 800481a:	4613      	movlt	r3, r2
 800481c:	6033      	str	r3, [r6, #0]
 800481e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004822:	460c      	mov	r4, r1
 8004824:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004828:	b10a      	cbz	r2, 800482e <_printf_common+0x26>
 800482a:	3301      	adds	r3, #1
 800482c:	6033      	str	r3, [r6, #0]
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	0699      	lsls	r1, r3, #26
 8004832:	bf42      	ittt	mi
 8004834:	6833      	ldrmi	r3, [r6, #0]
 8004836:	3302      	addmi	r3, #2
 8004838:	6033      	strmi	r3, [r6, #0]
 800483a:	6825      	ldr	r5, [r4, #0]
 800483c:	f015 0506 	ands.w	r5, r5, #6
 8004840:	d106      	bne.n	8004850 <_printf_common+0x48>
 8004842:	f104 0a19 	add.w	sl, r4, #25
 8004846:	68e3      	ldr	r3, [r4, #12]
 8004848:	6832      	ldr	r2, [r6, #0]
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	42ab      	cmp	r3, r5
 800484e:	dc2b      	bgt.n	80048a8 <_printf_common+0xa0>
 8004850:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004854:	6822      	ldr	r2, [r4, #0]
 8004856:	3b00      	subs	r3, #0
 8004858:	bf18      	it	ne
 800485a:	2301      	movne	r3, #1
 800485c:	0692      	lsls	r2, r2, #26
 800485e:	d430      	bmi.n	80048c2 <_printf_common+0xba>
 8004860:	4641      	mov	r1, r8
 8004862:	4638      	mov	r0, r7
 8004864:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004868:	47c8      	blx	r9
 800486a:	3001      	adds	r0, #1
 800486c:	d023      	beq.n	80048b6 <_printf_common+0xae>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	6922      	ldr	r2, [r4, #16]
 8004872:	f003 0306 	and.w	r3, r3, #6
 8004876:	2b04      	cmp	r3, #4
 8004878:	bf14      	ite	ne
 800487a:	2500      	movne	r5, #0
 800487c:	6833      	ldreq	r3, [r6, #0]
 800487e:	f04f 0600 	mov.w	r6, #0
 8004882:	bf08      	it	eq
 8004884:	68e5      	ldreq	r5, [r4, #12]
 8004886:	f104 041a 	add.w	r4, r4, #26
 800488a:	bf08      	it	eq
 800488c:	1aed      	subeq	r5, r5, r3
 800488e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004892:	bf08      	it	eq
 8004894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004898:	4293      	cmp	r3, r2
 800489a:	bfc4      	itt	gt
 800489c:	1a9b      	subgt	r3, r3, r2
 800489e:	18ed      	addgt	r5, r5, r3
 80048a0:	42b5      	cmp	r5, r6
 80048a2:	d11a      	bne.n	80048da <_printf_common+0xd2>
 80048a4:	2000      	movs	r0, #0
 80048a6:	e008      	b.n	80048ba <_printf_common+0xb2>
 80048a8:	2301      	movs	r3, #1
 80048aa:	4652      	mov	r2, sl
 80048ac:	4641      	mov	r1, r8
 80048ae:	4638      	mov	r0, r7
 80048b0:	47c8      	blx	r9
 80048b2:	3001      	adds	r0, #1
 80048b4:	d103      	bne.n	80048be <_printf_common+0xb6>
 80048b6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048be:	3501      	adds	r5, #1
 80048c0:	e7c1      	b.n	8004846 <_printf_common+0x3e>
 80048c2:	2030      	movs	r0, #48	@ 0x30
 80048c4:	18e1      	adds	r1, r4, r3
 80048c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80048d0:	4422      	add	r2, r4
 80048d2:	3302      	adds	r3, #2
 80048d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048d8:	e7c2      	b.n	8004860 <_printf_common+0x58>
 80048da:	2301      	movs	r3, #1
 80048dc:	4622      	mov	r2, r4
 80048de:	4641      	mov	r1, r8
 80048e0:	4638      	mov	r0, r7
 80048e2:	47c8      	blx	r9
 80048e4:	3001      	adds	r0, #1
 80048e6:	d0e6      	beq.n	80048b6 <_printf_common+0xae>
 80048e8:	3601      	adds	r6, #1
 80048ea:	e7d9      	b.n	80048a0 <_printf_common+0x98>

080048ec <_printf_i>:
 80048ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f0:	7e0f      	ldrb	r7, [r1, #24]
 80048f2:	4691      	mov	r9, r2
 80048f4:	2f78      	cmp	r7, #120	@ 0x78
 80048f6:	4680      	mov	r8, r0
 80048f8:	460c      	mov	r4, r1
 80048fa:	469a      	mov	sl, r3
 80048fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004902:	d807      	bhi.n	8004914 <_printf_i+0x28>
 8004904:	2f62      	cmp	r7, #98	@ 0x62
 8004906:	d80a      	bhi.n	800491e <_printf_i+0x32>
 8004908:	2f00      	cmp	r7, #0
 800490a:	f000 80d3 	beq.w	8004ab4 <_printf_i+0x1c8>
 800490e:	2f58      	cmp	r7, #88	@ 0x58
 8004910:	f000 80ba 	beq.w	8004a88 <_printf_i+0x19c>
 8004914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004918:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800491c:	e03a      	b.n	8004994 <_printf_i+0xa8>
 800491e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004922:	2b15      	cmp	r3, #21
 8004924:	d8f6      	bhi.n	8004914 <_printf_i+0x28>
 8004926:	a101      	add	r1, pc, #4	@ (adr r1, 800492c <_printf_i+0x40>)
 8004928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800492c:	08004985 	.word	0x08004985
 8004930:	08004999 	.word	0x08004999
 8004934:	08004915 	.word	0x08004915
 8004938:	08004915 	.word	0x08004915
 800493c:	08004915 	.word	0x08004915
 8004940:	08004915 	.word	0x08004915
 8004944:	08004999 	.word	0x08004999
 8004948:	08004915 	.word	0x08004915
 800494c:	08004915 	.word	0x08004915
 8004950:	08004915 	.word	0x08004915
 8004954:	08004915 	.word	0x08004915
 8004958:	08004a9b 	.word	0x08004a9b
 800495c:	080049c3 	.word	0x080049c3
 8004960:	08004a55 	.word	0x08004a55
 8004964:	08004915 	.word	0x08004915
 8004968:	08004915 	.word	0x08004915
 800496c:	08004abd 	.word	0x08004abd
 8004970:	08004915 	.word	0x08004915
 8004974:	080049c3 	.word	0x080049c3
 8004978:	08004915 	.word	0x08004915
 800497c:	08004915 	.word	0x08004915
 8004980:	08004a5d 	.word	0x08004a5d
 8004984:	6833      	ldr	r3, [r6, #0]
 8004986:	1d1a      	adds	r2, r3, #4
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6032      	str	r2, [r6, #0]
 800498c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004990:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004994:	2301      	movs	r3, #1
 8004996:	e09e      	b.n	8004ad6 <_printf_i+0x1ea>
 8004998:	6833      	ldr	r3, [r6, #0]
 800499a:	6820      	ldr	r0, [r4, #0]
 800499c:	1d19      	adds	r1, r3, #4
 800499e:	6031      	str	r1, [r6, #0]
 80049a0:	0606      	lsls	r6, r0, #24
 80049a2:	d501      	bpl.n	80049a8 <_printf_i+0xbc>
 80049a4:	681d      	ldr	r5, [r3, #0]
 80049a6:	e003      	b.n	80049b0 <_printf_i+0xc4>
 80049a8:	0645      	lsls	r5, r0, #25
 80049aa:	d5fb      	bpl.n	80049a4 <_printf_i+0xb8>
 80049ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80049b0:	2d00      	cmp	r5, #0
 80049b2:	da03      	bge.n	80049bc <_printf_i+0xd0>
 80049b4:	232d      	movs	r3, #45	@ 0x2d
 80049b6:	426d      	negs	r5, r5
 80049b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049bc:	230a      	movs	r3, #10
 80049be:	4859      	ldr	r0, [pc, #356]	@ (8004b24 <_printf_i+0x238>)
 80049c0:	e011      	b.n	80049e6 <_printf_i+0xfa>
 80049c2:	6821      	ldr	r1, [r4, #0]
 80049c4:	6833      	ldr	r3, [r6, #0]
 80049c6:	0608      	lsls	r0, r1, #24
 80049c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80049cc:	d402      	bmi.n	80049d4 <_printf_i+0xe8>
 80049ce:	0649      	lsls	r1, r1, #25
 80049d0:	bf48      	it	mi
 80049d2:	b2ad      	uxthmi	r5, r5
 80049d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80049d6:	6033      	str	r3, [r6, #0]
 80049d8:	bf14      	ite	ne
 80049da:	230a      	movne	r3, #10
 80049dc:	2308      	moveq	r3, #8
 80049de:	4851      	ldr	r0, [pc, #324]	@ (8004b24 <_printf_i+0x238>)
 80049e0:	2100      	movs	r1, #0
 80049e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049e6:	6866      	ldr	r6, [r4, #4]
 80049e8:	2e00      	cmp	r6, #0
 80049ea:	bfa8      	it	ge
 80049ec:	6821      	ldrge	r1, [r4, #0]
 80049ee:	60a6      	str	r6, [r4, #8]
 80049f0:	bfa4      	itt	ge
 80049f2:	f021 0104 	bicge.w	r1, r1, #4
 80049f6:	6021      	strge	r1, [r4, #0]
 80049f8:	b90d      	cbnz	r5, 80049fe <_printf_i+0x112>
 80049fa:	2e00      	cmp	r6, #0
 80049fc:	d04b      	beq.n	8004a96 <_printf_i+0x1aa>
 80049fe:	4616      	mov	r6, r2
 8004a00:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a04:	fb03 5711 	mls	r7, r3, r1, r5
 8004a08:	5dc7      	ldrb	r7, [r0, r7]
 8004a0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a0e:	462f      	mov	r7, r5
 8004a10:	42bb      	cmp	r3, r7
 8004a12:	460d      	mov	r5, r1
 8004a14:	d9f4      	bls.n	8004a00 <_printf_i+0x114>
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d10b      	bne.n	8004a32 <_printf_i+0x146>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	07df      	lsls	r7, r3, #31
 8004a1e:	d508      	bpl.n	8004a32 <_printf_i+0x146>
 8004a20:	6923      	ldr	r3, [r4, #16]
 8004a22:	6861      	ldr	r1, [r4, #4]
 8004a24:	4299      	cmp	r1, r3
 8004a26:	bfde      	ittt	le
 8004a28:	2330      	movle	r3, #48	@ 0x30
 8004a2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a32:	1b92      	subs	r2, r2, r6
 8004a34:	6122      	str	r2, [r4, #16]
 8004a36:	464b      	mov	r3, r9
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	f8cd a000 	str.w	sl, [sp]
 8004a40:	aa03      	add	r2, sp, #12
 8004a42:	f7ff fee1 	bl	8004808 <_printf_common>
 8004a46:	3001      	adds	r0, #1
 8004a48:	d14a      	bne.n	8004ae0 <_printf_i+0x1f4>
 8004a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4e:	b004      	add	sp, #16
 8004a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	f043 0320 	orr.w	r3, r3, #32
 8004a5a:	6023      	str	r3, [r4, #0]
 8004a5c:	2778      	movs	r7, #120	@ 0x78
 8004a5e:	4832      	ldr	r0, [pc, #200]	@ (8004b28 <_printf_i+0x23c>)
 8004a60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	6831      	ldr	r1, [r6, #0]
 8004a68:	061f      	lsls	r7, r3, #24
 8004a6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a6e:	d402      	bmi.n	8004a76 <_printf_i+0x18a>
 8004a70:	065f      	lsls	r7, r3, #25
 8004a72:	bf48      	it	mi
 8004a74:	b2ad      	uxthmi	r5, r5
 8004a76:	6031      	str	r1, [r6, #0]
 8004a78:	07d9      	lsls	r1, r3, #31
 8004a7a:	bf44      	itt	mi
 8004a7c:	f043 0320 	orrmi.w	r3, r3, #32
 8004a80:	6023      	strmi	r3, [r4, #0]
 8004a82:	b11d      	cbz	r5, 8004a8c <_printf_i+0x1a0>
 8004a84:	2310      	movs	r3, #16
 8004a86:	e7ab      	b.n	80049e0 <_printf_i+0xf4>
 8004a88:	4826      	ldr	r0, [pc, #152]	@ (8004b24 <_printf_i+0x238>)
 8004a8a:	e7e9      	b.n	8004a60 <_printf_i+0x174>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	f023 0320 	bic.w	r3, r3, #32
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	e7f6      	b.n	8004a84 <_printf_i+0x198>
 8004a96:	4616      	mov	r6, r2
 8004a98:	e7bd      	b.n	8004a16 <_printf_i+0x12a>
 8004a9a:	6833      	ldr	r3, [r6, #0]
 8004a9c:	6825      	ldr	r5, [r4, #0]
 8004a9e:	1d18      	adds	r0, r3, #4
 8004aa0:	6961      	ldr	r1, [r4, #20]
 8004aa2:	6030      	str	r0, [r6, #0]
 8004aa4:	062e      	lsls	r6, r5, #24
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	d501      	bpl.n	8004aae <_printf_i+0x1c2>
 8004aaa:	6019      	str	r1, [r3, #0]
 8004aac:	e002      	b.n	8004ab4 <_printf_i+0x1c8>
 8004aae:	0668      	lsls	r0, r5, #25
 8004ab0:	d5fb      	bpl.n	8004aaa <_printf_i+0x1be>
 8004ab2:	8019      	strh	r1, [r3, #0]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	4616      	mov	r6, r2
 8004ab8:	6123      	str	r3, [r4, #16]
 8004aba:	e7bc      	b.n	8004a36 <_printf_i+0x14a>
 8004abc:	6833      	ldr	r3, [r6, #0]
 8004abe:	2100      	movs	r1, #0
 8004ac0:	1d1a      	adds	r2, r3, #4
 8004ac2:	6032      	str	r2, [r6, #0]
 8004ac4:	681e      	ldr	r6, [r3, #0]
 8004ac6:	6862      	ldr	r2, [r4, #4]
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f000 f9d9 	bl	8004e80 <memchr>
 8004ace:	b108      	cbz	r0, 8004ad4 <_printf_i+0x1e8>
 8004ad0:	1b80      	subs	r0, r0, r6
 8004ad2:	6060      	str	r0, [r4, #4]
 8004ad4:	6863      	ldr	r3, [r4, #4]
 8004ad6:	6123      	str	r3, [r4, #16]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ade:	e7aa      	b.n	8004a36 <_printf_i+0x14a>
 8004ae0:	4632      	mov	r2, r6
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	4640      	mov	r0, r8
 8004ae6:	6923      	ldr	r3, [r4, #16]
 8004ae8:	47d0      	blx	sl
 8004aea:	3001      	adds	r0, #1
 8004aec:	d0ad      	beq.n	8004a4a <_printf_i+0x15e>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	079b      	lsls	r3, r3, #30
 8004af2:	d413      	bmi.n	8004b1c <_printf_i+0x230>
 8004af4:	68e0      	ldr	r0, [r4, #12]
 8004af6:	9b03      	ldr	r3, [sp, #12]
 8004af8:	4298      	cmp	r0, r3
 8004afa:	bfb8      	it	lt
 8004afc:	4618      	movlt	r0, r3
 8004afe:	e7a6      	b.n	8004a4e <_printf_i+0x162>
 8004b00:	2301      	movs	r3, #1
 8004b02:	4632      	mov	r2, r6
 8004b04:	4649      	mov	r1, r9
 8004b06:	4640      	mov	r0, r8
 8004b08:	47d0      	blx	sl
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d09d      	beq.n	8004a4a <_printf_i+0x15e>
 8004b0e:	3501      	adds	r5, #1
 8004b10:	68e3      	ldr	r3, [r4, #12]
 8004b12:	9903      	ldr	r1, [sp, #12]
 8004b14:	1a5b      	subs	r3, r3, r1
 8004b16:	42ab      	cmp	r3, r5
 8004b18:	dcf2      	bgt.n	8004b00 <_printf_i+0x214>
 8004b1a:	e7eb      	b.n	8004af4 <_printf_i+0x208>
 8004b1c:	2500      	movs	r5, #0
 8004b1e:	f104 0619 	add.w	r6, r4, #25
 8004b22:	e7f5      	b.n	8004b10 <_printf_i+0x224>
 8004b24:	08005211 	.word	0x08005211
 8004b28:	08005222 	.word	0x08005222

08004b2c <__sflush_r>:
 8004b2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	0716      	lsls	r6, r2, #28
 8004b34:	4605      	mov	r5, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	d454      	bmi.n	8004be4 <__sflush_r+0xb8>
 8004b3a:	684b      	ldr	r3, [r1, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	dc02      	bgt.n	8004b46 <__sflush_r+0x1a>
 8004b40:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	dd48      	ble.n	8004bd8 <__sflush_r+0xac>
 8004b46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b48:	2e00      	cmp	r6, #0
 8004b4a:	d045      	beq.n	8004bd8 <__sflush_r+0xac>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b52:	682f      	ldr	r7, [r5, #0]
 8004b54:	6a21      	ldr	r1, [r4, #32]
 8004b56:	602b      	str	r3, [r5, #0]
 8004b58:	d030      	beq.n	8004bbc <__sflush_r+0x90>
 8004b5a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	0759      	lsls	r1, r3, #29
 8004b60:	d505      	bpl.n	8004b6e <__sflush_r+0x42>
 8004b62:	6863      	ldr	r3, [r4, #4]
 8004b64:	1ad2      	subs	r2, r2, r3
 8004b66:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b68:	b10b      	cbz	r3, 8004b6e <__sflush_r+0x42>
 8004b6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b6c:	1ad2      	subs	r2, r2, r3
 8004b6e:	2300      	movs	r3, #0
 8004b70:	4628      	mov	r0, r5
 8004b72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b74:	6a21      	ldr	r1, [r4, #32]
 8004b76:	47b0      	blx	r6
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	89a3      	ldrh	r3, [r4, #12]
 8004b7c:	d106      	bne.n	8004b8c <__sflush_r+0x60>
 8004b7e:	6829      	ldr	r1, [r5, #0]
 8004b80:	291d      	cmp	r1, #29
 8004b82:	d82b      	bhi.n	8004bdc <__sflush_r+0xb0>
 8004b84:	4a28      	ldr	r2, [pc, #160]	@ (8004c28 <__sflush_r+0xfc>)
 8004b86:	410a      	asrs	r2, r1
 8004b88:	07d6      	lsls	r6, r2, #31
 8004b8a:	d427      	bmi.n	8004bdc <__sflush_r+0xb0>
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	6062      	str	r2, [r4, #4]
 8004b90:	6922      	ldr	r2, [r4, #16]
 8004b92:	04d9      	lsls	r1, r3, #19
 8004b94:	6022      	str	r2, [r4, #0]
 8004b96:	d504      	bpl.n	8004ba2 <__sflush_r+0x76>
 8004b98:	1c42      	adds	r2, r0, #1
 8004b9a:	d101      	bne.n	8004ba0 <__sflush_r+0x74>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	b903      	cbnz	r3, 8004ba2 <__sflush_r+0x76>
 8004ba0:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ba2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ba4:	602f      	str	r7, [r5, #0]
 8004ba6:	b1b9      	cbz	r1, 8004bd8 <__sflush_r+0xac>
 8004ba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004bac:	4299      	cmp	r1, r3
 8004bae:	d002      	beq.n	8004bb6 <__sflush_r+0x8a>
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f7ff fa93 	bl	80040dc <_free_r>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bba:	e00d      	b.n	8004bd8 <__sflush_r+0xac>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	47b0      	blx	r6
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	1c50      	adds	r0, r2, #1
 8004bc6:	d1c9      	bne.n	8004b5c <__sflush_r+0x30>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0c6      	beq.n	8004b5c <__sflush_r+0x30>
 8004bce:	2b1d      	cmp	r3, #29
 8004bd0:	d001      	beq.n	8004bd6 <__sflush_r+0xaa>
 8004bd2:	2b16      	cmp	r3, #22
 8004bd4:	d11d      	bne.n	8004c12 <__sflush_r+0xe6>
 8004bd6:	602f      	str	r7, [r5, #0]
 8004bd8:	2000      	movs	r0, #0
 8004bda:	e021      	b.n	8004c20 <__sflush_r+0xf4>
 8004bdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004be0:	b21b      	sxth	r3, r3
 8004be2:	e01a      	b.n	8004c1a <__sflush_r+0xee>
 8004be4:	690f      	ldr	r7, [r1, #16]
 8004be6:	2f00      	cmp	r7, #0
 8004be8:	d0f6      	beq.n	8004bd8 <__sflush_r+0xac>
 8004bea:	0793      	lsls	r3, r2, #30
 8004bec:	bf18      	it	ne
 8004bee:	2300      	movne	r3, #0
 8004bf0:	680e      	ldr	r6, [r1, #0]
 8004bf2:	bf08      	it	eq
 8004bf4:	694b      	ldreq	r3, [r1, #20]
 8004bf6:	1bf6      	subs	r6, r6, r7
 8004bf8:	600f      	str	r7, [r1, #0]
 8004bfa:	608b      	str	r3, [r1, #8]
 8004bfc:	2e00      	cmp	r6, #0
 8004bfe:	ddeb      	ble.n	8004bd8 <__sflush_r+0xac>
 8004c00:	4633      	mov	r3, r6
 8004c02:	463a      	mov	r2, r7
 8004c04:	4628      	mov	r0, r5
 8004c06:	6a21      	ldr	r1, [r4, #32]
 8004c08:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004c0c:	47e0      	blx	ip
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	dc07      	bgt.n	8004c22 <__sflush_r+0xf6>
 8004c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1e:	81a3      	strh	r3, [r4, #12]
 8004c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c22:	4407      	add	r7, r0
 8004c24:	1a36      	subs	r6, r6, r0
 8004c26:	e7e9      	b.n	8004bfc <__sflush_r+0xd0>
 8004c28:	dfbffffe 	.word	0xdfbffffe

08004c2c <_fflush_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	690b      	ldr	r3, [r1, #16]
 8004c30:	4605      	mov	r5, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	b913      	cbnz	r3, 8004c3c <_fflush_r+0x10>
 8004c36:	2500      	movs	r5, #0
 8004c38:	4628      	mov	r0, r5
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	b118      	cbz	r0, 8004c46 <_fflush_r+0x1a>
 8004c3e:	6a03      	ldr	r3, [r0, #32]
 8004c40:	b90b      	cbnz	r3, 8004c46 <_fflush_r+0x1a>
 8004c42:	f7ff f8e1 	bl	8003e08 <__sinit>
 8004c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f3      	beq.n	8004c36 <_fflush_r+0xa>
 8004c4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c50:	07d0      	lsls	r0, r2, #31
 8004c52:	d404      	bmi.n	8004c5e <_fflush_r+0x32>
 8004c54:	0599      	lsls	r1, r3, #22
 8004c56:	d402      	bmi.n	8004c5e <_fflush_r+0x32>
 8004c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c5a:	f7ff fa28 	bl	80040ae <__retarget_lock_acquire_recursive>
 8004c5e:	4628      	mov	r0, r5
 8004c60:	4621      	mov	r1, r4
 8004c62:	f7ff ff63 	bl	8004b2c <__sflush_r>
 8004c66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c68:	4605      	mov	r5, r0
 8004c6a:	07da      	lsls	r2, r3, #31
 8004c6c:	d4e4      	bmi.n	8004c38 <_fflush_r+0xc>
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	059b      	lsls	r3, r3, #22
 8004c72:	d4e1      	bmi.n	8004c38 <_fflush_r+0xc>
 8004c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c76:	f7ff fa1b 	bl	80040b0 <__retarget_lock_release_recursive>
 8004c7a:	e7dd      	b.n	8004c38 <_fflush_r+0xc>

08004c7c <__swbuf_r>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	460e      	mov	r6, r1
 8004c80:	4614      	mov	r4, r2
 8004c82:	4605      	mov	r5, r0
 8004c84:	b118      	cbz	r0, 8004c8e <__swbuf_r+0x12>
 8004c86:	6a03      	ldr	r3, [r0, #32]
 8004c88:	b90b      	cbnz	r3, 8004c8e <__swbuf_r+0x12>
 8004c8a:	f7ff f8bd 	bl	8003e08 <__sinit>
 8004c8e:	69a3      	ldr	r3, [r4, #24]
 8004c90:	60a3      	str	r3, [r4, #8]
 8004c92:	89a3      	ldrh	r3, [r4, #12]
 8004c94:	071a      	lsls	r2, r3, #28
 8004c96:	d501      	bpl.n	8004c9c <__swbuf_r+0x20>
 8004c98:	6923      	ldr	r3, [r4, #16]
 8004c9a:	b943      	cbnz	r3, 8004cae <__swbuf_r+0x32>
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f000 f82a 	bl	8004cf8 <__swsetup_r>
 8004ca4:	b118      	cbz	r0, 8004cae <__swbuf_r+0x32>
 8004ca6:	f04f 37ff 	mov.w	r7, #4294967295
 8004caa:	4638      	mov	r0, r7
 8004cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	6922      	ldr	r2, [r4, #16]
 8004cb2:	b2f6      	uxtb	r6, r6
 8004cb4:	1a98      	subs	r0, r3, r2
 8004cb6:	6963      	ldr	r3, [r4, #20]
 8004cb8:	4637      	mov	r7, r6
 8004cba:	4283      	cmp	r3, r0
 8004cbc:	dc05      	bgt.n	8004cca <__swbuf_r+0x4e>
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	f7ff ffb3 	bl	8004c2c <_fflush_r>
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d1ed      	bne.n	8004ca6 <__swbuf_r+0x2a>
 8004cca:	68a3      	ldr	r3, [r4, #8]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	60a3      	str	r3, [r4, #8]
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	6022      	str	r2, [r4, #0]
 8004cd6:	701e      	strb	r6, [r3, #0]
 8004cd8:	6962      	ldr	r2, [r4, #20]
 8004cda:	1c43      	adds	r3, r0, #1
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d004      	beq.n	8004cea <__swbuf_r+0x6e>
 8004ce0:	89a3      	ldrh	r3, [r4, #12]
 8004ce2:	07db      	lsls	r3, r3, #31
 8004ce4:	d5e1      	bpl.n	8004caa <__swbuf_r+0x2e>
 8004ce6:	2e0a      	cmp	r6, #10
 8004ce8:	d1df      	bne.n	8004caa <__swbuf_r+0x2e>
 8004cea:	4621      	mov	r1, r4
 8004cec:	4628      	mov	r0, r5
 8004cee:	f7ff ff9d 	bl	8004c2c <_fflush_r>
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d0d9      	beq.n	8004caa <__swbuf_r+0x2e>
 8004cf6:	e7d6      	b.n	8004ca6 <__swbuf_r+0x2a>

08004cf8 <__swsetup_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	4b29      	ldr	r3, [pc, #164]	@ (8004da0 <__swsetup_r+0xa8>)
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	460c      	mov	r4, r1
 8004d02:	b118      	cbz	r0, 8004d0c <__swsetup_r+0x14>
 8004d04:	6a03      	ldr	r3, [r0, #32]
 8004d06:	b90b      	cbnz	r3, 8004d0c <__swsetup_r+0x14>
 8004d08:	f7ff f87e 	bl	8003e08 <__sinit>
 8004d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d10:	0719      	lsls	r1, r3, #28
 8004d12:	d422      	bmi.n	8004d5a <__swsetup_r+0x62>
 8004d14:	06da      	lsls	r2, r3, #27
 8004d16:	d407      	bmi.n	8004d28 <__swsetup_r+0x30>
 8004d18:	2209      	movs	r2, #9
 8004d1a:	602a      	str	r2, [r5, #0]
 8004d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d20:	f04f 30ff 	mov.w	r0, #4294967295
 8004d24:	81a3      	strh	r3, [r4, #12]
 8004d26:	e033      	b.n	8004d90 <__swsetup_r+0x98>
 8004d28:	0758      	lsls	r0, r3, #29
 8004d2a:	d512      	bpl.n	8004d52 <__swsetup_r+0x5a>
 8004d2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d2e:	b141      	cbz	r1, 8004d42 <__swsetup_r+0x4a>
 8004d30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d34:	4299      	cmp	r1, r3
 8004d36:	d002      	beq.n	8004d3e <__swsetup_r+0x46>
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f7ff f9cf 	bl	80040dc <_free_r>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d48:	81a3      	strh	r3, [r4, #12]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	6063      	str	r3, [r4, #4]
 8004d4e:	6923      	ldr	r3, [r4, #16]
 8004d50:	6023      	str	r3, [r4, #0]
 8004d52:	89a3      	ldrh	r3, [r4, #12]
 8004d54:	f043 0308 	orr.w	r3, r3, #8
 8004d58:	81a3      	strh	r3, [r4, #12]
 8004d5a:	6923      	ldr	r3, [r4, #16]
 8004d5c:	b94b      	cbnz	r3, 8004d72 <__swsetup_r+0x7a>
 8004d5e:	89a3      	ldrh	r3, [r4, #12]
 8004d60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d68:	d003      	beq.n	8004d72 <__swsetup_r+0x7a>
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f000 f8e8 	bl	8004f42 <__smakebuf_r>
 8004d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d76:	f013 0201 	ands.w	r2, r3, #1
 8004d7a:	d00a      	beq.n	8004d92 <__swsetup_r+0x9a>
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	60a2      	str	r2, [r4, #8]
 8004d80:	6962      	ldr	r2, [r4, #20]
 8004d82:	4252      	negs	r2, r2
 8004d84:	61a2      	str	r2, [r4, #24]
 8004d86:	6922      	ldr	r2, [r4, #16]
 8004d88:	b942      	cbnz	r2, 8004d9c <__swsetup_r+0xa4>
 8004d8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d8e:	d1c5      	bne.n	8004d1c <__swsetup_r+0x24>
 8004d90:	bd38      	pop	{r3, r4, r5, pc}
 8004d92:	0799      	lsls	r1, r3, #30
 8004d94:	bf58      	it	pl
 8004d96:	6962      	ldrpl	r2, [r4, #20]
 8004d98:	60a2      	str	r2, [r4, #8]
 8004d9a:	e7f4      	b.n	8004d86 <__swsetup_r+0x8e>
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	e7f7      	b.n	8004d90 <__swsetup_r+0x98>
 8004da0:	2000001c 	.word	0x2000001c

08004da4 <memmove>:
 8004da4:	4288      	cmp	r0, r1
 8004da6:	b510      	push	{r4, lr}
 8004da8:	eb01 0402 	add.w	r4, r1, r2
 8004dac:	d902      	bls.n	8004db4 <memmove+0x10>
 8004dae:	4284      	cmp	r4, r0
 8004db0:	4623      	mov	r3, r4
 8004db2:	d807      	bhi.n	8004dc4 <memmove+0x20>
 8004db4:	1e43      	subs	r3, r0, #1
 8004db6:	42a1      	cmp	r1, r4
 8004db8:	d008      	beq.n	8004dcc <memmove+0x28>
 8004dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dc2:	e7f8      	b.n	8004db6 <memmove+0x12>
 8004dc4:	4601      	mov	r1, r0
 8004dc6:	4402      	add	r2, r0
 8004dc8:	428a      	cmp	r2, r1
 8004dca:	d100      	bne.n	8004dce <memmove+0x2a>
 8004dcc:	bd10      	pop	{r4, pc}
 8004dce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dd6:	e7f7      	b.n	8004dc8 <memmove+0x24>

08004dd8 <_raise_r>:
 8004dd8:	291f      	cmp	r1, #31
 8004dda:	b538      	push	{r3, r4, r5, lr}
 8004ddc:	4605      	mov	r5, r0
 8004dde:	460c      	mov	r4, r1
 8004de0:	d904      	bls.n	8004dec <_raise_r+0x14>
 8004de2:	2316      	movs	r3, #22
 8004de4:	6003      	str	r3, [r0, #0]
 8004de6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004dee:	b112      	cbz	r2, 8004df6 <_raise_r+0x1e>
 8004df0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004df4:	b94b      	cbnz	r3, 8004e0a <_raise_r+0x32>
 8004df6:	4628      	mov	r0, r5
 8004df8:	f000 f830 	bl	8004e5c <_getpid_r>
 8004dfc:	4622      	mov	r2, r4
 8004dfe:	4601      	mov	r1, r0
 8004e00:	4628      	mov	r0, r5
 8004e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e06:	f000 b817 	b.w	8004e38 <_kill_r>
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d00a      	beq.n	8004e24 <_raise_r+0x4c>
 8004e0e:	1c59      	adds	r1, r3, #1
 8004e10:	d103      	bne.n	8004e1a <_raise_r+0x42>
 8004e12:	2316      	movs	r3, #22
 8004e14:	6003      	str	r3, [r0, #0]
 8004e16:	2001      	movs	r0, #1
 8004e18:	e7e7      	b.n	8004dea <_raise_r+0x12>
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004e22:	4798      	blx	r3
 8004e24:	2000      	movs	r0, #0
 8004e26:	e7e0      	b.n	8004dea <_raise_r+0x12>

08004e28 <raise>:
 8004e28:	4b02      	ldr	r3, [pc, #8]	@ (8004e34 <raise+0xc>)
 8004e2a:	4601      	mov	r1, r0
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	f7ff bfd3 	b.w	8004dd8 <_raise_r>
 8004e32:	bf00      	nop
 8004e34:	2000001c 	.word	0x2000001c

08004e38 <_kill_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	4d06      	ldr	r5, [pc, #24]	@ (8004e58 <_kill_r+0x20>)
 8004e3e:	4604      	mov	r4, r0
 8004e40:	4608      	mov	r0, r1
 8004e42:	4611      	mov	r1, r2
 8004e44:	602b      	str	r3, [r5, #0]
 8004e46:	f7fb fce0 	bl	800080a <_kill>
 8004e4a:	1c43      	adds	r3, r0, #1
 8004e4c:	d102      	bne.n	8004e54 <_kill_r+0x1c>
 8004e4e:	682b      	ldr	r3, [r5, #0]
 8004e50:	b103      	cbz	r3, 8004e54 <_kill_r+0x1c>
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	bd38      	pop	{r3, r4, r5, pc}
 8004e56:	bf00      	nop
 8004e58:	20000280 	.word	0x20000280

08004e5c <_getpid_r>:
 8004e5c:	f7fb bcce 	b.w	80007fc <_getpid>

08004e60 <_sbrk_r>:
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	2300      	movs	r3, #0
 8004e64:	4d05      	ldr	r5, [pc, #20]	@ (8004e7c <_sbrk_r+0x1c>)
 8004e66:	4604      	mov	r4, r0
 8004e68:	4608      	mov	r0, r1
 8004e6a:	602b      	str	r3, [r5, #0]
 8004e6c:	f7fb fd52 	bl	8000914 <_sbrk>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	d102      	bne.n	8004e7a <_sbrk_r+0x1a>
 8004e74:	682b      	ldr	r3, [r5, #0]
 8004e76:	b103      	cbz	r3, 8004e7a <_sbrk_r+0x1a>
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	bd38      	pop	{r3, r4, r5, pc}
 8004e7c:	20000280 	.word	0x20000280

08004e80 <memchr>:
 8004e80:	4603      	mov	r3, r0
 8004e82:	b510      	push	{r4, lr}
 8004e84:	b2c9      	uxtb	r1, r1
 8004e86:	4402      	add	r2, r0
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	d101      	bne.n	8004e92 <memchr+0x12>
 8004e8e:	2000      	movs	r0, #0
 8004e90:	e003      	b.n	8004e9a <memchr+0x1a>
 8004e92:	7804      	ldrb	r4, [r0, #0]
 8004e94:	3301      	adds	r3, #1
 8004e96:	428c      	cmp	r4, r1
 8004e98:	d1f6      	bne.n	8004e88 <memchr+0x8>
 8004e9a:	bd10      	pop	{r4, pc}

08004e9c <_realloc_r>:
 8004e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea0:	4680      	mov	r8, r0
 8004ea2:	4615      	mov	r5, r2
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	b921      	cbnz	r1, 8004eb2 <_realloc_r+0x16>
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eae:	f7ff b987 	b.w	80041c0 <_malloc_r>
 8004eb2:	b92a      	cbnz	r2, 8004ec0 <_realloc_r+0x24>
 8004eb4:	f7ff f912 	bl	80040dc <_free_r>
 8004eb8:	2400      	movs	r4, #0
 8004eba:	4620      	mov	r0, r4
 8004ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec0:	f000 f89e 	bl	8005000 <_malloc_usable_size_r>
 8004ec4:	4285      	cmp	r5, r0
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	d802      	bhi.n	8004ed0 <_realloc_r+0x34>
 8004eca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ece:	d8f4      	bhi.n	8004eba <_realloc_r+0x1e>
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	f7ff f974 	bl	80041c0 <_malloc_r>
 8004ed8:	4607      	mov	r7, r0
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d0ec      	beq.n	8004eb8 <_realloc_r+0x1c>
 8004ede:	42b5      	cmp	r5, r6
 8004ee0:	462a      	mov	r2, r5
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	bf28      	it	cs
 8004ee6:	4632      	movcs	r2, r6
 8004ee8:	f7ff f8e3 	bl	80040b2 <memcpy>
 8004eec:	4621      	mov	r1, r4
 8004eee:	4640      	mov	r0, r8
 8004ef0:	f7ff f8f4 	bl	80040dc <_free_r>
 8004ef4:	463c      	mov	r4, r7
 8004ef6:	e7e0      	b.n	8004eba <_realloc_r+0x1e>

08004ef8 <__swhatbuf_r>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	460c      	mov	r4, r1
 8004efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f00:	4615      	mov	r5, r2
 8004f02:	2900      	cmp	r1, #0
 8004f04:	461e      	mov	r6, r3
 8004f06:	b096      	sub	sp, #88	@ 0x58
 8004f08:	da0c      	bge.n	8004f24 <__swhatbuf_r+0x2c>
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f12:	bf14      	ite	ne
 8004f14:	2340      	movne	r3, #64	@ 0x40
 8004f16:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	6031      	str	r1, [r6, #0]
 8004f1e:	602b      	str	r3, [r5, #0]
 8004f20:	b016      	add	sp, #88	@ 0x58
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
 8004f24:	466a      	mov	r2, sp
 8004f26:	f000 f849 	bl	8004fbc <_fstat_r>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	dbed      	blt.n	8004f0a <__swhatbuf_r+0x12>
 8004f2e:	9901      	ldr	r1, [sp, #4]
 8004f30:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f34:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f38:	4259      	negs	r1, r3
 8004f3a:	4159      	adcs	r1, r3
 8004f3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f40:	e7eb      	b.n	8004f1a <__swhatbuf_r+0x22>

08004f42 <__smakebuf_r>:
 8004f42:	898b      	ldrh	r3, [r1, #12]
 8004f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f46:	079d      	lsls	r5, r3, #30
 8004f48:	4606      	mov	r6, r0
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	d507      	bpl.n	8004f5e <__smakebuf_r+0x1c>
 8004f4e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f52:	6023      	str	r3, [r4, #0]
 8004f54:	6123      	str	r3, [r4, #16]
 8004f56:	2301      	movs	r3, #1
 8004f58:	6163      	str	r3, [r4, #20]
 8004f5a:	b003      	add	sp, #12
 8004f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f5e:	466a      	mov	r2, sp
 8004f60:	ab01      	add	r3, sp, #4
 8004f62:	f7ff ffc9 	bl	8004ef8 <__swhatbuf_r>
 8004f66:	9f00      	ldr	r7, [sp, #0]
 8004f68:	4605      	mov	r5, r0
 8004f6a:	4639      	mov	r1, r7
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f7ff f927 	bl	80041c0 <_malloc_r>
 8004f72:	b948      	cbnz	r0, 8004f88 <__smakebuf_r+0x46>
 8004f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f78:	059a      	lsls	r2, r3, #22
 8004f7a:	d4ee      	bmi.n	8004f5a <__smakebuf_r+0x18>
 8004f7c:	f023 0303 	bic.w	r3, r3, #3
 8004f80:	f043 0302 	orr.w	r3, r3, #2
 8004f84:	81a3      	strh	r3, [r4, #12]
 8004f86:	e7e2      	b.n	8004f4e <__smakebuf_r+0xc>
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f92:	81a3      	strh	r3, [r4, #12]
 8004f94:	9b01      	ldr	r3, [sp, #4]
 8004f96:	6020      	str	r0, [r4, #0]
 8004f98:	b15b      	cbz	r3, 8004fb2 <__smakebuf_r+0x70>
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fa0:	f000 f81e 	bl	8004fe0 <_isatty_r>
 8004fa4:	b128      	cbz	r0, 8004fb2 <__smakebuf_r+0x70>
 8004fa6:	89a3      	ldrh	r3, [r4, #12]
 8004fa8:	f023 0303 	bic.w	r3, r3, #3
 8004fac:	f043 0301 	orr.w	r3, r3, #1
 8004fb0:	81a3      	strh	r3, [r4, #12]
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	431d      	orrs	r5, r3
 8004fb6:	81a5      	strh	r5, [r4, #12]
 8004fb8:	e7cf      	b.n	8004f5a <__smakebuf_r+0x18>
	...

08004fbc <_fstat_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	4d06      	ldr	r5, [pc, #24]	@ (8004fdc <_fstat_r+0x20>)
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	602b      	str	r3, [r5, #0]
 8004fca:	f7fb fc7d 	bl	80008c8 <_fstat>
 8004fce:	1c43      	adds	r3, r0, #1
 8004fd0:	d102      	bne.n	8004fd8 <_fstat_r+0x1c>
 8004fd2:	682b      	ldr	r3, [r5, #0]
 8004fd4:	b103      	cbz	r3, 8004fd8 <_fstat_r+0x1c>
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	bd38      	pop	{r3, r4, r5, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000280 	.word	0x20000280

08004fe0 <_isatty_r>:
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	4d05      	ldr	r5, [pc, #20]	@ (8004ffc <_isatty_r+0x1c>)
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	4608      	mov	r0, r1
 8004fea:	602b      	str	r3, [r5, #0]
 8004fec:	f7fb fc7b 	bl	80008e6 <_isatty>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d102      	bne.n	8004ffa <_isatty_r+0x1a>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b103      	cbz	r3, 8004ffa <_isatty_r+0x1a>
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	20000280 	.word	0x20000280

08005000 <_malloc_usable_size_r>:
 8005000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005004:	1f18      	subs	r0, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	bfbc      	itt	lt
 800500a:	580b      	ldrlt	r3, [r1, r0]
 800500c:	18c0      	addlt	r0, r0, r3
 800500e:	4770      	bx	lr

08005010 <_gettimeofday>:
 8005010:	2258      	movs	r2, #88	@ 0x58
 8005012:	4b02      	ldr	r3, [pc, #8]	@ (800501c <_gettimeofday+0xc>)
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	4770      	bx	lr
 800501c:	20000280 	.word	0x20000280

08005020 <_init>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr

0800502c <_fini>:
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502e:	bf00      	nop
 8005030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005032:	bc08      	pop	{r3}
 8005034:	469e      	mov	lr, r3
 8005036:	4770      	bx	lr
