
Lab04_SensorTester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a0c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08004b18  08004b18  00005b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d1c  08004d1c  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  08004d1c  08004d1c  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d1c  08004d1c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d1c  08004d1c  00005d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d20  08004d20  00005d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004d24  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000068  08004d8c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08004d8c  00006350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aaef  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002481  00000000  00000000  00010b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  00013008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000748  00000000  00000000  000139c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f1e  00000000  00000000  00014110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3f2  00000000  00000000  0002d02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000873e5  00000000  00000000  0003a420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1805  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000306c  00000000  00000000  000c1848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000c48b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b00 	.word	0x08004b00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004b00 	.word	0x08004b00

0800014c <CanTP_Init>:
#define CANTP_BUFF_SIZE			100

uint8_t SendBuffer[CANTP_BUFF_SIZE];
uint8_t RecvBuffer[CANTP_BUFF_SIZE];

uint8_t CanTP_Init(uint16_t SendId, uint16_t RecvId) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b092      	sub	sp, #72	@ 0x48
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	80fb      	strh	r3, [r7, #6]
 8000158:	4613      	mov	r3, r2
 800015a:	80bb      	strh	r3, [r7, #4]
	CAN_FilterTypeDef Can_Filter;
	Can_Filter.FilterActivation = CAN_FILTER_ENABLE;
 800015c:	2301      	movs	r3, #1
 800015e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	Can_Filter.FilterBank = 0;
 8000160:	2300      	movs	r3, #0
 8000162:	623b      	str	r3, [r7, #32]
	Can_Filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000164:	2300      	movs	r3, #0
 8000166:	61fb      	str	r3, [r7, #28]
	Can_Filter.FilterMode = CAN_FILTERMODE_IDLIST;
 8000168:	2301      	movs	r3, #1
 800016a:	627b      	str	r3, [r7, #36]	@ 0x24
	Can_Filter.FilterScale = CAN_FILTERSCALE_16BIT;
 800016c:	2300      	movs	r3, #0
 800016e:	62bb      	str	r3, [r7, #40]	@ 0x28
	Can_Filter.FilterIdHigh = RecvId << 5;
 8000170:	88bb      	ldrh	r3, [r7, #4]
 8000172:	015b      	lsls	r3, r3, #5
 8000174:	60fb      	str	r3, [r7, #12]
	HAL_ERR(HAL_CAN_ConfigFilter(&hcan, &Can_Filter));
 8000176:	f107 030c 	add.w	r3, r7, #12
 800017a:	4619      	mov	r1, r3
 800017c:	4818      	ldr	r0, [pc, #96]	@ (80001e0 <CanTP_Init+0x94>)
 800017e:	f001 f8bc 	bl	80012fa <HAL_CAN_ConfigFilter>
 8000182:	4603      	mov	r3, r0
 8000184:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000188:	2b00      	cmp	r3, #0
 800018a:	d002      	beq.n	8000192 <CanTP_Init+0x46>
 800018c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800018e:	b2db      	uxtb	r3, r3
 8000190:	e021      	b.n	80001d6 <CanTP_Init+0x8a>

	HAL_ERR(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING));
 8000192:	2102      	movs	r1, #2
 8000194:	4812      	ldr	r0, [pc, #72]	@ (80001e0 <CanTP_Init+0x94>)
 8000196:	f001 fbe1 	bl	800195c <HAL_CAN_ActivateNotification>
 800019a:	4603      	mov	r3, r0
 800019c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800019e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d002      	beq.n	80001aa <CanTP_Init+0x5e>
 80001a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80001a6:	b2db      	uxtb	r3, r3
 80001a8:	e015      	b.n	80001d6 <CanTP_Init+0x8a>

	HAL_ERR(HAL_CAN_Start(&hcan));
 80001aa:	480d      	ldr	r0, [pc, #52]	@ (80001e0 <CanTP_Init+0x94>)
 80001ac:	f001 f96e 	bl	800148c <HAL_CAN_Start>
 80001b0:	4603      	mov	r3, r0
 80001b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80001b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d002      	beq.n	80001c0 <CanTP_Init+0x74>
 80001ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	e00a      	b.n	80001d6 <CanTP_Init+0x8a>
//	uint8_t status = 0;
	isotp_init_link(&isoTP, SendId, SendBuffer, CANTP_BUFF_SIZE, RecvBuffer,
 80001c0:	88f9      	ldrh	r1, [r7, #6]
 80001c2:	2364      	movs	r3, #100	@ 0x64
 80001c4:	9301      	str	r3, [sp, #4]
 80001c6:	4b07      	ldr	r3, [pc, #28]	@ (80001e4 <CanTP_Init+0x98>)
 80001c8:	9300      	str	r3, [sp, #0]
 80001ca:	2364      	movs	r3, #100	@ 0x64
 80001cc:	4a06      	ldr	r2, [pc, #24]	@ (80001e8 <CanTP_Init+0x9c>)
 80001ce:	4807      	ldr	r0, [pc, #28]	@ (80001ec <CanTP_Init+0xa0>)
 80001d0:	f003 fa06 	bl	80035e0 <isotp_init_link>
			CANTP_BUFF_SIZE);
	return HAL_OK;
 80001d4:	2300      	movs	r3, #0
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3740      	adds	r7, #64	@ 0x40
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	2000018c 	.word	0x2000018c
 80001e4:	20000128 	.word	0x20000128
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	20000084 	.word	0x20000084

080001f0 <CanTP_Transmit>:

uint8_t CanTP_Transmit(uint8_t *pData, uint16_t len) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
 80001f8:	460b      	mov	r3, r1
 80001fa:	807b      	strh	r3, [r7, #2]
	HAL_ERR(isotp_send(&isoTP, pData, len));
 80001fc:	887b      	ldrh	r3, [r7, #2]
 80001fe:	461a      	mov	r2, r3
 8000200:	6879      	ldr	r1, [r7, #4]
 8000202:	4812      	ldr	r0, [pc, #72]	@ (800024c <CanTP_Transmit+0x5c>)
 8000204:	f003 f81b 	bl	800323e <isotp_send>
 8000208:	60f8      	str	r0, [r7, #12]
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d005      	beq.n	800021c <CanTP_Transmit+0x2c>
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	b2db      	uxtb	r3, r3
 8000214:	e015      	b.n	8000242 <CanTP_Transmit+0x52>
	while (isoTP.send_status == ISOTP_SEND_STATUS_INPROGRESS) {
		isotp_poll(&isoTP);
 8000216:	480d      	ldr	r0, [pc, #52]	@ (800024c <CanTP_Transmit+0x5c>)
 8000218:	f003 fa09 	bl	800362e <isotp_poll>
	while (isoTP.send_status == ISOTP_SEND_STATUS_INPROGRESS) {
 800021c:	4b0b      	ldr	r3, [pc, #44]	@ (800024c <CanTP_Transmit+0x5c>)
 800021e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d0f7      	beq.n	8000216 <CanTP_Transmit+0x26>
	}
	if (ISOTP_SEND_STATUS_IDLE != isoTP.send_status) {
 8000226:	4b09      	ldr	r3, [pc, #36]	@ (800024c <CanTP_Transmit+0x5c>)
 8000228:	f893 3020 	ldrb.w	r3, [r3, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d007      	beq.n	8000240 <CanTP_Transmit+0x50>
		HAL_GPIO_WritePin(LEDG_GPIO_Port, LEDG_Pin, 1);
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000236:	4806      	ldr	r0, [pc, #24]	@ (8000250 <CanTP_Transmit+0x60>)
 8000238:	f002 f86a 	bl	8002310 <HAL_GPIO_WritePin>
		return HAL_ERROR;
 800023c:	2301      	movs	r3, #1
 800023e:	e000      	b.n	8000242 <CanTP_Transmit+0x52>
	}
	return HAL_OK;
 8000240:	2300      	movs	r3, #0
}
 8000242:	4618      	mov	r0, r3
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	20000084 	.word	0x20000084
 8000250:	40010c00 	.word	0x40010c00

08000254 <CanTP_Receive>:

uint8_t CanTP_Receive(uint8_t *pData, uint16_t *len, uint32_t timeout) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	607a      	str	r2, [r7, #4]
	uint32_t startTime = HAL_GetTick();
 8000260:	f000 ff22 	bl	80010a8 <HAL_GetTick>
 8000264:	6178      	str	r0, [r7, #20]
	while ((HAL_GetTick() - startTime) < timeout) {
 8000266:	e00d      	b.n	8000284 <CanTP_Receive+0x30>
		isotp_poll(&isoTP);
 8000268:	4823      	ldr	r0, [pc, #140]	@ (80002f8 <CanTP_Receive+0xa4>)
 800026a:	f003 f9e0 	bl	800362e <isotp_poll>
		if (isoTP.receive_status == ISOTP_RECEIVE_STATUS_FULL) {
 800026e:	4b22      	ldr	r3, [pc, #136]	@ (80002f8 <CanTP_Receive+0xa4>)
 8000270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000274:	2b02      	cmp	r3, #2
 8000276:	d105      	bne.n	8000284 <CanTP_Receive+0x30>
			HAL_GPIO_TogglePin(LEDIn_GPIO_Port, LEDIn_Pin);
 8000278:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800027c:	481f      	ldr	r0, [pc, #124]	@ (80002fc <CanTP_Receive+0xa8>)
 800027e:	f002 f85f 	bl	8002340 <HAL_GPIO_TogglePin>
			break;
 8000282:	e007      	b.n	8000294 <CanTP_Receive+0x40>
	while ((HAL_GetTick() - startTime) < timeout) {
 8000284:	f000 ff10 	bl	80010a8 <HAL_GetTick>
 8000288:	4602      	mov	r2, r0
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	1ad3      	subs	r3, r2, r3
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	429a      	cmp	r2, r3
 8000292:	d8e9      	bhi.n	8000268 <CanTP_Receive+0x14>
		}
	}
	uint8_t status = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	74fb      	strb	r3, [r7, #19]
	if (ISOTP_RECEIVE_STATUS_FULL == isoTP.receive_status) {
 8000298:	4b17      	ldr	r3, [pc, #92]	@ (80002f8 <CanTP_Receive+0xa4>)
 800029a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800029e:	2b02      	cmp	r3, #2
 80002a0:	d11f      	bne.n	80002e2 <CanTP_Receive+0x8e>
//		HAL_GPIO_TogglePin(LEDG_GPIO_Port, LEDG_Pin);
//		status = isotp_receive(&isoTP, pData, *len, len);
		uint16_t copylen = isoTP.receive_size;
 80002a2:	4b15      	ldr	r3, [pc, #84]	@ (80002f8 <CanTP_Receive+0xa4>)
 80002a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80002a6:	83fb      	strh	r3, [r7, #30]
		if (copylen > *len) {
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	881b      	ldrh	r3, [r3, #0]
 80002ac:	8bfa      	ldrh	r2, [r7, #30]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d902      	bls.n	80002b8 <CanTP_Receive+0x64>
			copylen = *len;
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	83fb      	strh	r3, [r7, #30]
		}
		for (int i = 0; i < copylen; i++) {
 80002b8:	2300      	movs	r3, #0
 80002ba:	61bb      	str	r3, [r7, #24]
 80002bc:	e00b      	b.n	80002d6 <CanTP_Receive+0x82>
			pData[i] = isoTP.receive_buffer[i];
 80002be:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <CanTP_Receive+0xa4>)
 80002c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80002c2:	69bb      	ldr	r3, [r7, #24]
 80002c4:	441a      	add	r2, r3
 80002c6:	69bb      	ldr	r3, [r7, #24]
 80002c8:	68f9      	ldr	r1, [r7, #12]
 80002ca:	440b      	add	r3, r1
 80002cc:	7812      	ldrb	r2, [r2, #0]
 80002ce:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < copylen; i++) {
 80002d0:	69bb      	ldr	r3, [r7, #24]
 80002d2:	3301      	adds	r3, #1
 80002d4:	61bb      	str	r3, [r7, #24]
 80002d6:	8bfb      	ldrh	r3, [r7, #30]
 80002d8:	69ba      	ldr	r2, [r7, #24]
 80002da:	429a      	cmp	r2, r3
 80002dc:	dbef      	blt.n	80002be <CanTP_Receive+0x6a>
		}
		return HAL_OK;
 80002de:	2300      	movs	r3, #0
 80002e0:	e005      	b.n	80002ee <CanTP_Receive+0x9a>
	}
	HAL_GPIO_TogglePin(LEDR_GPIO_Port, LEDR_Pin);
 80002e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002e6:	4806      	ldr	r0, [pc, #24]	@ (8000300 <CanTP_Receive+0xac>)
 80002e8:	f002 f82a 	bl	8002340 <HAL_GPIO_TogglePin>
	return HAL_TIMEOUT;
 80002ec:	2303      	movs	r3, #3
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3720      	adds	r7, #32
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000084 	.word	0x20000084
 80002fc:	40011000 	.word	0x40011000
 8000300:	40010c00 	.word	0x40010c00

08000304 <CanTP_RcvCallback>:

void CanTP_RcvCallback() {
 8000304:	b580      	push	{r7, lr}
 8000306:	b08a      	sub	sp, #40	@ 0x28
 8000308:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8] = { 0 };
 800030a:	2300      	movs	r3, #0
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
	HAL_CAN_GetRxMessage(&hcan, CAN_FILTER_FIFO0, &RxHeader, RxData);
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	f107 020c 	add.w	r2, r7, #12
 8000318:	2100      	movs	r1, #0
 800031a:	4807      	ldr	r0, [pc, #28]	@ (8000338 <CanTP_RcvCallback+0x34>)
 800031c:	f001 f9fd 	bl	800171a <HAL_CAN_GetRxMessage>
	isotp_on_can_message(&isoTP, RxData, RxHeader.DLC);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	b2da      	uxtb	r2, r3
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4619      	mov	r1, r3
 8000328:	4804      	ldr	r0, [pc, #16]	@ (800033c <CanTP_RcvCallback+0x38>)
 800032a:	f003 f807 	bl	800333c <isotp_on_can_message>
}
 800032e:	bf00      	nop
 8000330:	3728      	adds	r7, #40	@ 0x28
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	2000018c 	.word	0x2000018c
 800033c:	20000084 	.word	0x20000084

08000340 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000344:	4b18      	ldr	r3, [pc, #96]	@ (80003a8 <MX_CAN_Init+0x68>)
 8000346:	4a19      	ldr	r2, [pc, #100]	@ (80003ac <MX_CAN_Init+0x6c>)
 8000348:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800034a:	4b17      	ldr	r3, [pc, #92]	@ (80003a8 <MX_CAN_Init+0x68>)
 800034c:	2204      	movs	r2, #4
 800034e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000350:	4b15      	ldr	r3, [pc, #84]	@ (80003a8 <MX_CAN_Init+0x68>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000356:	4b14      	ldr	r3, [pc, #80]	@ (80003a8 <MX_CAN_Init+0x68>)
 8000358:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800035c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800035e:	4b12      	ldr	r3, [pc, #72]	@ (80003a8 <MX_CAN_Init+0x68>)
 8000360:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000364:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000366:	4b10      	ldr	r3, [pc, #64]	@ (80003a8 <MX_CAN_Init+0x68>)
 8000368:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800036c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800036e:	4b0e      	ldr	r3, [pc, #56]	@ (80003a8 <MX_CAN_Init+0x68>)
 8000370:	2200      	movs	r2, #0
 8000372:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000374:	4b0c      	ldr	r3, [pc, #48]	@ (80003a8 <MX_CAN_Init+0x68>)
 8000376:	2200      	movs	r2, #0
 8000378:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	@ (80003a8 <MX_CAN_Init+0x68>)
 800037c:	2200      	movs	r2, #0
 800037e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000380:	4b09      	ldr	r3, [pc, #36]	@ (80003a8 <MX_CAN_Init+0x68>)
 8000382:	2200      	movs	r2, #0
 8000384:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000386:	4b08      	ldr	r3, [pc, #32]	@ (80003a8 <MX_CAN_Init+0x68>)
 8000388:	2200      	movs	r2, #0
 800038a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800038c:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <MX_CAN_Init+0x68>)
 800038e:	2200      	movs	r2, #0
 8000390:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000392:	4805      	ldr	r0, [pc, #20]	@ (80003a8 <MX_CAN_Init+0x68>)
 8000394:	f000 feb6 	bl	8001104 <HAL_CAN_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800039e:	f000 f96f 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	2000018c 	.word	0x2000018c
 80003ac:	40006400 	.word	0x40006400

080003b0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a2c      	ldr	r2, [pc, #176]	@ (800047c <HAL_CAN_MspInit+0xcc>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d151      	bne.n	8000474 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80003d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000480 <HAL_CAN_MspInit+0xd0>)
 80003d2:	69db      	ldr	r3, [r3, #28]
 80003d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000480 <HAL_CAN_MspInit+0xd0>)
 80003d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003da:	61d3      	str	r3, [r2, #28]
 80003dc:	4b28      	ldr	r3, [pc, #160]	@ (8000480 <HAL_CAN_MspInit+0xd0>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e8:	4b25      	ldr	r3, [pc, #148]	@ (8000480 <HAL_CAN_MspInit+0xd0>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a24      	ldr	r2, [pc, #144]	@ (8000480 <HAL_CAN_MspInit+0xd0>)
 80003ee:	f043 0304 	orr.w	r3, r3, #4
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b22      	ldr	r3, [pc, #136]	@ (8000480 <HAL_CAN_MspInit+0xd0>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0304 	and.w	r3, r3, #4
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000400:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000404:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	4619      	mov	r1, r3
 8000414:	481b      	ldr	r0, [pc, #108]	@ (8000484 <HAL_CAN_MspInit+0xd4>)
 8000416:	f001 fdf7 	bl	8002008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800041a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800041e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000420:	2302      	movs	r3, #2
 8000422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000424:	2303      	movs	r3, #3
 8000426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	4815      	ldr	r0, [pc, #84]	@ (8000484 <HAL_CAN_MspInit+0xd4>)
 8000430:	f001 fdea 	bl	8002008 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000434:	2200      	movs	r2, #0
 8000436:	2100      	movs	r1, #0
 8000438:	2013      	movs	r0, #19
 800043a:	f001 fdae 	bl	8001f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800043e:	2013      	movs	r0, #19
 8000440:	f001 fdc7 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2100      	movs	r1, #0
 8000448:	2014      	movs	r0, #20
 800044a:	f001 fda6 	bl	8001f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800044e:	2014      	movs	r0, #20
 8000450:	f001 fdbf 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000454:	2200      	movs	r2, #0
 8000456:	2100      	movs	r1, #0
 8000458:	2015      	movs	r0, #21
 800045a:	f001 fd9e 	bl	8001f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800045e:	2015      	movs	r0, #21
 8000460:	f001 fdb7 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000464:	2200      	movs	r2, #0
 8000466:	2100      	movs	r1, #0
 8000468:	2016      	movs	r0, #22
 800046a:	f001 fd96 	bl	8001f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800046e:	2016      	movs	r0, #22
 8000470:	f001 fdaf 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000474:	bf00      	nop
 8000476:	3720      	adds	r7, #32
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40006400 	.word	0x40006400
 8000480:	40021000 	.word	0x40021000
 8000484:	40010800 	.word	0x40010800

08000488 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049c:	4b2e      	ldr	r3, [pc, #184]	@ (8000558 <MX_GPIO_Init+0xd0>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a2d      	ldr	r2, [pc, #180]	@ (8000558 <MX_GPIO_Init+0xd0>)
 80004a2:	f043 0310 	orr.w	r3, r3, #16
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000558 <MX_GPIO_Init+0xd0>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0310 	and.w	r3, r3, #16
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b4:	4b28      	ldr	r3, [pc, #160]	@ (8000558 <MX_GPIO_Init+0xd0>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a27      	ldr	r2, [pc, #156]	@ (8000558 <MX_GPIO_Init+0xd0>)
 80004ba:	f043 0320 	orr.w	r3, r3, #32
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b25      	ldr	r3, [pc, #148]	@ (8000558 <MX_GPIO_Init+0xd0>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0320 	and.w	r3, r3, #32
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004cc:	4b22      	ldr	r3, [pc, #136]	@ (8000558 <MX_GPIO_Init+0xd0>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a21      	ldr	r2, [pc, #132]	@ (8000558 <MX_GPIO_Init+0xd0>)
 80004d2:	f043 0308 	orr.w	r3, r3, #8
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000558 <MX_GPIO_Init+0xd0>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0308 	and.w	r3, r3, #8
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000558 <MX_GPIO_Init+0xd0>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000558 <MX_GPIO_Init+0xd0>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b19      	ldr	r3, [pc, #100]	@ (8000558 <MX_GPIO_Init+0xd0>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDIn_GPIO_Port, LEDIn_Pin, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000502:	4816      	ldr	r0, [pc, #88]	@ (800055c <MX_GPIO_Init+0xd4>)
 8000504:	f001 ff04 	bl	8002310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDB_Pin|LEDG_Pin|LEDR_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800050e:	4814      	ldr	r0, [pc, #80]	@ (8000560 <MX_GPIO_Init+0xd8>)
 8000510:	f001 fefe 	bl	8002310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEDIn_Pin;
 8000514:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051a:	2301      	movs	r3, #1
 800051c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2302      	movs	r3, #2
 8000524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDIn_GPIO_Port, &GPIO_InitStruct);
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	4619      	mov	r1, r3
 800052c:	480b      	ldr	r0, [pc, #44]	@ (800055c <MX_GPIO_Init+0xd4>)
 800052e:	f001 fd6b 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDG_Pin|LEDR_Pin;
 8000532:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	2301      	movs	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2300      	movs	r3, #0
 800053e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	2302      	movs	r3, #2
 8000542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4619      	mov	r1, r3
 800054a:	4805      	ldr	r0, [pc, #20]	@ (8000560 <MX_GPIO_Init+0xd8>)
 800054c:	f001 fd5c 	bl	8002008 <HAL_GPIO_Init>

}
 8000550:	bf00      	nop
 8000552:	3720      	adds	r7, #32
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40021000 	.word	0x40021000
 800055c:	40011000 	.word	0x40011000
 8000560:	40010c00 	.word	0x40010c00

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fd45 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f82f 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f7ff ff89 	bl	8000488 <MX_GPIO_Init>
  MX_CAN_Init();
 8000576:	f7ff fee3 	bl	8000340 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800057a:	f000 f9d5 	bl	8000928 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  diagnosticService_Init();
 800057e:	f000 fb1f 	bl	8000bc0 <diagnosticService_Init>
  uint8_t write_data[] = {
 8000582:	f242 3301 	movw	r3, #8961	@ 0x2301
 8000586:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin | LEDG_Pin | LEDR_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800058e:	480f      	ldr	r0, [pc, #60]	@ (80005cc <main+0x68>)
 8000590:	f001 febe 	bl	8002310 <HAL_GPIO_WritePin>
	  readDataByID_RequestService(ReadData_CanID_DID);
 8000594:	f240 1023 	movw	r0, #291	@ 0x123
 8000598:	f000 fb30 	bl	8000bfc <readDataByID_RequestService>
	  HAL_Delay(2000);
 800059c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005a0:	f000 fd8c 	bl	80010bc <HAL_Delay>
	  securityAccess_RequestService();
 80005a4:	f000 fc8a 	bl	8000ebc <securityAccess_RequestService>
	  HAL_Delay(2000);
 80005a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005ac:	f000 fd86 	bl	80010bc <HAL_Delay>
	  writeDataByID_RequestService(
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2202      	movs	r2, #2
 80005b4:	4619      	mov	r1, r3
 80005b6:	f240 1023 	movw	r0, #291	@ 0x123
 80005ba:	f000 fbd3 	bl	8000d64 <writeDataByID_RequestService>
			  WriteData_CanID_DID,
			  write_data,
			  LENGTH(write_data)
	  );
	  HAL_Delay(2000);
 80005be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005c2:	f000 fd7b 	bl	80010bc <HAL_Delay>
	  HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin | LEDG_Pin | LEDR_Pin, GPIO_PIN_RESET);
 80005c6:	bf00      	nop
 80005c8:	e7de      	b.n	8000588 <main+0x24>
 80005ca:	bf00      	nop
 80005cc:	40010c00 	.word	0x40010c00

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b090      	sub	sp, #64	@ 0x40
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0318 	add.w	r3, r7, #24
 80005da:	2228      	movs	r2, #40	@ 0x28
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fb00 	bl	8003be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f2:	2301      	movs	r3, #1
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000608:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800060c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800060e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0318 	add.w	r3, r7, #24
 8000618:	4618      	mov	r0, r3
 800061a:	f001 feab 	bl	8002374 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000624:	f000 f82c 	bl	8000680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2102      	movs	r1, #2
 8000642:	4618      	mov	r0, r3
 8000644:	f002 f918 	bl	8002878 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800064e:	f000 f817 	bl	8000680 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3740      	adds	r7, #64	@ 0x40
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800066a:	4804      	ldr	r0, [pc, #16]	@ (800067c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 800066c:	f001 fe50 	bl	8002310 <HAL_GPIO_WritePin>
	CanTP_RcvCallback();
 8000670:	f7ff fe48 	bl	8000304 <CanTP_RcvCallback>
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40010c00 	.word	0x40010c00

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <Error_Handler+0x8>

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000692:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <HAL_MspInit+0x5c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	4a14      	ldr	r2, [pc, #80]	@ (80006e8 <HAL_MspInit+0x5c>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6193      	str	r3, [r2, #24]
 800069e:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <HAL_MspInit+0x5c>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <HAL_MspInit+0x5c>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a0e      	ldr	r2, [pc, #56]	@ (80006e8 <HAL_MspInit+0x5c>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <HAL_MspInit+0x5c>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006c2:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <HAL_MspInit+0x60>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <HAL_MspInit+0x60>)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40010000 	.word	0x40010000

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <NMI_Handler+0x4>

080006f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <MemManage_Handler+0x4>

08000708 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <BusFault_Handler+0x4>

08000710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <UsageFault_Handler+0x4>

08000718 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 fca0 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800074c:	4802      	ldr	r0, [pc, #8]	@ (8000758 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800074e:	f001 f92a 	bl	80019a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000018c 	.word	0x2000018c

0800075c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000760:	4802      	ldr	r0, [pc, #8]	@ (800076c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000762:	f001 f920 	bl	80019a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000018c 	.word	0x2000018c

08000770 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000774:	4802      	ldr	r0, [pc, #8]	@ (8000780 <CAN1_RX1_IRQHandler+0x10>)
 8000776:	f001 f916 	bl	80019a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	2000018c 	.word	0x2000018c

08000784 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000788:	4802      	ldr	r0, [pc, #8]	@ (8000794 <CAN1_SCE_IRQHandler+0x10>)
 800078a:	f001 f90c 	bl	80019a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000018c 	.word	0x2000018c

08000798 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return 1;
 800079c:	2301      	movs	r3, #1
}
 800079e:	4618      	mov	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <_kill>:

int _kill(int pid, int sig)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80007b0:	f003 fa66 	bl	8003c80 <__errno>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2216      	movs	r2, #22
 80007b8:	601a      	str	r2, [r3, #0]
  return -1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <_exit>:

void _exit (int status)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80007ce:	f04f 31ff 	mov.w	r1, #4294967295
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ffe7 	bl	80007a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <_exit+0x12>

080007dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	e00a      	b.n	8000804 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007ee:	f3af 8000 	nop.w
 80007f2:	4601      	mov	r1, r0
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	60ba      	str	r2, [r7, #8]
 80007fa:	b2ca      	uxtb	r2, r1
 80007fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	3301      	adds	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697a      	ldr	r2, [r7, #20]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	429a      	cmp	r2, r3
 800080a:	dbf0      	blt.n	80007ee <_read+0x12>
  }

  return len;
 800080c:	687b      	ldr	r3, [r7, #4]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b086      	sub	sp, #24
 800081a:	af00      	add	r7, sp, #0
 800081c:	60f8      	str	r0, [r7, #12]
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	e009      	b.n	800083c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	60ba      	str	r2, [r7, #8]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	3301      	adds	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	dbf1      	blt.n	8000828 <_write+0x12>
  }
  return len;
 8000844:	687b      	ldr	r3, [r7, #4]
}
 8000846:	4618      	mov	r0, r3
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <_close>:

int _close(int file)
{
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000874:	605a      	str	r2, [r3, #4]
  return 0;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <_isatty>:

int _isatty(int file)
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000896:	b480      	push	{r7}
 8000898:	b085      	sub	sp, #20
 800089a:	af00      	add	r7, sp, #0
 800089c:	60f8      	str	r0, [r7, #12]
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
	...

080008b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b8:	4a14      	ldr	r2, [pc, #80]	@ (800090c <_sbrk+0x5c>)
 80008ba:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <_sbrk+0x60>)
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c4:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d102      	bne.n	80008d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008cc:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <_sbrk+0x64>)
 80008ce:	4a12      	ldr	r2, [pc, #72]	@ (8000918 <_sbrk+0x68>)
 80008d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d2:	4b10      	ldr	r3, [pc, #64]	@ (8000914 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d207      	bcs.n	80008f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e0:	f003 f9ce 	bl	8003c80 <__errno>
 80008e4:	4603      	mov	r3, r0
 80008e6:	220c      	movs	r2, #12
 80008e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295
 80008ee:	e009      	b.n	8000904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f0:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008f6:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <_sbrk+0x64>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	4a05      	ldr	r2, [pc, #20]	@ (8000914 <_sbrk+0x64>)
 8000900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000902:	68fb      	ldr	r3, [r7, #12]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20005000 	.word	0x20005000
 8000910:	00000400 	.word	0x00000400
 8000914:	200001b4 	.word	0x200001b4
 8000918:	20000350 	.word	0x20000350

0800091c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <MX_USART1_UART_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_USART1_UART_Init+0x4c>)
 8000960:	f002 f918 	bl	8002b94 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800096a:	f7ff fe89 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200001b8 	.word	0x200001b8
 8000978:	40013800 	.word	0x40013800

0800097c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a1c      	ldr	r2, [pc, #112]	@ (8000a08 <HAL_UART_MspInit+0x8c>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d131      	bne.n	8000a00 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <HAL_UART_MspInit+0x90>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a0c <HAL_UART_MspInit+0x90>)
 80009a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <HAL_UART_MspInit+0x90>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_UART_MspInit+0x90>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <HAL_UART_MspInit+0x90>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_UART_MspInit+0x90>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0310 	add.w	r3, r7, #16
 80009de:	4619      	mov	r1, r3
 80009e0:	480b      	ldr	r0, [pc, #44]	@ (8000a10 <HAL_UART_MspInit+0x94>)
 80009e2:	f001 fb11 	bl	8002008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4619      	mov	r1, r3
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <HAL_UART_MspInit+0x94>)
 80009fc:	f001 fb04 	bl	8002008 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a00:	bf00      	nop
 8000a02:	3720      	adds	r7, #32
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40013800 	.word	0x40013800
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010800 	.word	0x40010800

08000a14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a14:	f7ff ff82 	bl	800091c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a18:	480b      	ldr	r0, [pc, #44]	@ (8000a48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a1a:	490c      	ldr	r1, [pc, #48]	@ (8000a4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a09      	ldr	r2, [pc, #36]	@ (8000a54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a30:	4c09      	ldr	r4, [pc, #36]	@ (8000a58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f003 f925 	bl	8003c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a42:	f7ff fd8f 	bl	8000564 <main>
  bx lr
 8000a46:	4770      	bx	lr
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a50:	08004d24 	.word	0x08004d24
  ldr r2, =_sbss
 8000a54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a58:	20000350 	.word	0x20000350

08000a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_2_IRQHandler>

08000a5e <calculateKeys>:

#include "DiagnosticDefine.h"
#include "CanTP.h"

void calculateKeys(uint8_t *Keys, uint8_t *Seeds) {
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
	Keys[0]  = Seeds[0] ^ Seeds[1];
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	4053      	eors	r3, r2
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	701a      	strb	r2, [r3, #0]
	Keys[1]  = Seeds[1] + Seeds[2];
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	7819      	ldrb	r1, [r3, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	3302      	adds	r3, #2
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	440a      	add	r2, r1
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	701a      	strb	r2, [r3, #0]
	Keys[2]  = Seeds[2] ^ Seeds[3];
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	3302      	adds	r3, #2
 8000a94:	7819      	ldrb	r1, [r3, #0]
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	3303      	adds	r3, #3
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3302      	adds	r3, #2
 8000aa0:	404a      	eors	r2, r1
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	701a      	strb	r2, [r3, #0]
	Keys[3]  = Seeds[3] + Seeds[0];
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	3303      	adds	r3, #3
 8000aaa:	7819      	ldrb	r1, [r3, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	781a      	ldrb	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3303      	adds	r3, #3
 8000ab4:	440a      	add	r2, r1
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	701a      	strb	r2, [r3, #0]

	Keys[4]  = Seeds[0] | Seeds[1];
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	7819      	ldrb	r1, [r3, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3304      	adds	r3, #4
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	701a      	strb	r2, [r3, #0]
	Keys[5]  = Seeds[1] + Seeds[2];
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	7819      	ldrb	r1, [r3, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3305      	adds	r3, #5
 8000ade:	440a      	add	r2, r1
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	701a      	strb	r2, [r3, #0]
	Keys[6]  = Seeds[2] | Seeds[3];
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	7819      	ldrb	r1, [r3, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	3303      	adds	r3, #3
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3306      	adds	r3, #6
 8000af4:	430a      	orrs	r2, r1
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	701a      	strb	r2, [r3, #0]
	Keys[7]  = Seeds[3] + Seeds[0];
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	3303      	adds	r3, #3
 8000afe:	7819      	ldrb	r1, [r3, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3307      	adds	r3, #7
 8000b08:	440a      	add	r2, r1
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	701a      	strb	r2, [r3, #0]

	Keys[8]  = Seeds[0] & Seeds[1];
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	7819      	ldrb	r1, [r3, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3308      	adds	r3, #8
 8000b1c:	400a      	ands	r2, r1
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	701a      	strb	r2, [r3, #0]
	Keys[9]  = Seeds[1] + Seeds[2];
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	7819      	ldrb	r1, [r3, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3309      	adds	r3, #9
 8000b32:	440a      	add	r2, r1
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	701a      	strb	r2, [r3, #0]
	Keys[10] = Seeds[2] & Seeds[3];
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	7819      	ldrb	r1, [r3, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	3303      	adds	r3, #3
 8000b42:	781a      	ldrb	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	330a      	adds	r3, #10
 8000b48:	400a      	ands	r2, r1
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	701a      	strb	r2, [r3, #0]
	Keys[11] = Seeds[3] + Seeds[0];
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	3303      	adds	r3, #3
 8000b52:	7819      	ldrb	r1, [r3, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	781a      	ldrb	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	330b      	adds	r3, #11
 8000b5c:	440a      	add	r2, r1
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	701a      	strb	r2, [r3, #0]

	Keys[12] = Seeds[0] - Seeds[1];
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	7819      	ldrb	r1, [r3, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	330c      	adds	r3, #12
 8000b70:	1a8a      	subs	r2, r1, r2
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	701a      	strb	r2, [r3, #0]
	Keys[13] = Seeds[1] + Seeds[2];
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	7819      	ldrb	r1, [r3, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	3302      	adds	r3, #2
 8000b80:	781a      	ldrb	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	330d      	adds	r3, #13
 8000b86:	440a      	add	r2, r1
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	701a      	strb	r2, [r3, #0]
	Keys[14] = Seeds[2] - Seeds[3];
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	3302      	adds	r3, #2
 8000b90:	7819      	ldrb	r1, [r3, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	3303      	adds	r3, #3
 8000b96:	781a      	ldrb	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	330e      	adds	r3, #14
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	701a      	strb	r2, [r3, #0]
	Keys[15] = Seeds[3] + Seeds[0];
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	7819      	ldrb	r1, [r3, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	330f      	adds	r3, #15
 8000bb0:	440a      	add	r2, r1
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	701a      	strb	r2, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <diagnosticService_Init>:

uint8_t diagnosticService_Init() {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
#ifdef TesterNode
	return Tester_Init();
 8000bc4:	f000 f803 	bl	8000bce <Tester_Init>
 8000bc8:	4603      	mov	r3, r0
#elif ECUNode
	return ECU_Init();
#endif
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <Tester_Init>:
#include "main.h"
#include "CanTP.h"
#include <stdio.h>
#include <string.h>

uint8_t Tester_Init() {
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
	HAL_ERR(CanTP_Init(SEND_ID, RECEIVE_ID));
 8000bd4:	f240 7112 	movw	r1, #1810	@ 0x712
 8000bd8:	f240 70a2 	movw	r0, #1954	@ 0x7a2
 8000bdc:	f7ff fab6 	bl	800014c <CanTP_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <Tester_Init+0x22>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	e000      	b.n	8000bf2 <Tester_Init+0x24>
	return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <readDataByID_RequestService>:

uint8_t readDataByID_RequestService(uint16_t DID) {
 8000bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c00:	b08f      	sub	sp, #60	@ 0x3c
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	81fb      	strh	r3, [r7, #14]
 8000c08:	466b      	mov	r3, sp
 8000c0a:	461e      	mov	r6, r3
//	uint8_t request_SID = ReadDataByID_RequestSID;
	uint8_t 	send_buffer[3];
	uint16_t 	receive_length = 20;
 8000c0c:	2314      	movs	r3, #20
 8000c0e:	82fb      	strh	r3, [r7, #22]
	uint8_t 	receive_buffer[receive_length];
 8000c10:	8af9      	ldrh	r1, [r7, #22]
 8000c12:	460b      	mov	r3, r1
 8000c14:	3b01      	subs	r3, #1
 8000c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c18:	b28b      	uxth	r3, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	f04f 0200 	mov.w	r2, #0
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	00c3      	lsls	r3, r0, #3
 8000c2c:	6838      	ldr	r0, [r7, #0]
 8000c2e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c32:	6838      	ldr	r0, [r7, #0]
 8000c34:	00c2      	lsls	r2, r0, #3
 8000c36:	b28b      	uxth	r3, r1
 8000c38:	2200      	movs	r2, #0
 8000c3a:	469a      	mov	sl, r3
 8000c3c:	4693      	mov	fp, r2
 8000c3e:	f04f 0200 	mov.w	r2, #0
 8000c42:	f04f 0300 	mov.w	r3, #0
 8000c46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000c4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000c4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000c52:	460b      	mov	r3, r1
 8000c54:	3307      	adds	r3, #7
 8000c56:	08db      	lsrs	r3, r3, #3
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	ebad 0d03 	sub.w	sp, sp, r3
 8000c5e:	466b      	mov	r3, sp
 8000c60:	3300      	adds	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	@ 0x30

	send_buffer[0] = ReadDataByID_RequestSID;
 8000c64:	2322      	movs	r3, #34	@ 0x22
 8000c66:	763b      	strb	r3, [r7, #24]
	send_buffer[1] = DID >> 8;
 8000c68:	89fb      	ldrh	r3, [r7, #14]
 8000c6a:	0a1b      	lsrs	r3, r3, #8
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	767b      	strb	r3, [r7, #25]
	send_buffer[2] = DID & 0xFF;
 8000c72:	89fb      	ldrh	r3, [r7, #14]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	76bb      	strb	r3, [r7, #26]
//	isotp_send(&CanTP, SendBuff, 3);
	HAL_ERR(CanTP_Transmit(send_buffer, 3));
 8000c78:	f107 0318 	add.w	r3, r7, #24
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fab6 	bl	80001f0 <CanTP_Transmit>
 8000c84:	4603      	mov	r3, r0
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <readDataByID_RequestService+0x98>
 8000c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	e05d      	b.n	8000d50 <readDataByID_RequestService+0x154>

	HAL_ERR(CanTP_Receive(receive_buffer, &receive_length, 500));
 8000c94:	f107 0316 	add.w	r3, r7, #22
 8000c98:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ca0:	f7ff fad8 	bl	8000254 <CanTP_Receive>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <readDataByID_RequestService+0xb8>
 8000cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	e04d      	b.n	8000d50 <readDataByID_RequestService+0x154>
	//uint16_t RespDID = RecvBuff[1] << 8 | (Rec)
	uint8_t response_SID = receive_buffer[0];
 8000cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (response_SID == Get_Positive_RespID(ReadDataByID_RequestSID)
 8000cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cc0:	2b62      	cmp	r3, #98	@ 0x62
 8000cc2:	d141      	bne.n	8000d48 <readDataByID_RequestService+0x14c>
			&&
		DID == Get_Recv_DID(receive_buffer[1], receive_buffer[2])
 8000cc4:	89fa      	ldrh	r2, [r7, #14]
 8000cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cc8:	785b      	ldrb	r3, [r3, #1]
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000cce:	7889      	ldrb	r1, [r1, #2]
 8000cd0:	430b      	orrs	r3, r1
			&&
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d138      	bne.n	8000d48 <readDataByID_RequestService+0x14c>
	){
 8000cd6:	466b      	mov	r3, sp
 8000cd8:	469a      	mov	sl, r3
		uint16_t read_data_length = receive_length - 3;
 8000cda:	8afb      	ldrh	r3, [r7, #22]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	84bb      	strh	r3, [r7, #36]	@ 0x24
		uint8_t read_data_buffer[read_data_length];
 8000ce0:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	623b      	str	r3, [r7, #32]
 8000ce8:	b28b      	uxth	r3, r1
 8000cea:	2200      	movs	r2, #0
 8000cec:	4698      	mov	r8, r3
 8000cee:	4691      	mov	r9, r2
 8000cf0:	f04f 0200 	mov.w	r2, #0
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d04:	b28b      	uxth	r3, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	461c      	mov	r4, r3
 8000d0a:	4615      	mov	r5, r2
 8000d0c:	f04f 0200 	mov.w	r2, #0
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	00eb      	lsls	r3, r5, #3
 8000d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d1a:	00e2      	lsls	r2, r4, #3
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	3307      	adds	r3, #7
 8000d20:	08db      	lsrs	r3, r3, #3
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	ebad 0d03 	sub.w	sp, sp, r3
 8000d28:	466b      	mov	r3, sp
 8000d2a:	3300      	adds	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
		memcpy(read_data_buffer, receive_buffer + 3, read_data_length);
 8000d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d30:	3303      	adds	r3, #3
 8000d32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	69f8      	ldr	r0, [r7, #28]
 8000d38:	f002 ffcf 	bl	8003cda <memcpy>
		printf("Read Data Success\r\n");
 8000d3c:	4807      	ldr	r0, [pc, #28]	@ (8000d5c <readDataByID_RequestService+0x160>)
 8000d3e:	f002 fe51 	bl	80039e4 <puts>
		return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	46d5      	mov	sp, sl
 8000d46:	e003      	b.n	8000d50 <readDataByID_RequestService+0x154>
	}
	printf("Read Data Failed\r\n");
 8000d48:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <readDataByID_RequestService+0x164>)
 8000d4a:	f002 fe4b 	bl	80039e4 <puts>
	return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	46b5      	mov	sp, r6

}
 8000d52:	4618      	mov	r0, r3
 8000d54:	373c      	adds	r7, #60	@ 0x3c
 8000d56:	46bd      	mov	sp, r7
 8000d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d5c:	08004b18 	.word	0x08004b18
 8000d60:	08004b2c 	.word	0x08004b2c

08000d64 <writeDataByID_RequestService>:

uint8_t writeDataByID_RequestService(uint16_t DID, uint8_t *data, uint8_t length) {
 8000d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d68:	b08d      	sub	sp, #52	@ 0x34
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	81fb      	strh	r3, [r7, #14]
 8000d72:	4613      	mov	r3, r2
 8000d74:	737b      	strb	r3, [r7, #13]
 8000d76:	466b      	mov	r3, sp
 8000d78:	461e      	mov	r6, r3
	uint8_t 	send_buffer[length + 3];
 8000d7a:	7b7b      	ldrb	r3, [r7, #13]
 8000d7c:	1cd9      	adds	r1, r3, #3
 8000d7e:	1e4b      	subs	r3, r1, #1
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d82:	460a      	mov	r2, r1
 8000d84:	2300      	movs	r3, #0
 8000d86:	603a      	str	r2, [r7, #0]
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	00c3      	lsls	r3, r0, #3
 8000d96:	6838      	ldr	r0, [r7, #0]
 8000d98:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d9c:	6838      	ldr	r0, [r7, #0]
 8000d9e:	00c2      	lsls	r2, r0, #3
 8000da0:	460a      	mov	r2, r1
 8000da2:	2300      	movs	r3, #0
 8000da4:	4692      	mov	sl, r2
 8000da6:	469b      	mov	fp, r3
 8000da8:	f04f 0200 	mov.w	r2, #0
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000db4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000db8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	3307      	adds	r3, #7
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	ebad 0d03 	sub.w	sp, sp, r3
 8000dc8:	466b      	mov	r3, sp
 8000dca:	3300      	adds	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t 	receive_length = 20;
 8000dce:	2314      	movs	r3, #20
 8000dd0:	82bb      	strh	r3, [r7, #20]
	uint8_t 	receive_buffer[receive_length];
 8000dd2:	8ab9      	ldrh	r1, [r7, #20]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dda:	b28b      	uxth	r3, r1
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4698      	mov	r8, r3
 8000de0:	4691      	mov	r9, r2
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000df6:	b28b      	uxth	r3, r1
 8000df8:	2200      	movs	r2, #0
 8000dfa:	461c      	mov	r4, r3
 8000dfc:	4615      	mov	r5, r2
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	00eb      	lsls	r3, r5, #3
 8000e08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e0c:	00e2      	lsls	r2, r4, #3
 8000e0e:	460b      	mov	r3, r1
 8000e10:	3307      	adds	r3, #7
 8000e12:	08db      	lsrs	r3, r3, #3
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	ebad 0d03 	sub.w	sp, sp, r3
 8000e1a:	466b      	mov	r3, sp
 8000e1c:	3300      	adds	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]

	send_buffer[0] = WriteDataByID_RequestSID;
 8000e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e22:	222e      	movs	r2, #46	@ 0x2e
 8000e24:	701a      	strb	r2, [r3, #0]
	send_buffer[1] = DID >> 8;
 8000e26:	89fb      	ldrh	r3, [r7, #14]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e30:	705a      	strb	r2, [r3, #1]
	send_buffer[2] = DID & 0xFF;
 8000e32:	89fb      	ldrh	r3, [r7, #14]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e38:	709a      	strb	r2, [r3, #2]
	memcpy(send_buffer + 3, data, length);
 8000e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e3c:	3303      	adds	r3, #3
 8000e3e:	7b7a      	ldrb	r2, [r7, #13]
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 ff49 	bl	8003cda <memcpy>
	//	isotp_send(&CanTP, SendBuff, 3);
	HAL_ERR(CanTP_Transmit(send_buffer, length + 3));
 8000e48:	7b7b      	ldrb	r3, [r7, #13]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	3303      	adds	r3, #3
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	4619      	mov	r1, r3
 8000e52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000e54:	f7ff f9cc 	bl	80001f0 <CanTP_Transmit>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <writeDataByID_RequestService+0x104>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	e01e      	b.n	8000ea6 <writeDataByID_RequestService+0x142>

	HAL_ERR(CanTP_Receive(receive_buffer, &receive_length, 500));
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e70:	4619      	mov	r1, r3
 8000e72:	6a38      	ldr	r0, [r7, #32]
 8000e74:	f7ff f9ee 	bl	8000254 <CanTP_Receive>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d002      	beq.n	8000e88 <writeDataByID_RequestService+0x124>
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	e00e      	b.n	8000ea6 <writeDataByID_RequestService+0x142>
	uint8_t response_SID = receive_buffer[0];
 8000e88:	6a3b      	ldr	r3, [r7, #32]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	75fb      	strb	r3, [r7, #23]
	if (response_SID == Get_Positive_RespID(WriteDataByID_RequestSID)) {
 8000e8e:	7dfb      	ldrb	r3, [r7, #23]
 8000e90:	2b6e      	cmp	r3, #110	@ 0x6e
 8000e92:	d104      	bne.n	8000e9e <writeDataByID_RequestService+0x13a>
		printf("Write Data Success\r\n");
 8000e94:	4807      	ldr	r0, [pc, #28]	@ (8000eb4 <writeDataByID_RequestService+0x150>)
 8000e96:	f002 fda5 	bl	80039e4 <puts>
		return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e003      	b.n	8000ea6 <writeDataByID_RequestService+0x142>
	}
	printf("Write Data Failed\r\n");
 8000e9e:	4806      	ldr	r0, [pc, #24]	@ (8000eb8 <writeDataByID_RequestService+0x154>)
 8000ea0:	f002 fda0 	bl	80039e4 <puts>
	return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	46b5      	mov	sp, r6
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3734      	adds	r7, #52	@ 0x34
 8000eac:	46bd      	mov	sp, r7
 8000eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000eb2:	bf00      	nop
 8000eb4:	08004b40 	.word	0x08004b40
 8000eb8:	08004b54 	.word	0x08004b54

08000ebc <securityAccess_RequestService>:

uint8_t securityAccess_RequestService() {
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b096      	sub	sp, #88	@ 0x58
 8000ec0:	af00      	add	r7, sp, #0
	uint8_t req_seeds_buff[] = { SecurityAccess_RequestSID, SecurityAccess_ReqSeedID };
 8000ec2:	f240 1327 	movw	r3, #295	@ 0x127
 8000ec6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	uint8_t resp_seeds_buff[6];
	uint8_t resp_seeds_length = 6;
 8000eca:	2306      	movs	r3, #6
 8000ecc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	HAL_ERR(CanTP_Transmit(req_seeds_buff, 2));
 8000ed0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff f98a 	bl	80001f0 <CanTP_Transmit>
 8000edc:	4603      	mov	r3, r0
 8000ede:	657b      	str	r3, [r7, #84]	@ 0x54
 8000ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <securityAccess_RequestService+0x30>
 8000ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	e07b      	b.n	8000fe4 <securityAccess_RequestService+0x128>

	HAL_ERR(CanTP_Receive(resp_seeds_buff, &resp_seeds_length, 500));
 8000eec:	f107 0137 	add.w	r1, r7, #55	@ 0x37
 8000ef0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ef4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff f9ab 	bl	8000254 <CanTP_Receive>
 8000efe:	4603      	mov	r3, r0
 8000f00:	653b      	str	r3, [r7, #80]	@ 0x50
 8000f02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d002      	beq.n	8000f0e <securityAccess_RequestService+0x52>
 8000f08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	e06a      	b.n	8000fe4 <securityAccess_RequestService+0x128>
	uint8_t RespSID = resp_seeds_buff[0];
 8000f0e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000f12:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	uint8_t RespSF = resp_seeds_buff[1];
 8000f16:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000f1a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	if (RespSID != Get_Positive_RespID(SecurityAccess_RequestSID)
 8000f1e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000f22:	2b67      	cmp	r3, #103	@ 0x67
 8000f24:	d103      	bne.n	8000f2e <securityAccess_RequestService+0x72>
			|| RespSF != SecurityAccess_ReqSeedID) {
 8000f26:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d007      	beq.n	8000f3e <securityAccess_RequestService+0x82>
		printf("Security Access request Seeds error: %d",resp_seeds_buff[2]);
 8000f2e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000f32:	4619      	mov	r1, r3
 8000f34:	482d      	ldr	r0, [pc, #180]	@ (8000fec <securityAccess_RequestService+0x130>)
 8000f36:	f002 fced 	bl	8003914 <iprintf>
		return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e052      	b.n	8000fe4 <securityAccess_RequestService+0x128>
	}
	uint8_t Seeds[4];
	memcpy(Seeds, resp_seeds_buff + 2, 4);
 8000f3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f42:	3302      	adds	r3, #2
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	633b      	str	r3, [r7, #48]	@ 0x30
	uint8_t Keys[16];
	calculateKeys(Keys, Seeds);
 8000f48:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	4611      	mov	r1, r2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fd83 	bl	8000a5e <calculateKeys>

	uint8_t SendKeysBuff[18];
	SendKeysBuff[0] = SecurityAccess_RequestSID;
 8000f58:	2327      	movs	r3, #39	@ 0x27
 8000f5a:	733b      	strb	r3, [r7, #12]
	SendKeysBuff[1] = SecurityAccess_SendKeyID;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	737b      	strb	r3, [r7, #13]
	uint8_t RespCheckKeysBuff[3];
	uint8_t RespCheckKeyLen = 3;
 8000f60:	2303      	movs	r3, #3
 8000f62:	71fb      	strb	r3, [r7, #7]
	memcpy(SendKeysBuff + 2,Keys,16);
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	3302      	adds	r3, #2
 8000f6a:	461d      	mov	r5, r3
 8000f6c:	f107 0420 	add.w	r4, r7, #32
 8000f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f72:	6028      	str	r0, [r5, #0]
 8000f74:	6069      	str	r1, [r5, #4]
 8000f76:	60aa      	str	r2, [r5, #8]
 8000f78:	60eb      	str	r3, [r5, #12]

	HAL_ERR(CanTP_Transmit(SendKeysBuff,18));
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	2112      	movs	r1, #18
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff f935 	bl	80001f0 <CanTP_Transmit>
 8000f86:	4603      	mov	r3, r0
 8000f88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <securityAccess_RequestService+0xda>
 8000f90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	e026      	b.n	8000fe4 <securityAccess_RequestService+0x128>

	HAL_ERR(CanTP_Receive(RespCheckKeysBuff, &RespCheckKeyLen, 500));
 8000f96:	1df9      	adds	r1, r7, #7
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff f957 	bl	8000254 <CanTP_Receive>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8000faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <securityAccess_RequestService+0xfa>
 8000fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	e016      	b.n	8000fe4 <securityAccess_RequestService+0x128>
	RespSID = RespCheckKeysBuff[0];
 8000fb6:	7a3b      	ldrb	r3, [r7, #8]
 8000fb8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	RespSF = RespCheckKeysBuff[1];
 8000fbc:	7a7b      	ldrb	r3, [r7, #9]
 8000fbe:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	if (RespSID == Get_Positive_RespID(SecurityAccess_RequestSID)
 8000fc2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000fc6:	2b67      	cmp	r3, #103	@ 0x67
 8000fc8:	d108      	bne.n	8000fdc <securityAccess_RequestService+0x120>
			&&
 8000fca:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d104      	bne.n	8000fdc <securityAccess_RequestService+0x120>
		RespSF == SecurityAccess_SendKeyID) {
		printf("Security Access Success\r\n");
 8000fd2:	4807      	ldr	r0, [pc, #28]	@ (8000ff0 <securityAccess_RequestService+0x134>)
 8000fd4:	f002 fd06 	bl	80039e4 <puts>
		return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e003      	b.n	8000fe4 <securityAccess_RequestService+0x128>
	}
	printf("Security Access Failed\r\n");
 8000fdc:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <securityAccess_RequestService+0x138>)
 8000fde:	f002 fd01 	bl	80039e4 <puts>
	return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3758      	adds	r7, #88	@ 0x58
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bdb0      	pop	{r4, r5, r7, pc}
 8000fec:	08004b68 	.word	0x08004b68
 8000ff0:	08004b90 	.word	0x08004b90
 8000ff4:	08004bac 	.word	0x08004bac

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <HAL_Init+0x28>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a07      	ldr	r2, [pc, #28]	@ (8001020 <HAL_Init+0x28>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001008:	2003      	movs	r0, #3
 800100a:	f000 ffbb 	bl	8001f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100e:	200f      	movs	r0, #15
 8001010:	f000 f808 	bl	8001024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001014:	f7ff fb3a 	bl	800068c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40022000 	.word	0x40022000

08001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <HAL_InitTick+0x54>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <HAL_InitTick+0x58>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 ffd3 	bl	8001fee <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00e      	b.n	8001070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d80a      	bhi.n	800106e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f000 ff9b 	bl	8001f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001064:	4a06      	ldr	r2, [pc, #24]	@ (8001080 <HAL_InitTick+0x5c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000000 	.word	0x20000000
 800107c:	20000008 	.word	0x20000008
 8001080:	20000004 	.word	0x20000004

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <HAL_IncTick+0x1c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <HAL_IncTick+0x20>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a03      	ldr	r2, [pc, #12]	@ (80010a4 <HAL_IncTick+0x20>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000200 	.word	0x20000200

080010a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b02      	ldr	r3, [pc, #8]	@ (80010b8 <HAL_GetTick+0x10>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	20000200 	.word	0x20000200

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff fff0 	bl	80010a8 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <HAL_Delay+0x44>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e2:	bf00      	nop
 80010e4:	f7ff ffe0 	bl	80010a8 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008

08001104 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e0ed      	b.n	80012f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff f944 	bl	80003b0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0201 	orr.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001138:	f7ff ffb6 	bl	80010a8 <HAL_GetTick>
 800113c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800113e:	e012      	b.n	8001166 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001140:	f7ff ffb2 	bl	80010a8 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b0a      	cmp	r3, #10
 800114c:	d90b      	bls.n	8001166 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001152:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2205      	movs	r2, #5
 800115e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e0c5      	b.n	80012f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0e5      	beq.n	8001140 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0202 	bic.w	r2, r2, #2
 8001182:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001184:	f7ff ff90 	bl	80010a8 <HAL_GetTick>
 8001188:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800118a:	e012      	b.n	80011b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800118c:	f7ff ff8c 	bl	80010a8 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b0a      	cmp	r3, #10
 8001198:	d90b      	bls.n	80011b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2205      	movs	r2, #5
 80011aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e09f      	b.n	80012f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1e5      	bne.n	800118c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7e1b      	ldrb	r3, [r3, #24]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d108      	bne.n	80011da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e007      	b.n	80011ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7e5b      	ldrb	r3, [r3, #25]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d108      	bne.n	8001204 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e007      	b.n	8001214 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001212:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7e9b      	ldrb	r3, [r3, #26]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d108      	bne.n	800122e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0220 	orr.w	r2, r2, #32
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	e007      	b.n	800123e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0220 	bic.w	r2, r2, #32
 800123c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7edb      	ldrb	r3, [r3, #27]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d108      	bne.n	8001258 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 0210 	bic.w	r2, r2, #16
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	e007      	b.n	8001268 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0210 	orr.w	r2, r2, #16
 8001266:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7f1b      	ldrb	r3, [r3, #28]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d108      	bne.n	8001282 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0208 	orr.w	r2, r2, #8
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e007      	b.n	8001292 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0208 	bic.w	r2, r2, #8
 8001290:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7f5b      	ldrb	r3, [r3, #29]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d108      	bne.n	80012ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 0204 	orr.w	r2, r2, #4
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e007      	b.n	80012bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0204 	bic.w	r2, r2, #4
 80012ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	ea42 0103 	orr.w	r1, r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	1e5a      	subs	r2, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b087      	sub	sp, #28
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001310:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001312:	7cfb      	ldrb	r3, [r7, #19]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d003      	beq.n	8001320 <HAL_CAN_ConfigFilter+0x26>
 8001318:	7cfb      	ldrb	r3, [r7, #19]
 800131a:	2b02      	cmp	r3, #2
 800131c:	f040 80aa 	bne.w	8001474 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001326:	f043 0201 	orr.w	r2, r3, #1
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	f003 031f 	and.w	r3, r3, #31
 8001338:	2201      	movs	r2, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43db      	mvns	r3, r3
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d123      	bne.n	80013a2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43db      	mvns	r3, r3
 8001364:	401a      	ands	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800137c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3248      	adds	r2, #72	@ 0x48
 8001382:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001396:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001398:	6979      	ldr	r1, [r7, #20]
 800139a:	3348      	adds	r3, #72	@ 0x48
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	440b      	add	r3, r1
 80013a0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d122      	bne.n	80013f0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3248      	adds	r2, #72	@ 0x48
 80013d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013e6:	6979      	ldr	r1, [r7, #20]
 80013e8:	3348      	adds	r3, #72	@ 0x48
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	440b      	add	r3, r1
 80013ee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d109      	bne.n	800140c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800140a:	e007      	b.n	800141c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	431a      	orrs	r2, r3
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d109      	bne.n	8001438 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43db      	mvns	r3, r3
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001436:	e007      	b.n	8001448 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	431a      	orrs	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d107      	bne.n	8001460 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	431a      	orrs	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001466:	f023 0201 	bic.w	r2, r3, #1
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	e006      	b.n	8001482 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001478:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
  }
}
 8001482:	4618      	mov	r0, r3
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b01      	cmp	r3, #1
 800149e:	d12e      	bne.n	80014fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2202      	movs	r2, #2
 80014a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0201 	bic.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014b8:	f7ff fdf6 	bl	80010a8 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014be:	e012      	b.n	80014e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014c0:	f7ff fdf2 	bl	80010a8 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b0a      	cmp	r3, #10
 80014cc:	d90b      	bls.n	80014e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2205      	movs	r2, #5
 80014de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e012      	b.n	800150c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1e5      	bne.n	80014c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e006      	b.n	800150c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001502:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
  }
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	@ 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001528:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001532:	7ffb      	ldrb	r3, [r7, #31]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d003      	beq.n	8001540 <HAL_CAN_AddTxMessage+0x2c>
 8001538:	7ffb      	ldrb	r3, [r7, #31]
 800153a:	2b02      	cmp	r3, #2
 800153c:	f040 80ad 	bne.w	800169a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10a      	bne.n	8001560 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001550:	2b00      	cmp	r3, #0
 8001552:	d105      	bne.n	8001560 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8095 	beq.w	800168a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	0e1b      	lsrs	r3, r3, #24
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800156a:	2201      	movs	r2, #1
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10d      	bne.n	8001598 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001586:	68f9      	ldr	r1, [r7, #12]
 8001588:	6809      	ldr	r1, [r1, #0]
 800158a:	431a      	orrs	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3318      	adds	r3, #24
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	440b      	add	r3, r1
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e00f      	b.n	80015b8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015a2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015a8:	68f9      	ldr	r1, [r7, #12]
 80015aa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80015ac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3318      	adds	r3, #24
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	440b      	add	r3, r1
 80015b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6819      	ldr	r1, [r3, #0]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3318      	adds	r3, #24
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	440b      	add	r3, r1
 80015c8:	3304      	adds	r3, #4
 80015ca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	7d1b      	ldrb	r3, [r3, #20]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d111      	bne.n	80015f8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3318      	adds	r3, #24
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	4413      	add	r3, r2
 80015e0:	3304      	adds	r3, #4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	6811      	ldr	r1, [r2, #0]
 80015e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3318      	adds	r3, #24
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	440b      	add	r3, r1
 80015f4:	3304      	adds	r3, #4
 80015f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3307      	adds	r3, #7
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	061a      	lsls	r2, r3, #24
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3306      	adds	r3, #6
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	041b      	lsls	r3, r3, #16
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3305      	adds	r3, #5
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	4313      	orrs	r3, r2
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	3204      	adds	r2, #4
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	4610      	mov	r0, r2
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	6811      	ldr	r1, [r2, #0]
 8001620:	ea43 0200 	orr.w	r2, r3, r0
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	440b      	add	r3, r1
 800162a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800162e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3303      	adds	r3, #3
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	061a      	lsls	r2, r3, #24
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3302      	adds	r3, #2
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	041b      	lsls	r3, r3, #16
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3301      	adds	r3, #1
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	4313      	orrs	r3, r2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	7812      	ldrb	r2, [r2, #0]
 8001650:	4610      	mov	r0, r2
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	6811      	ldr	r1, [r2, #0]
 8001656:	ea43 0200 	orr.w	r2, r3, r0
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	440b      	add	r3, r1
 8001660:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001664:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3318      	adds	r3, #24
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	4413      	add	r3, r2
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	6811      	ldr	r1, [r2, #0]
 8001678:	f043 0201 	orr.w	r2, r3, #1
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3318      	adds	r3, #24
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	440b      	add	r3, r1
 8001684:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e00e      	b.n	80016a8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e006      	b.n	80016a8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
  }
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3724      	adds	r7, #36	@ 0x24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80016c6:	7afb      	ldrb	r3, [r7, #11]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d002      	beq.n	80016d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80016cc:	7afb      	ldrb	r3, [r7, #11]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d11d      	bne.n	800170e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3301      	adds	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3301      	adds	r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	3301      	adds	r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800171a:	b480      	push	{r7}
 800171c:	b087      	sub	sp, #28
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d003      	beq.n	800173e <HAL_CAN_GetRxMessage+0x24>
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	2b02      	cmp	r3, #2
 800173a:	f040 8103 	bne.w	8001944 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10e      	bne.n	8001762 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d116      	bne.n	8001780 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001756:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e0f7      	b.n	8001952 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d107      	bne.n	8001780 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001774:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0e8      	b.n	8001952 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	331b      	adds	r3, #27
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4413      	add	r3, r2
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0204 	and.w	r2, r3, #4
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10c      	bne.n	80017b8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	331b      	adds	r3, #27
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	4413      	add	r3, r2
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0d5b      	lsrs	r3, r3, #21
 80017ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	e00b      	b.n	80017d0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	331b      	adds	r3, #27
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	4413      	add	r3, r2
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	08db      	lsrs	r3, r3, #3
 80017c8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	331b      	adds	r3, #27
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	4413      	add	r3, r2
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0202 	and.w	r2, r3, #2
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	331b      	adds	r3, #27
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	4413      	add	r3, r2
 80017f2:	3304      	adds	r3, #4
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2208      	movs	r2, #8
 8001802:	611a      	str	r2, [r3, #16]
 8001804:	e00b      	b.n	800181e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	331b      	adds	r3, #27
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	4413      	add	r3, r2
 8001812:	3304      	adds	r3, #4
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 020f 	and.w	r2, r3, #15
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	331b      	adds	r3, #27
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	4413      	add	r3, r2
 800182a:	3304      	adds	r3, #4
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	b2da      	uxtb	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	331b      	adds	r3, #27
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	4413      	add	r3, r2
 8001842:	3304      	adds	r3, #4
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	0c1b      	lsrs	r3, r3, #16
 8001848:	b29a      	uxth	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	4413      	add	r3, r2
 8001858:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	4413      	add	r3, r2
 800186e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	0a1a      	lsrs	r2, r3, #8
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	4413      	add	r3, r2
 8001888:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	0c1a      	lsrs	r2, r3, #16
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	3302      	adds	r3, #2
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	4413      	add	r3, r2
 80018a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0e1a      	lsrs	r2, r3, #24
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	3303      	adds	r3, #3
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	4413      	add	r3, r2
 80018bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	3304      	adds	r3, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	0a1a      	lsrs	r2, r3, #8
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	3305      	adds	r3, #5
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0c1a      	lsrs	r2, r3, #16
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	3306      	adds	r3, #6
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	4413      	add	r3, r2
 8001908:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	0e1a      	lsrs	r2, r3, #24
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	3307      	adds	r3, #7
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d108      	bne.n	8001930 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0220 	orr.w	r2, r2, #32
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	e007      	b.n	8001940 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0220 	orr.w	r2, r2, #32
 800193e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	e006      	b.n	8001952 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001948:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
  }
}
 8001952:	4618      	mov	r0, r3
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d002      	beq.n	800197a <HAL_CAN_ActivateNotification+0x1e>
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d109      	bne.n	800198e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6959      	ldr	r1, [r3, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e006      	b.n	800199c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
  }
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b08a      	sub	sp, #40	@ 0x28
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d07c      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d023      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2201      	movs	r2, #1
 80019fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f983 	bl	8001d14 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a0e:	e016      	b.n	8001a3e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a22:	e00c      	b.n	8001a3e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a36:	e002      	b.n	8001a3e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f986 	bl	8001d4a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d024      	beq.n	8001a92 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f962 	bl	8001d26 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a62:	e016      	b.n	8001a92 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a76:	e00c      	b.n	8001a92 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a8a:	e002      	b.n	8001a92 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f965 	bl	8001d5c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d024      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001aa4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f941 	bl	8001d38 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ab6:	e016      	b.n	8001ae6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d004      	beq.n	8001acc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aca:	e00c      	b.n	8001ae6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ade:	e002      	b.n	8001ae6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f944 	bl	8001d6e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00c      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d007      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2210      	movs	r2, #16
 8001b08:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00b      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2208      	movs	r2, #8
 8001b24:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f92a 	bl	8001d80 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d009      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7fe fd89 	bl	800065c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00c      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f003 0320 	and.w	r3, r3, #32
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00b      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2208      	movs	r2, #8
 8001b88:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f90a 	bl	8001da4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f8f2 	bl	8001d92 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00b      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2210      	movs	r2, #16
 8001bc8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f8f3 	bl	8001db6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2208      	movs	r2, #8
 8001bea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f8eb 	bl	8001dc8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d07b      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d072      	beq.n	8001cec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d043      	beq.n	8001cec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d03e      	beq.n	8001cec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c74:	2b60      	cmp	r3, #96	@ 0x60
 8001c76:	d02b      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0x32a>
 8001c78:	2b60      	cmp	r3, #96	@ 0x60
 8001c7a:	d82e      	bhi.n	8001cda <HAL_CAN_IRQHandler+0x334>
 8001c7c:	2b50      	cmp	r3, #80	@ 0x50
 8001c7e:	d022      	beq.n	8001cc6 <HAL_CAN_IRQHandler+0x320>
 8001c80:	2b50      	cmp	r3, #80	@ 0x50
 8001c82:	d82a      	bhi.n	8001cda <HAL_CAN_IRQHandler+0x334>
 8001c84:	2b40      	cmp	r3, #64	@ 0x40
 8001c86:	d019      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x316>
 8001c88:	2b40      	cmp	r3, #64	@ 0x40
 8001c8a:	d826      	bhi.n	8001cda <HAL_CAN_IRQHandler+0x334>
 8001c8c:	2b30      	cmp	r3, #48	@ 0x30
 8001c8e:	d010      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x30c>
 8001c90:	2b30      	cmp	r3, #48	@ 0x30
 8001c92:	d822      	bhi.n	8001cda <HAL_CAN_IRQHandler+0x334>
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	d002      	beq.n	8001c9e <HAL_CAN_IRQHandler+0x2f8>
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d005      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c9c:	e01d      	b.n	8001cda <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ca6:	e019      	b.n	8001cdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	f043 0310 	orr.w	r3, r3, #16
 8001cae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cb0:	e014      	b.n	8001cdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	f043 0320 	orr.w	r3, r3, #32
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cba:	e00f      	b.n	8001cdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cc4:	e00a      	b.n	8001cdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cce:	e005      	b.n	8001cdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001cd8:	e000      	b.n	8001cdc <HAL_CAN_IRQHandler+0x336>
            break;
 8001cda:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001cea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f867 	bl	8001dda <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3728      	adds	r7, #40	@ 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr

08001d6e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1e:	4a04      	ldr	r2, [pc, #16]	@ (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	60d3      	str	r3, [r2, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e38:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <__NVIC_GetPriorityGrouping+0x18>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f003 0307 	and.w	r3, r3, #7
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	db0b      	blt.n	8001e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	4906      	ldr	r1, [pc, #24]	@ (8001e84 <__NVIC_EnableIRQ+0x34>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	2001      	movs	r0, #1
 8001e72:	fa00 f202 	lsl.w	r2, r0, r2
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100

08001e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db0a      	blt.n	8001eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	490c      	ldr	r1, [pc, #48]	@ (8001ed4 <__NVIC_SetPriority+0x4c>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb0:	e00a      	b.n	8001ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4908      	ldr	r1, [pc, #32]	@ (8001ed8 <__NVIC_SetPriority+0x50>)
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	3b04      	subs	r3, #4
 8001ec0:	0112      	lsls	r2, r2, #4
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	761a      	strb	r2, [r3, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000e100 	.word	0xe000e100
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	@ 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f1c3 0307 	rsb	r3, r3, #7
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	bf28      	it	cs
 8001efa:	2304      	movcs	r3, #4
 8001efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3304      	adds	r3, #4
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d902      	bls.n	8001f0c <NVIC_EncodePriority+0x30>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3b03      	subs	r3, #3
 8001f0a:	e000      	b.n	8001f0e <NVIC_EncodePriority+0x32>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	f04f 32ff 	mov.w	r2, #4294967295
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	401a      	ands	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	43d9      	mvns	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	4313      	orrs	r3, r2
         );
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	@ 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f50:	d301      	bcc.n	8001f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00f      	b.n	8001f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f56:	4a0a      	ldr	r2, [pc, #40]	@ (8001f80 <SysTick_Config+0x40>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5e:	210f      	movs	r1, #15
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f7ff ff90 	bl	8001e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f68:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <SysTick_Config+0x40>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6e:	4b04      	ldr	r3, [pc, #16]	@ (8001f80 <SysTick_Config+0x40>)
 8001f70:	2207      	movs	r2, #7
 8001f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	e000e010 	.word	0xe000e010

08001f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ff2d 	bl	8001dec <__NVIC_SetPriorityGrouping>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fac:	f7ff ff42 	bl	8001e34 <__NVIC_GetPriorityGrouping>
 8001fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f7ff ff90 	bl	8001edc <NVIC_EncodePriority>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff5f 	bl	8001e88 <__NVIC_SetPriority>
}
 8001fca:	bf00      	nop
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff35 	bl	8001e50 <__NVIC_EnableIRQ>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ffa2 	bl	8001f40 <SysTick_Config>
 8001ffc:	4603      	mov	r3, r0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002008:	b480      	push	{r7}
 800200a:	b08b      	sub	sp, #44	@ 0x2c
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201a:	e169      	b.n	80022f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800201c:	2201      	movs	r2, #1
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	429a      	cmp	r2, r3
 8002036:	f040 8158 	bne.w	80022ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4a9a      	ldr	r2, [pc, #616]	@ (80022a8 <HAL_GPIO_Init+0x2a0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d05e      	beq.n	8002102 <HAL_GPIO_Init+0xfa>
 8002044:	4a98      	ldr	r2, [pc, #608]	@ (80022a8 <HAL_GPIO_Init+0x2a0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d875      	bhi.n	8002136 <HAL_GPIO_Init+0x12e>
 800204a:	4a98      	ldr	r2, [pc, #608]	@ (80022ac <HAL_GPIO_Init+0x2a4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d058      	beq.n	8002102 <HAL_GPIO_Init+0xfa>
 8002050:	4a96      	ldr	r2, [pc, #600]	@ (80022ac <HAL_GPIO_Init+0x2a4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d86f      	bhi.n	8002136 <HAL_GPIO_Init+0x12e>
 8002056:	4a96      	ldr	r2, [pc, #600]	@ (80022b0 <HAL_GPIO_Init+0x2a8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d052      	beq.n	8002102 <HAL_GPIO_Init+0xfa>
 800205c:	4a94      	ldr	r2, [pc, #592]	@ (80022b0 <HAL_GPIO_Init+0x2a8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d869      	bhi.n	8002136 <HAL_GPIO_Init+0x12e>
 8002062:	4a94      	ldr	r2, [pc, #592]	@ (80022b4 <HAL_GPIO_Init+0x2ac>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d04c      	beq.n	8002102 <HAL_GPIO_Init+0xfa>
 8002068:	4a92      	ldr	r2, [pc, #584]	@ (80022b4 <HAL_GPIO_Init+0x2ac>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d863      	bhi.n	8002136 <HAL_GPIO_Init+0x12e>
 800206e:	4a92      	ldr	r2, [pc, #584]	@ (80022b8 <HAL_GPIO_Init+0x2b0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d046      	beq.n	8002102 <HAL_GPIO_Init+0xfa>
 8002074:	4a90      	ldr	r2, [pc, #576]	@ (80022b8 <HAL_GPIO_Init+0x2b0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d85d      	bhi.n	8002136 <HAL_GPIO_Init+0x12e>
 800207a:	2b12      	cmp	r3, #18
 800207c:	d82a      	bhi.n	80020d4 <HAL_GPIO_Init+0xcc>
 800207e:	2b12      	cmp	r3, #18
 8002080:	d859      	bhi.n	8002136 <HAL_GPIO_Init+0x12e>
 8002082:	a201      	add	r2, pc, #4	@ (adr r2, 8002088 <HAL_GPIO_Init+0x80>)
 8002084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002088:	08002103 	.word	0x08002103
 800208c:	080020dd 	.word	0x080020dd
 8002090:	080020ef 	.word	0x080020ef
 8002094:	08002131 	.word	0x08002131
 8002098:	08002137 	.word	0x08002137
 800209c:	08002137 	.word	0x08002137
 80020a0:	08002137 	.word	0x08002137
 80020a4:	08002137 	.word	0x08002137
 80020a8:	08002137 	.word	0x08002137
 80020ac:	08002137 	.word	0x08002137
 80020b0:	08002137 	.word	0x08002137
 80020b4:	08002137 	.word	0x08002137
 80020b8:	08002137 	.word	0x08002137
 80020bc:	08002137 	.word	0x08002137
 80020c0:	08002137 	.word	0x08002137
 80020c4:	08002137 	.word	0x08002137
 80020c8:	08002137 	.word	0x08002137
 80020cc:	080020e5 	.word	0x080020e5
 80020d0:	080020f9 	.word	0x080020f9
 80020d4:	4a79      	ldr	r2, [pc, #484]	@ (80022bc <HAL_GPIO_Init+0x2b4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020da:	e02c      	b.n	8002136 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	623b      	str	r3, [r7, #32]
          break;
 80020e2:	e029      	b.n	8002138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	3304      	adds	r3, #4
 80020ea:	623b      	str	r3, [r7, #32]
          break;
 80020ec:	e024      	b.n	8002138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	3308      	adds	r3, #8
 80020f4:	623b      	str	r3, [r7, #32]
          break;
 80020f6:	e01f      	b.n	8002138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	330c      	adds	r3, #12
 80020fe:	623b      	str	r3, [r7, #32]
          break;
 8002100:	e01a      	b.n	8002138 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d102      	bne.n	8002110 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800210a:	2304      	movs	r3, #4
 800210c:	623b      	str	r3, [r7, #32]
          break;
 800210e:	e013      	b.n	8002138 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d105      	bne.n	8002124 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002118:	2308      	movs	r3, #8
 800211a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	611a      	str	r2, [r3, #16]
          break;
 8002122:	e009      	b.n	8002138 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002124:	2308      	movs	r3, #8
 8002126:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	615a      	str	r2, [r3, #20]
          break;
 800212e:	e003      	b.n	8002138 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
          break;
 8002134:	e000      	b.n	8002138 <HAL_GPIO_Init+0x130>
          break;
 8002136:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2bff      	cmp	r3, #255	@ 0xff
 800213c:	d801      	bhi.n	8002142 <HAL_GPIO_Init+0x13a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	e001      	b.n	8002146 <HAL_GPIO_Init+0x13e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3304      	adds	r3, #4
 8002146:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2bff      	cmp	r3, #255	@ 0xff
 800214c:	d802      	bhi.n	8002154 <HAL_GPIO_Init+0x14c>
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	e002      	b.n	800215a <HAL_GPIO_Init+0x152>
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	3b08      	subs	r3, #8
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	210f      	movs	r1, #15
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	401a      	ands	r2, r3
 800216c:	6a39      	ldr	r1, [r7, #32]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	431a      	orrs	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80b1 	beq.w	80022ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002188:	4b4d      	ldr	r3, [pc, #308]	@ (80022c0 <HAL_GPIO_Init+0x2b8>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4a4c      	ldr	r2, [pc, #304]	@ (80022c0 <HAL_GPIO_Init+0x2b8>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6193      	str	r3, [r2, #24]
 8002194:	4b4a      	ldr	r3, [pc, #296]	@ (80022c0 <HAL_GPIO_Init+0x2b8>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021a0:	4a48      	ldr	r2, [pc, #288]	@ (80022c4 <HAL_GPIO_Init+0x2bc>)
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	3302      	adds	r3, #2
 80021a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	220f      	movs	r2, #15
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4013      	ands	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a40      	ldr	r2, [pc, #256]	@ (80022c8 <HAL_GPIO_Init+0x2c0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d013      	beq.n	80021f4 <HAL_GPIO_Init+0x1ec>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a3f      	ldr	r2, [pc, #252]	@ (80022cc <HAL_GPIO_Init+0x2c4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d00d      	beq.n	80021f0 <HAL_GPIO_Init+0x1e8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a3e      	ldr	r2, [pc, #248]	@ (80022d0 <HAL_GPIO_Init+0x2c8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d007      	beq.n	80021ec <HAL_GPIO_Init+0x1e4>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a3d      	ldr	r2, [pc, #244]	@ (80022d4 <HAL_GPIO_Init+0x2cc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d101      	bne.n	80021e8 <HAL_GPIO_Init+0x1e0>
 80021e4:	2303      	movs	r3, #3
 80021e6:	e006      	b.n	80021f6 <HAL_GPIO_Init+0x1ee>
 80021e8:	2304      	movs	r3, #4
 80021ea:	e004      	b.n	80021f6 <HAL_GPIO_Init+0x1ee>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e002      	b.n	80021f6 <HAL_GPIO_Init+0x1ee>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_GPIO_Init+0x1ee>
 80021f4:	2300      	movs	r3, #0
 80021f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f8:	f002 0203 	and.w	r2, r2, #3
 80021fc:	0092      	lsls	r2, r2, #2
 80021fe:	4093      	lsls	r3, r2
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002206:	492f      	ldr	r1, [pc, #188]	@ (80022c4 <HAL_GPIO_Init+0x2bc>)
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002220:	4b2d      	ldr	r3, [pc, #180]	@ (80022d8 <HAL_GPIO_Init+0x2d0>)
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	492c      	ldr	r1, [pc, #176]	@ (80022d8 <HAL_GPIO_Init+0x2d0>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]
 800222c:	e006      	b.n	800223c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800222e:	4b2a      	ldr	r3, [pc, #168]	@ (80022d8 <HAL_GPIO_Init+0x2d0>)
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	43db      	mvns	r3, r3
 8002236:	4928      	ldr	r1, [pc, #160]	@ (80022d8 <HAL_GPIO_Init+0x2d0>)
 8002238:	4013      	ands	r3, r2
 800223a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d006      	beq.n	8002256 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002248:	4b23      	ldr	r3, [pc, #140]	@ (80022d8 <HAL_GPIO_Init+0x2d0>)
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	4922      	ldr	r1, [pc, #136]	@ (80022d8 <HAL_GPIO_Init+0x2d0>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	60cb      	str	r3, [r1, #12]
 8002254:	e006      	b.n	8002264 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002256:	4b20      	ldr	r3, [pc, #128]	@ (80022d8 <HAL_GPIO_Init+0x2d0>)
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	43db      	mvns	r3, r3
 800225e:	491e      	ldr	r1, [pc, #120]	@ (80022d8 <HAL_GPIO_Init+0x2d0>)
 8002260:	4013      	ands	r3, r2
 8002262:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002270:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <HAL_GPIO_Init+0x2d0>)
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4918      	ldr	r1, [pc, #96]	@ (80022d8 <HAL_GPIO_Init+0x2d0>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800227e:	4b16      	ldr	r3, [pc, #88]	@ (80022d8 <HAL_GPIO_Init+0x2d0>)
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	43db      	mvns	r3, r3
 8002286:	4914      	ldr	r1, [pc, #80]	@ (80022d8 <HAL_GPIO_Init+0x2d0>)
 8002288:	4013      	ands	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d021      	beq.n	80022dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002298:	4b0f      	ldr	r3, [pc, #60]	@ (80022d8 <HAL_GPIO_Init+0x2d0>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	490e      	ldr	r1, [pc, #56]	@ (80022d8 <HAL_GPIO_Init+0x2d0>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
 80022a4:	e021      	b.n	80022ea <HAL_GPIO_Init+0x2e2>
 80022a6:	bf00      	nop
 80022a8:	10320000 	.word	0x10320000
 80022ac:	10310000 	.word	0x10310000
 80022b0:	10220000 	.word	0x10220000
 80022b4:	10210000 	.word	0x10210000
 80022b8:	10120000 	.word	0x10120000
 80022bc:	10110000 	.word	0x10110000
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40010000 	.word	0x40010000
 80022c8:	40010800 	.word	0x40010800
 80022cc:	40010c00 	.word	0x40010c00
 80022d0:	40011000 	.word	0x40011000
 80022d4:	40011400 	.word	0x40011400
 80022d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022dc:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <HAL_GPIO_Init+0x304>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	4909      	ldr	r1, [pc, #36]	@ (800230c <HAL_GPIO_Init+0x304>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	3301      	adds	r3, #1
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	fa22 f303 	lsr.w	r3, r2, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f47f ae8e 	bne.w	800201c <HAL_GPIO_Init+0x14>
  }
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	372c      	adds	r7, #44	@ 0x2c
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	40010400 	.word	0x40010400

08002310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	807b      	strh	r3, [r7, #2]
 800231c:	4613      	mov	r3, r2
 800231e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002320:	787b      	ldrb	r3, [r7, #1]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800232c:	e003      	b.n	8002336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800232e:	887b      	ldrh	r3, [r7, #2]
 8002330:	041a      	lsls	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	611a      	str	r2, [r3, #16]
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4013      	ands	r3, r2
 8002358:	041a      	lsls	r2, r3, #16
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	43d9      	mvns	r1, r3
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	400b      	ands	r3, r1
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	611a      	str	r2, [r3, #16]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
	...

08002374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e272      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8087 	beq.w	80024a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002394:	4b92      	ldr	r3, [pc, #584]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b04      	cmp	r3, #4
 800239e:	d00c      	beq.n	80023ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023a0:	4b8f      	ldr	r3, [pc, #572]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d112      	bne.n	80023d2 <HAL_RCC_OscConfig+0x5e>
 80023ac:	4b8c      	ldr	r3, [pc, #560]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b8:	d10b      	bne.n	80023d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ba:	4b89      	ldr	r3, [pc, #548]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d06c      	beq.n	80024a0 <HAL_RCC_OscConfig+0x12c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d168      	bne.n	80024a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e24c      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023da:	d106      	bne.n	80023ea <HAL_RCC_OscConfig+0x76>
 80023dc:	4b80      	ldr	r3, [pc, #512]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a7f      	ldr	r2, [pc, #508]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80023e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	e02e      	b.n	8002448 <HAL_RCC_OscConfig+0xd4>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x98>
 80023f2:	4b7b      	ldr	r3, [pc, #492]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7a      	ldr	r2, [pc, #488]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b78      	ldr	r3, [pc, #480]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a77      	ldr	r2, [pc, #476]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002404:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e01d      	b.n	8002448 <HAL_RCC_OscConfig+0xd4>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0xbc>
 8002416:	4b72      	ldr	r3, [pc, #456]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a71      	ldr	r2, [pc, #452]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 800241c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	4b6f      	ldr	r3, [pc, #444]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a6e      	ldr	r2, [pc, #440]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e00b      	b.n	8002448 <HAL_RCC_OscConfig+0xd4>
 8002430:	4b6b      	ldr	r3, [pc, #428]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a6a      	ldr	r2, [pc, #424]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b68      	ldr	r3, [pc, #416]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a67      	ldr	r2, [pc, #412]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002446:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7fe fe2a 	bl	80010a8 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7fe fe26 	bl	80010a8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	@ 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e200      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b5d      	ldr	r3, [pc, #372]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0xe4>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7fe fe16 	bl	80010a8 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7fe fe12 	bl	80010a8 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	@ 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e1ec      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	4b53      	ldr	r3, [pc, #332]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x10c>
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d063      	beq.n	8002576 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ae:	4b4c      	ldr	r3, [pc, #304]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024ba:	4b49      	ldr	r3, [pc, #292]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d11c      	bne.n	8002500 <HAL_RCC_OscConfig+0x18c>
 80024c6:	4b46      	ldr	r3, [pc, #280]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d116      	bne.n	8002500 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d2:	4b43      	ldr	r3, [pc, #268]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_RCC_OscConfig+0x176>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e1c0      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ea:	4b3d      	ldr	r3, [pc, #244]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4939      	ldr	r1, [pc, #228]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	e03a      	b.n	8002576 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d020      	beq.n	800254a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002508:	4b36      	ldr	r3, [pc, #216]	@ (80025e4 <HAL_RCC_OscConfig+0x270>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe fdcb 	bl	80010a8 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002516:	f7fe fdc7 	bl	80010a8 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e1a1      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002528:	4b2d      	ldr	r3, [pc, #180]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b2a      	ldr	r3, [pc, #168]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4927      	ldr	r1, [pc, #156]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 8002544:	4313      	orrs	r3, r2
 8002546:	600b      	str	r3, [r1, #0]
 8002548:	e015      	b.n	8002576 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254a:	4b26      	ldr	r3, [pc, #152]	@ (80025e4 <HAL_RCC_OscConfig+0x270>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe fdaa 	bl	80010a8 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002558:	f7fe fda6 	bl	80010a8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e180      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256a:	4b1d      	ldr	r3, [pc, #116]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d03a      	beq.n	80025f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d019      	beq.n	80025be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258a:	4b17      	ldr	r3, [pc, #92]	@ (80025e8 <HAL_RCC_OscConfig+0x274>)
 800258c:	2201      	movs	r2, #1
 800258e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002590:	f7fe fd8a 	bl	80010a8 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002598:	f7fe fd86 	bl	80010a8 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e160      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025aa:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025b6:	2001      	movs	r0, #1
 80025b8:	f000 face 	bl	8002b58 <RCC_Delay>
 80025bc:	e01c      	b.n	80025f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025be:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <HAL_RCC_OscConfig+0x274>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c4:	f7fe fd70 	bl	80010a8 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ca:	e00f      	b.n	80025ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025cc:	f7fe fd6c 	bl	80010a8 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d908      	bls.n	80025ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e146      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
 80025e4:	42420000 	.word	0x42420000
 80025e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ec:	4b92      	ldr	r3, [pc, #584]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1e9      	bne.n	80025cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80a6 	beq.w	8002752 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260a:	4b8b      	ldr	r3, [pc, #556]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10d      	bne.n	8002632 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	4b88      	ldr	r3, [pc, #544]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4a87      	ldr	r2, [pc, #540]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002620:	61d3      	str	r3, [r2, #28]
 8002622:	4b85      	ldr	r3, [pc, #532]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262e:	2301      	movs	r3, #1
 8002630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002632:	4b82      	ldr	r3, [pc, #520]	@ (800283c <HAL_RCC_OscConfig+0x4c8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d118      	bne.n	8002670 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263e:	4b7f      	ldr	r3, [pc, #508]	@ (800283c <HAL_RCC_OscConfig+0x4c8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a7e      	ldr	r2, [pc, #504]	@ (800283c <HAL_RCC_OscConfig+0x4c8>)
 8002644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264a:	f7fe fd2d 	bl	80010a8 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002652:	f7fe fd29 	bl	80010a8 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b64      	cmp	r3, #100	@ 0x64
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e103      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	4b75      	ldr	r3, [pc, #468]	@ (800283c <HAL_RCC_OscConfig+0x4c8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d106      	bne.n	8002686 <HAL_RCC_OscConfig+0x312>
 8002678:	4b6f      	ldr	r3, [pc, #444]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4a6e      	ldr	r2, [pc, #440]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6213      	str	r3, [r2, #32]
 8002684:	e02d      	b.n	80026e2 <HAL_RCC_OscConfig+0x36e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x334>
 800268e:	4b6a      	ldr	r3, [pc, #424]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	4a69      	ldr	r2, [pc, #420]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	6213      	str	r3, [r2, #32]
 800269a:	4b67      	ldr	r3, [pc, #412]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	4a66      	ldr	r2, [pc, #408]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	f023 0304 	bic.w	r3, r3, #4
 80026a4:	6213      	str	r3, [r2, #32]
 80026a6:	e01c      	b.n	80026e2 <HAL_RCC_OscConfig+0x36e>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	d10c      	bne.n	80026ca <HAL_RCC_OscConfig+0x356>
 80026b0:	4b61      	ldr	r3, [pc, #388]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a60      	ldr	r2, [pc, #384]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026b6:	f043 0304 	orr.w	r3, r3, #4
 80026ba:	6213      	str	r3, [r2, #32]
 80026bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6213      	str	r3, [r2, #32]
 80026c8:	e00b      	b.n	80026e2 <HAL_RCC_OscConfig+0x36e>
 80026ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4a5a      	ldr	r2, [pc, #360]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	6213      	str	r3, [r2, #32]
 80026d6:	4b58      	ldr	r3, [pc, #352]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4a57      	ldr	r2, [pc, #348]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	f023 0304 	bic.w	r3, r3, #4
 80026e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d015      	beq.n	8002716 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ea:	f7fe fcdd 	bl	80010a8 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7fe fcd9 	bl	80010a8 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e0b1      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002708:	4b4b      	ldr	r3, [pc, #300]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ee      	beq.n	80026f2 <HAL_RCC_OscConfig+0x37e>
 8002714:	e014      	b.n	8002740 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002716:	f7fe fcc7 	bl	80010a8 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271c:	e00a      	b.n	8002734 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271e:	f7fe fcc3 	bl	80010a8 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272c:	4293      	cmp	r3, r2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e09b      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002734:	4b40      	ldr	r3, [pc, #256]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1ee      	bne.n	800271e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002740:	7dfb      	ldrb	r3, [r7, #23]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d105      	bne.n	8002752 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002746:	4b3c      	ldr	r3, [pc, #240]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	4a3b      	ldr	r2, [pc, #236]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002750:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8087 	beq.w	800286a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800275c:	4b36      	ldr	r3, [pc, #216]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 030c 	and.w	r3, r3, #12
 8002764:	2b08      	cmp	r3, #8
 8002766:	d061      	beq.n	800282c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d146      	bne.n	80027fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002770:	4b33      	ldr	r3, [pc, #204]	@ (8002840 <HAL_RCC_OscConfig+0x4cc>)
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002776:	f7fe fc97 	bl	80010a8 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277e:	f7fe fc93 	bl	80010a8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e06d      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002790:	4b29      	ldr	r3, [pc, #164]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f0      	bne.n	800277e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027a4:	d108      	bne.n	80027b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027a6:	4b24      	ldr	r3, [pc, #144]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	4921      	ldr	r1, [pc, #132]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a19      	ldr	r1, [r3, #32]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	430b      	orrs	r3, r1
 80027ca:	491b      	ldr	r1, [pc, #108]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002840 <HAL_RCC_OscConfig+0x4cc>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7fe fc67 	bl	80010a8 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027de:	f7fe fc63 	bl	80010a8 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e03d      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f0:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x46a>
 80027fc:	e035      	b.n	800286a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fe:	4b10      	ldr	r3, [pc, #64]	@ (8002840 <HAL_RCC_OscConfig+0x4cc>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7fe fc50 	bl	80010a8 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280c:	f7fe fc4c 	bl	80010a8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e026      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281e:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <HAL_RCC_OscConfig+0x4c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x498>
 800282a:	e01e      	b.n	800286a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d107      	bne.n	8002844 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e019      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
 8002838:	40021000 	.word	0x40021000
 800283c:	40007000 	.word	0x40007000
 8002840:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <HAL_RCC_OscConfig+0x500>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	429a      	cmp	r2, r3
 8002856:	d106      	bne.n	8002866 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000

08002878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0d0      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800288c:	4b6a      	ldr	r3, [pc, #424]	@ (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d910      	bls.n	80028bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b67      	ldr	r3, [pc, #412]	@ (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 0207 	bic.w	r2, r3, #7
 80028a2:	4965      	ldr	r1, [pc, #404]	@ (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	4b63      	ldr	r3, [pc, #396]	@ (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0b8      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d020      	beq.n	800290a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028d4:	4b59      	ldr	r3, [pc, #356]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a58      	ldr	r2, [pc, #352]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028ec:	4b53      	ldr	r3, [pc, #332]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a52      	ldr	r2, [pc, #328]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f8:	4b50      	ldr	r3, [pc, #320]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	494d      	ldr	r1, [pc, #308]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d040      	beq.n	8002998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	4b47      	ldr	r3, [pc, #284]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d115      	bne.n	8002956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e07f      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002936:	4b41      	ldr	r3, [pc, #260]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e073      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002946:	4b3d      	ldr	r3, [pc, #244]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e06b      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002956:	4b39      	ldr	r3, [pc, #228]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f023 0203 	bic.w	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4936      	ldr	r1, [pc, #216]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002968:	f7fe fb9e 	bl	80010a8 <HAL_GetTick>
 800296c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	e00a      	b.n	8002986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002970:	f7fe fb9a 	bl	80010a8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e053      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	4b2d      	ldr	r3, [pc, #180]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 020c 	and.w	r2, r3, #12
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	429a      	cmp	r2, r3
 8002996:	d1eb      	bne.n	8002970 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002998:	4b27      	ldr	r3, [pc, #156]	@ (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d210      	bcs.n	80029c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b24      	ldr	r3, [pc, #144]	@ (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 0207 	bic.w	r2, r3, #7
 80029ae:	4922      	ldr	r1, [pc, #136]	@ (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b20      	ldr	r3, [pc, #128]	@ (8002a38 <HAL_RCC_ClockConfig+0x1c0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e032      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d4:	4b19      	ldr	r3, [pc, #100]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4916      	ldr	r1, [pc, #88]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029f2:	4b12      	ldr	r3, [pc, #72]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	490e      	ldr	r1, [pc, #56]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a06:	f000 f821 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	490a      	ldr	r1, [pc, #40]	@ (8002a40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a18:	5ccb      	ldrb	r3, [r1, r3]
 8002a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1e:	4a09      	ldr	r2, [pc, #36]	@ (8002a44 <HAL_RCC_ClockConfig+0x1cc>)
 8002a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a22:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <HAL_RCC_ClockConfig+0x1d0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe fafc 	bl	8001024 <HAL_InitTick>

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40022000 	.word	0x40022000
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	08004c34 	.word	0x08004c34
 8002a44:	20000000 	.word	0x20000000
 8002a48:	20000004 	.word	0x20000004

08002a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d002      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x30>
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d003      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x36>
 8002a7a:	e027      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a7c:	4b19      	ldr	r3, [pc, #100]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a7e:	613b      	str	r3, [r7, #16]
      break;
 8002a80:	e027      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	0c9b      	lsrs	r3, r3, #18
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	4a17      	ldr	r2, [pc, #92]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d010      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	0c5b      	lsrs	r3, r3, #17
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	4a11      	ldr	r2, [pc, #68]	@ (8002aec <HAL_RCC_GetSysClockFreq+0xa0>)
 8002aa6:	5cd3      	ldrb	r3, [r2, r3]
 8002aa8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aae:	fb03 f202 	mul.w	r2, r3, r2
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	e004      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a0c      	ldr	r2, [pc, #48]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ac0:	fb02 f303 	mul.w	r3, r2, r3
 8002ac4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	613b      	str	r3, [r7, #16]
      break;
 8002aca:	e002      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002acc:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ace:	613b      	str	r3, [r7, #16]
      break;
 8002ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad2:	693b      	ldr	r3, [r7, #16]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	371c      	adds	r7, #28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	007a1200 	.word	0x007a1200
 8002ae8:	08004c4c 	.word	0x08004c4c
 8002aec:	08004c5c 	.word	0x08004c5c
 8002af0:	003d0900 	.word	0x003d0900

08002af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af8:	4b02      	ldr	r3, [pc, #8]	@ (8002b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	20000000 	.word	0x20000000

08002b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b0c:	f7ff fff2 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4903      	ldr	r1, [pc, #12]	@ (8002b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	08004c44 	.word	0x08004c44

08002b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b34:	f7ff ffde 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	0adb      	lsrs	r3, r3, #11
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4903      	ldr	r1, [pc, #12]	@ (8002b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	08004c44 	.word	0x08004c44

08002b58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b60:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <RCC_Delay+0x34>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0a      	ldr	r2, [pc, #40]	@ (8002b90 <RCC_Delay+0x38>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	0a5b      	lsrs	r3, r3, #9
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
 8002b72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b74:	bf00      	nop
  }
  while (Delay --);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1e5a      	subs	r2, r3, #1
 8002b7a:	60fa      	str	r2, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f9      	bne.n	8002b74 <RCC_Delay+0x1c>
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	10624dd3 	.word	0x10624dd3

08002b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e042      	b.n	8002c2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fd fede 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2224      	movs	r2, #36	@ 0x24
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f82b 	bl	8002c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c6e:	f023 030c 	bic.w	r3, r3, #12
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a2c      	ldr	r2, [pc, #176]	@ (8002d48 <UART_SetConfig+0x114>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d103      	bne.n	8002ca4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c9c:	f7ff ff48 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	e002      	b.n	8002caa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ca4:	f7ff ff30 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8002ca8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009a      	lsls	r2, r3, #2
 8002cb4:	441a      	add	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc0:	4a22      	ldr	r2, [pc, #136]	@ (8002d4c <UART_SetConfig+0x118>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	0119      	lsls	r1, r3, #4
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009a      	lsls	r2, r3, #2
 8002cd4:	441a      	add	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d4c <UART_SetConfig+0x118>)
 8002ce2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2064      	movs	r0, #100	@ 0x64
 8002cea:	fb00 f303 	mul.w	r3, r0, r3
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	3332      	adds	r3, #50	@ 0x32
 8002cf4:	4a15      	ldr	r2, [pc, #84]	@ (8002d4c <UART_SetConfig+0x118>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d00:	4419      	add	r1, r3
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	009a      	lsls	r2, r3, #2
 8002d0c:	441a      	add	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d18:	4b0c      	ldr	r3, [pc, #48]	@ (8002d4c <UART_SetConfig+0x118>)
 8002d1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2064      	movs	r0, #100	@ 0x64
 8002d22:	fb00 f303 	mul.w	r3, r0, r3
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	3332      	adds	r3, #50	@ 0x32
 8002d2c:	4a07      	ldr	r2, [pc, #28]	@ (8002d4c <UART_SetConfig+0x118>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	f003 020f 	and.w	r2, r3, #15
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	440a      	add	r2, r1
 8002d3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40013800 	.word	0x40013800
 8002d4c:	51eb851f 	.word	0x51eb851f

08002d50 <isotp_user_send_can>:
///////////////////////////////////////////////////////
///                 STATIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_user_send_can(const uint32_t arbitration_id, const uint8_t *data,
		const uint8_t size) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08e      	sub	sp, #56	@ 0x38
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef TxHeader = { 0 };
 8002d5e:	f107 0318 	add.w	r3, r7, #24
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	60da      	str	r2, [r3, #12]
 8002d6c:	611a      	str	r2, [r3, #16]
 8002d6e:	615a      	str	r2, [r3, #20]
	TxHeader.DLC = size;
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.RTR = CAN_RTR_DATA;
 8002d74:	2300      	movs	r3, #0
 8002d76:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.IDE = CAN_ID_STD;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = arbitration_id;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	61bb      	str	r3, [r7, #24]
	uint32_t TxMailBox;
	uint32_t FreeLevel = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8002d80:	480d      	ldr	r0, [pc, #52]	@ (8002db8 <isotp_user_send_can+0x68>)
 8002d82:	f7fe fc96 	bl	80016b2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002d86:	6378      	str	r0, [r7, #52]	@ 0x34
	if (FreeLevel == 0) return ISOTP_RET_ERROR;
 8002d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <isotp_user_send_can+0x44>
 8002d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d92:	e00c      	b.n	8002dae <isotp_user_send_can+0x5e>
	uint8_t ret = HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailBox);
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	f107 0118 	add.w	r1, r7, #24
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	4806      	ldr	r0, [pc, #24]	@ (8002db8 <isotp_user_send_can+0x68>)
 8002da0:	f7fe fbb8 	bl	8001514 <HAL_CAN_AddTxMessage>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	return ret;
 8002daa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3738      	adds	r7, #56	@ 0x38
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	2000018c 	.word	0x2000018c

08002dbc <isotp_user_get_ms>:

uint32_t isotp_user_get_ms(void){
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002dc0:	f7fe f972 	bl	80010a8 <HAL_GetTick>
 8002dc4:	4603      	mov	r3, r0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <isotp_ms_to_st_min>:

/* st_min to microsecond */
static uint8_t isotp_ms_to_st_min(uint8_t ms) {
 8002dca:	b480      	push	{r7}
 8002dcc:	b085      	sub	sp, #20
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	71fb      	strb	r3, [r7, #7]
    uint8_t st_min;

    st_min = ms;
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	73fb      	strb	r3, [r7, #15]
    if (st_min > 0x7F) {
 8002dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	da01      	bge.n	8002de4 <isotp_ms_to_st_min+0x1a>
        st_min = 0x7F;
 8002de0:	237f      	movs	r3, #127	@ 0x7f
 8002de2:	73fb      	strb	r3, [r7, #15]
    }

    return st_min;
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <isotp_st_min_to_ms>:

/* st_min to msec  */
static uint8_t isotp_st_min_to_ms(uint8_t st_min) {
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
    uint8_t ms;
    
    if (st_min >= 0xF1 && st_min <= 0xF9) {
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	2bf0      	cmp	r3, #240	@ 0xf0
 8002dfe:	d905      	bls.n	8002e0c <isotp_st_min_to_ms+0x1c>
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2bf9      	cmp	r3, #249	@ 0xf9
 8002e04:	d802      	bhi.n	8002e0c <isotp_st_min_to_ms+0x1c>
        ms = 1;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
 8002e0a:	e008      	b.n	8002e1e <isotp_st_min_to_ms+0x2e>
    } else if (st_min <= 0x7F) {
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db02      	blt.n	8002e1a <isotp_st_min_to_ms+0x2a>
        ms = st_min;
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	73fb      	strb	r3, [r7, #15]
 8002e18:	e001      	b.n	8002e1e <isotp_st_min_to_ms+0x2e>
    } else {
        ms = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
    }

    return ms;
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <isotp_send_flow_control>:

static int isotp_send_flow_control(IsoTpLink* link, uint8_t flow_status, uint8_t block_size, uint8_t st_min_ms) {
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b086      	sub	sp, #24
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	4608      	mov	r0, r1
 8002e34:	4611      	mov	r1, r2
 8002e36:	461a      	mov	r2, r3
 8002e38:	4603      	mov	r3, r0
 8002e3a:	70fb      	strb	r3, [r7, #3]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70bb      	strb	r3, [r7, #2]
 8002e40:	4613      	mov	r3, r2
 8002e42:	707b      	strb	r3, [r7, #1]

    IsoTpCanMessage message;
    int ret;

    /* setup message  */
    message.as.flow_control.type = ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME;
 8002e44:	7b3b      	ldrb	r3, [r7, #12]
 8002e46:	2203      	movs	r2, #3
 8002e48:	f362 1307 	bfi	r3, r2, #4, #4
 8002e4c:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.FS = flow_status;
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	7b3b      	ldrb	r3, [r7, #12]
 8002e58:	f362 0303 	bfi	r3, r2, #0, #4
 8002e5c:	733b      	strb	r3, [r7, #12]
    message.as.flow_control.BS = block_size;
 8002e5e:	78bb      	ldrb	r3, [r7, #2]
 8002e60:	737b      	strb	r3, [r7, #13]
    message.as.flow_control.STmin = isotp_ms_to_st_min(st_min_ms);
 8002e62:	787b      	ldrb	r3, [r7, #1]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ffb0 	bl	8002dca <isotp_ms_to_st_min>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	73bb      	strb	r3, [r7, #14]

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.flow_control.reserve, 0x55, sizeof(message.as.flow_control.reserve));
 8002e6e:	f107 030c 	add.w	r3, r7, #12
 8002e72:	3303      	adds	r3, #3
 8002e74:	2205      	movs	r2, #5
 8002e76:	2155      	movs	r1, #85	@ 0x55
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 feb3 	bl	8003be4 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f107 010c 	add.w	r1, r7, #12
 8002e86:	2208      	movs	r2, #8
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff61 	bl	8002d50 <isotp_user_send_can>
 8002e8e:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            3);
#endif

    return ret;
 8002e90:	697b      	ldr	r3, [r7, #20]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <isotp_send_single_frame>:

static int isotp_send_single_frame(IsoTpLink* link, uint32_t id) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]

    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size <= 7);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	895b      	ldrh	r3, [r3, #10]
 8002eaa:	2b07      	cmp	r3, #7
 8002eac:	d905      	bls.n	8002eba <isotp_send_single_frame+0x1e>
 8002eae:	4b1d      	ldr	r3, [pc, #116]	@ (8002f24 <isotp_send_single_frame+0x88>)
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f28 <isotp_send_single_frame+0x8c>)
 8002eb2:	2157      	movs	r1, #87	@ 0x57
 8002eb4:	481d      	ldr	r0, [pc, #116]	@ (8002f2c <isotp_send_single_frame+0x90>)
 8002eb6:	f000 fc3b 	bl	8003730 <__assert_func>

    /* setup message  */
    message.as.single_frame.type = ISOTP_PCI_TYPE_SINGLE;
 8002eba:	7b3b      	ldrb	r3, [r7, #12]
 8002ebc:	f36f 1307 	bfc	r3, #4, #4
 8002ec0:	733b      	strb	r3, [r7, #12]
    message.as.single_frame.SF_DL = (uint8_t) link->send_size;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	895b      	ldrh	r3, [r3, #10]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	7b3b      	ldrb	r3, [r7, #12]
 8002ece:	f362 0303 	bfi	r3, r2, #0, #4
 8002ed2:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.single_frame.data, link->send_buffer, link->send_size);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	895b      	ldrh	r3, [r3, #10]
 8002edc:	461a      	mov	r2, r3
 8002ede:	f107 030c 	add.w	r3, r7, #12
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 fef8 	bl	8003cda <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.single_frame.data + link->send_size, 0x55, sizeof(message.as.single_frame.data) - link->send_size);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	895b      	ldrh	r3, [r3, #10]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	1898      	adds	r0, r3, r2
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	895b      	ldrh	r3, [r3, #10]
 8002efc:	f1c3 0307 	rsb	r3, r3, #7
 8002f00:	461a      	mov	r2, r3
 8002f02:	2155      	movs	r1, #85	@ 0x55
 8002f04:	f000 fe6e 	bl	8003be4 <memset>
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 8002f08:	f107 030c 	add.w	r3, r7, #12
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6838      	ldr	r0, [r7, #0]
 8002f12:	f7ff ff1d 	bl	8002d50 <isotp_user_send_can>
 8002f16:	6178      	str	r0, [r7, #20]
    ret = isotp_user_send_can(id,
            message.as.data_array.ptr,
            link->send_size + 1);
#endif

    return ret;
 8002f18:	697b      	ldr	r3, [r7, #20]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	08004bc4 	.word	0x08004bc4
 8002f28:	08004c60 	.word	0x08004c60
 8002f2c:	08004bdc 	.word	0x08004bdc

08002f30 <isotp_send_first_frame>:

static int isotp_send_first_frame(IsoTpLink* link, uint32_t id) {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
    
    IsoTpCanMessage message;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	895b      	ldrh	r3, [r3, #10]
 8002f3e:	2b07      	cmp	r3, #7
 8002f40:	d805      	bhi.n	8002f4e <isotp_send_first_frame+0x1e>
 8002f42:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb8 <isotp_send_first_frame+0x88>)
 8002f44:	4a1d      	ldr	r2, [pc, #116]	@ (8002fbc <isotp_send_first_frame+0x8c>)
 8002f46:	2171      	movs	r1, #113	@ 0x71
 8002f48:	481d      	ldr	r0, [pc, #116]	@ (8002fc0 <isotp_send_first_frame+0x90>)
 8002f4a:	f000 fbf1 	bl	8003730 <__assert_func>

    /* setup message  */
    message.as.first_frame.type = ISOTP_PCI_TYPE_FIRST_FRAME;
 8002f4e:	7b3b      	ldrb	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f362 1307 	bfi	r3, r2, #4, #4
 8002f56:	733b      	strb	r3, [r7, #12]
    message.as.first_frame.FF_DL_low = (uint8_t) link->send_size;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	895b      	ldrh	r3, [r3, #10]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	737b      	strb	r3, [r7, #13]
    message.as.first_frame.FF_DL_high = (uint8_t) (0x0F & (link->send_size >> 8));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	895b      	ldrh	r3, [r3, #10]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	7b3b      	ldrb	r3, [r7, #12]
 8002f70:	f362 0303 	bfi	r3, r2, #0, #4
 8002f74:	733b      	strb	r3, [r7, #12]
    (void) memcpy(message.as.first_frame.data, link->send_buffer, sizeof(message.as.first_frame.data));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	f107 030e 	add.w	r3, r7, #14
 8002f7e:	6811      	ldr	r1, [r2, #0]
 8002f80:	6019      	str	r1, [r3, #0]
 8002f82:	8892      	ldrh	r2, [r2, #4]
 8002f84:	809a      	strh	r2, [r3, #4]

    /* send message */
    ret = isotp_user_send_can(id, message.as.data_array.ptr, sizeof(message));
 8002f86:	f107 030c 	add.w	r3, r7, #12
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	6838      	ldr	r0, [r7, #0]
 8002f90:	f7ff fede 	bl	8002d50 <isotp_user_send_can>
 8002f94:	6178      	str	r0, [r7, #20]
    if (ISOTP_RET_OK == ret) {
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d108      	bne.n	8002fae <isotp_send_first_frame+0x7e>
        link->send_offset += sizeof(message.as.first_frame.data);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	899b      	ldrh	r3, [r3, #12]
 8002fa0:	3306      	adds	r3, #6
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	819a      	strh	r2, [r3, #12]
        link->send_sn = 1;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	739a      	strb	r2, [r3, #14]
    }

    return ret;
 8002fae:	697b      	ldr	r3, [r7, #20]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	08004bf0 	.word	0x08004bf0
 8002fbc:	08004c78 	.word	0x08004c78
 8002fc0:	08004bdc 	.word	0x08004bdc

08002fc4 <isotp_send_consecutive_frame>:

static int isotp_send_consecutive_frame(IsoTpLink* link) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
    IsoTpCanMessage message;
    uint16_t data_length;
    int ret;

    /* multi frame message length must greater than 7  */
    assert(link->send_size > 7);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	895b      	ldrh	r3, [r3, #10]
 8002fd0:	2b07      	cmp	r3, #7
 8002fd2:	d805      	bhi.n	8002fe0 <isotp_send_consecutive_frame+0x1c>
 8002fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800308c <isotp_send_consecutive_frame+0xc8>)
 8002fd6:	4a2e      	ldr	r2, [pc, #184]	@ (8003090 <isotp_send_consecutive_frame+0xcc>)
 8002fd8:	218a      	movs	r1, #138	@ 0x8a
 8002fda:	482e      	ldr	r0, [pc, #184]	@ (8003094 <isotp_send_consecutive_frame+0xd0>)
 8002fdc:	f000 fba8 	bl	8003730 <__assert_func>

    /* setup message  */
    message.as.consecutive_frame.type = TSOTP_PCI_TYPE_CONSECUTIVE_FRAME;
 8002fe0:	7a3b      	ldrb	r3, [r7, #8]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f362 1307 	bfi	r3, r2, #4, #4
 8002fe8:	723b      	strb	r3, [r7, #8]
    message.as.consecutive_frame.SN = link->send_sn;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7b9b      	ldrb	r3, [r3, #14]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	7a3b      	ldrb	r3, [r7, #8]
 8002ff6:	f362 0303 	bfi	r3, r2, #0, #4
 8002ffa:	723b      	strb	r3, [r7, #8]
    data_length = link->send_size - link->send_offset;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	895a      	ldrh	r2, [r3, #10]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	899b      	ldrh	r3, [r3, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	82fb      	strh	r3, [r7, #22]
    if (data_length > sizeof(message.as.consecutive_frame.data)) {
 8003008:	8afb      	ldrh	r3, [r7, #22]
 800300a:	2b07      	cmp	r3, #7
 800300c:	d901      	bls.n	8003012 <isotp_send_consecutive_frame+0x4e>
        data_length = sizeof(message.as.consecutive_frame.data);
 800300e:	2307      	movs	r3, #7
 8003010:	82fb      	strh	r3, [r7, #22]
    }
    (void) memcpy(message.as.consecutive_frame.data, link->send_buffer + link->send_offset, data_length);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	8992      	ldrh	r2, [r2, #12]
 800301a:	1899      	adds	r1, r3, r2
 800301c:	8afa      	ldrh	r2, [r7, #22]
 800301e:	f107 0308 	add.w	r3, r7, #8
 8003022:	3301      	adds	r3, #1
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fe58 	bl	8003cda <memcpy>

    /* send message */
#ifdef ISO_TP_FRAME_PADDING
    (void) memset(message.as.consecutive_frame.data + data_length, 0x55, sizeof(message.as.consecutive_frame.data) - data_length);
 800302a:	8afb      	ldrh	r3, [r7, #22]
 800302c:	f107 0208 	add.w	r2, r7, #8
 8003030:	3201      	adds	r2, #1
 8003032:	18d0      	adds	r0, r2, r3
 8003034:	8afb      	ldrh	r3, [r7, #22]
 8003036:	f1c3 0307 	rsb	r3, r3, #7
 800303a:	461a      	mov	r2, r3
 800303c:	2155      	movs	r1, #85	@ 0x55
 800303e:	f000 fdd1 	bl	8003be4 <memset>
    ret = isotp_user_send_can(link->send_arbitration_id, message.as.data_array.ptr, sizeof(message));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f107 0108 	add.w	r1, r7, #8
 800304a:	2208      	movs	r2, #8
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fe7f 	bl	8002d50 <isotp_user_send_can>
 8003052:	6138      	str	r0, [r7, #16]
#else
    ret = isotp_user_send_can(link->send_arbitration_id,
            message.as.data_array.ptr,
            data_length + 1);
#endif
    if (ISOTP_RET_OK == ret) {
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d113      	bne.n	8003082 <isotp_send_consecutive_frame+0xbe>
        link->send_offset += data_length;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	899a      	ldrh	r2, [r3, #12]
 800305e:	8afb      	ldrh	r3, [r7, #22]
 8003060:	4413      	add	r3, r2
 8003062:	b29a      	uxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	819a      	strh	r2, [r3, #12]
        if (++(link->send_sn) > 0x0F) {
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	7b9b      	ldrb	r3, [r3, #14]
 800306c:	3301      	adds	r3, #1
 800306e:	b2da      	uxtb	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	739a      	strb	r2, [r3, #14]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	7b9b      	ldrb	r3, [r3, #14]
 8003078:	2b0f      	cmp	r3, #15
 800307a:	d902      	bls.n	8003082 <isotp_send_consecutive_frame+0xbe>
            link->send_sn = 0;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	739a      	strb	r2, [r3, #14]
        }
    }
    
    return ret;
 8003082:	693b      	ldr	r3, [r7, #16]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	08004bf0 	.word	0x08004bf0
 8003090:	08004c90 	.word	0x08004c90
 8003094:	08004bdc 	.word	0x08004bdc

08003098 <isotp_receive_single_frame>:

static int isotp_receive_single_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	4613      	mov	r3, r2
 80030a4:	71fb      	strb	r3, [r7, #7]
    /* check data length */
    if ((0 == message->as.single_frame.SF_DL) || (message->as.single_frame.SF_DL > (len - 1))) {
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <isotp_receive_single_frame+0x2e>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d802      	bhi.n	80030cc <isotp_receive_single_frame+0x34>
        // isotp_user_debug("Single-frame length too small.");
        return ISOTP_RET_LENGTH;
 80030c6:	f06f 0306 	mvn.w	r3, #6
 80030ca:	e014      	b.n	80030f6 <isotp_receive_single_frame+0x5e>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.single_frame.data, message->as.single_frame.SF_DL);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	1c59      	adds	r1, r3, #1
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	f000 fdfb 	bl	8003cda <memcpy>
    link->receive_size = message->as.single_frame.SF_DL;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    
    return ISOTP_RET_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <isotp_receive_first_frame>:

static int isotp_receive_first_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 80030fe:	b580      	push	{r7, lr}
 8003100:	b086      	sub	sp, #24
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	4613      	mov	r3, r2
 800310a:	71fb      	strb	r3, [r7, #7]
    uint16_t payload_length;

    if (8 != len) {
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	2b08      	cmp	r3, #8
 8003110:	d002      	beq.n	8003118 <isotp_receive_first_frame+0x1a>
        // isotp_user_debug("First frame should be 8 bytes in length.");
        return ISOTP_RET_LENGTH;
 8003112:	f06f 0306 	mvn.w	r3, #6
 8003116:	e02d      	b.n	8003174 <isotp_receive_first_frame+0x76>
    }

    /* check data length */
    payload_length = message->as.first_frame.FF_DL_high;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003120:	b2db      	uxtb	r3, r3
 8003122:	82fb      	strh	r3, [r7, #22]
    payload_length = (payload_length << 8) + message->as.first_frame.FF_DL_low;
 8003124:	8afb      	ldrh	r3, [r7, #22]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	b29b      	uxth	r3, r3
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	7852      	ldrb	r2, [r2, #1]
 800312e:	4413      	add	r3, r2
 8003130:	82fb      	strh	r3, [r7, #22]

    /* should not use multiple frame transmition */
    if (payload_length <= 7) {
 8003132:	8afb      	ldrh	r3, [r7, #22]
 8003134:	2b07      	cmp	r3, #7
 8003136:	d802      	bhi.n	800313e <isotp_receive_first_frame+0x40>
        // isotp_user_debug("Should not use multiple frame transmission.");
        return ISOTP_RET_LENGTH;
 8003138:	f06f 0306 	mvn.w	r3, #6
 800313c:	e01a      	b.n	8003174 <isotp_receive_first_frame+0x76>
    }
    
    if (payload_length > link->receive_buf_size) {
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003142:	8afa      	ldrh	r2, [r7, #22]
 8003144:	429a      	cmp	r2, r3
 8003146:	d902      	bls.n	800314e <isotp_receive_first_frame+0x50>
        // isotp_user_debug("Multi-frame response too large for receiving buffer.");
        return ISOTP_RET_OVERFLOW;
 8003148:	f06f 0302 	mvn.w	r3, #2
 800314c:	e012      	b.n	8003174 <isotp_receive_first_frame+0x76>
    }
    
    /* copying data */
    (void) memcpy(link->receive_buffer, message->as.first_frame.data, sizeof(message->as.first_frame.data));
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	3302      	adds	r3, #2
 8003156:	2206      	movs	r2, #6
 8003158:	4619      	mov	r1, r3
 800315a:	f000 fdbe 	bl	8003cda <memcpy>
    link->receive_size = payload_length;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8afa      	ldrh	r2, [r7, #22]
 8003162:	85da      	strh	r2, [r3, #46]	@ 0x2e
    link->receive_offset = sizeof(message->as.first_frame.data);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2206      	movs	r2, #6
 8003168:	861a      	strh	r2, [r3, #48]	@ 0x30
    link->receive_sn = 1;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

    return ISOTP_RET_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <isotp_receive_consecutive_frame>:

static int isotp_receive_consecutive_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	71fb      	strb	r3, [r7, #7]
    uint16_t remaining_bytes;
    
    /* check sn */
    if (link->receive_sn != message->as.consecutive_frame.SN) {
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	7812      	ldrb	r2, [r2, #0]
 8003194:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	4293      	cmp	r3, r2
 800319c:	d002      	beq.n	80031a4 <isotp_receive_consecutive_frame+0x28>
        return ISOTP_RET_WRONG_SN;
 800319e:	f06f 0303 	mvn.w	r3, #3
 80031a2:	e035      	b.n	8003210 <isotp_receive_consecutive_frame+0x94>
    }

    /* check data length */
    remaining_bytes = link->receive_size - link->receive_offset;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8dda      	ldrh	r2, [r3, #46]	@ 0x2e
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	82fb      	strh	r3, [r7, #22]
    if (remaining_bytes > sizeof(message->as.consecutive_frame.data)) {
 80031b0:	8afb      	ldrh	r3, [r7, #22]
 80031b2:	2b07      	cmp	r3, #7
 80031b4:	d901      	bls.n	80031ba <isotp_receive_consecutive_frame+0x3e>
        remaining_bytes = sizeof(message->as.consecutive_frame.data);
 80031b6:	2307      	movs	r3, #7
 80031b8:	82fb      	strh	r3, [r7, #22]
    }
    if (remaining_bytes > len - 1) {
 80031ba:	79fa      	ldrb	r2, [r7, #7]
 80031bc:	8afb      	ldrh	r3, [r7, #22]
 80031be:	429a      	cmp	r2, r3
 80031c0:	dc02      	bgt.n	80031c8 <isotp_receive_consecutive_frame+0x4c>
        // isotp_user_debug("Consecutive frame too short.");
        return ISOTP_RET_LENGTH;
 80031c2:	f06f 0306 	mvn.w	r3, #6
 80031c6:	e023      	b.n	8003210 <isotp_receive_consecutive_frame+0x94>
    }

    /* copying data */
    (void) memcpy(link->receive_buffer + link->receive_offset, message->as.consecutive_frame.data, remaining_bytes);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	8e12      	ldrh	r2, [r2, #48]	@ 0x30
 80031d0:	1898      	adds	r0, r3, r2
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	3301      	adds	r3, #1
 80031d6:	8afa      	ldrh	r2, [r7, #22]
 80031d8:	4619      	mov	r1, r3
 80031da:	f000 fd7e 	bl	8003cda <memcpy>

    link->receive_offset += remaining_bytes;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80031e2:	8afb      	ldrh	r3, [r7, #22]
 80031e4:	4413      	add	r3, r2
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (++(link->receive_sn) > 0x0F) {
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80031f2:	3301      	adds	r3, #1
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003202:	2b0f      	cmp	r3, #15
 8003204:	d903      	bls.n	800320e <isotp_receive_consecutive_frame+0x92>
        link->receive_sn = 0;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }

    return ISOTP_RET_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <isotp_receive_flow_control_frame>:

static int isotp_receive_flow_control_frame(IsoTpLink *link, IsoTpCanMessage *message, uint8_t len) {
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	4613      	mov	r3, r2
 8003224:	71fb      	strb	r3, [r7, #7]
    /* check message length */
    if (len < 3) {
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d802      	bhi.n	8003232 <isotp_receive_flow_control_frame+0x1a>
        // isotp_user_debug("Flow control frame too short.");
        return ISOTP_RET_LENGTH;
 800322c:	f06f 0306 	mvn.w	r3, #6
 8003230:	e000      	b.n	8003234 <isotp_receive_flow_control_frame+0x1c>
    }

    return ISOTP_RET_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <isotp_send>:

///////////////////////////////////////////////////////
///                 PUBLIC FUNCTIONS                ///
///////////////////////////////////////////////////////

int isotp_send(IsoTpLink *link, const uint8_t payload[], uint16_t size) {
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	4613      	mov	r3, r2
 800324a:	80fb      	strh	r3, [r7, #6]
    return isotp_send_with_id(link, link->send_arbitration_id, payload, size);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f805 	bl	8003264 <isotp_send_with_id>
 800325a:	4603      	mov	r3, r0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <isotp_send_with_id>:

int isotp_send_with_id(IsoTpLink *link, uint32_t id, const uint8_t payload[], uint16_t size) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b0a6      	sub	sp, #152	@ 0x98
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	807b      	strh	r3, [r7, #2]
    int ret;

    if (link == 0x0) {
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <isotp_send_with_id+0x1a>
        // isotp_user_debug("Link is null!");
        return ISOTP_RET_ERROR;
 8003278:	f04f 33ff 	mov.w	r3, #4294967295
 800327c:	e057      	b.n	800332e <isotp_send_with_id+0xca>
    }

    if (size > link->send_buf_size) {
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	891b      	ldrh	r3, [r3, #8]
 8003282:	887a      	ldrh	r2, [r7, #2]
 8003284:	429a      	cmp	r2, r3
 8003286:	d90a      	bls.n	800329e <isotp_send_with_id+0x3a>
        // isotp_user_debug("Message size too large. Increase ISO_TP_MAX_MESSAGE_SIZE to set a larger buffer\n");
        char message[128];
        sprintf(&message[0], "Attempted to send %d bytes; max size is %d!\n", size, link->send_buf_size);
 8003288:	887a      	ldrh	r2, [r7, #2]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	891b      	ldrh	r3, [r3, #8]
 800328e:	f107 0014 	add.w	r0, r7, #20
 8003292:	4929      	ldr	r1, [pc, #164]	@ (8003338 <isotp_send_with_id+0xd4>)
 8003294:	f000 fbae 	bl	80039f4 <siprintf>
        return ISOTP_RET_OVERFLOW;
 8003298:	f06f 0302 	mvn.w	r3, #2
 800329c:	e047      	b.n	800332e <isotp_send_with_id+0xca>
    }

    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d102      	bne.n	80032ae <isotp_send_with_id+0x4a>
        // isotp_user_debug("Abort previous message, transmission in progress.\n");
        return ISOTP_RET_INPROGRESS;
 80032a8:	f06f 0301 	mvn.w	r3, #1
 80032ac:	e03f      	b.n	800332e <isotp_send_with_id+0xca>
    }

    /* copy into local buffer */
    link->send_size = size;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	887a      	ldrh	r2, [r7, #2]
 80032b2:	815a      	strh	r2, [r3, #10]
    link->send_offset = 0;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	819a      	strh	r2, [r3, #12]
    (void) memcpy(link->send_buffer, payload, size);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fd09 	bl	8003cda <memcpy>

    if (link->send_size < 8) {
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	895b      	ldrh	r3, [r3, #10]
 80032cc:	2b07      	cmp	r3, #7
 80032ce:	d806      	bhi.n	80032de <isotp_send_with_id+0x7a>
        /* send single frame */
        ret = isotp_send_single_frame(link, id);
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f7ff fde2 	bl	8002e9c <isotp_send_single_frame>
 80032d8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 80032dc:	e025      	b.n	800332a <isotp_send_with_id+0xc6>
    } else {
        /* send multi-frame */
        ret = isotp_send_first_frame(link, id);
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f7ff fe25 	bl	8002f30 <isotp_send_first_frame>
 80032e6:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

        /* init multi-frame control flags */
        if (ISOTP_RET_OK == ret) {
 80032ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d11b      	bne.n	800332a <isotp_send_with_id+0xc6>
            link->send_bs_remain = 0;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	821a      	strh	r2, [r3, #16]
            link->send_st_min = 0;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	749a      	strb	r2, [r3, #18]
            link->send_wtf_count = 0;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	74da      	strb	r2, [r3, #19]
            link->send_timer_st = isotp_user_get_ms();
 8003304:	f7ff fd5a 	bl	8002dbc <isotp_user_get_ms>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	615a      	str	r2, [r3, #20]
            link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800330e:	f7ff fd55 	bl	8002dbc <isotp_user_get_ms>
 8003312:	4603      	mov	r3, r0
 8003314:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	619a      	str	r2, [r3, #24]
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_INPROGRESS;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    return ret;
 800332a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
}
 800332e:	4618      	mov	r0, r3
 8003330:	3798      	adds	r7, #152	@ 0x98
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	08004c04 	.word	0x08004c04

0800333c <isotp_on_can_message>:

void isotp_on_can_message(IsoTpLink *link, uint8_t *data, uint8_t len) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	4613      	mov	r3, r2
 8003348:	71fb      	strb	r3, [r7, #7]
    IsoTpCanMessage message;
    int ret;
    
    if (len < 2 || len > 8) {
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	2b01      	cmp	r3, #1
 800334e:	f240 8143 	bls.w	80035d8 <isotp_on_can_message+0x29c>
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	2b08      	cmp	r3, #8
 8003356:	f200 813f 	bhi.w	80035d8 <isotp_on_can_message+0x29c>
        return;
    }

    memcpy(message.as.data_array.ptr, data, len);
 800335a:	79fa      	ldrb	r2, [r7, #7]
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fcb9 	bl	8003cda <memcpy>
    memset(message.as.data_array.ptr + len, 0, sizeof(message.as.data_array.ptr) - len);
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	f107 0214 	add.w	r2, r7, #20
 800336e:	18d0      	adds	r0, r2, r3
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	f1c3 0308 	rsb	r3, r3, #8
 8003376:	461a      	mov	r2, r3
 8003378:	2100      	movs	r1, #0
 800337a:	f000 fc33 	bl	8003be4 <memset>

    switch (message.as.common.type) {
 800337e:	7d3b      	ldrb	r3, [r7, #20]
 8003380:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b03      	cmp	r3, #3
 8003388:	f200 811a 	bhi.w	80035c0 <isotp_on_can_message+0x284>
 800338c:	a201      	add	r2, pc, #4	@ (adr r2, 8003394 <isotp_on_can_message+0x58>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033a5 	.word	0x080033a5
 8003398:	080033e1 	.word	0x080033e1
 800339c:	08003469 	.word	0x08003469
 80033a0:	08003507 	.word	0x08003507
        case ISOTP_PCI_TYPE_SINGLE: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d104      	bne.n	80033b8 <isotp_on_can_message+0x7c>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f06f 0205 	mvn.w	r2, #5
 80033b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80033b6:	e002      	b.n	80033be <isotp_on_can_message+0x82>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_single_frame(link, &message, len);
 80033be:	79fa      	ldrb	r2, [r7, #7]
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	4619      	mov	r1, r3
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f7ff fe66 	bl	8003098 <isotp_receive_single_frame>
 80033cc:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f040 80f7 	bne.w	80035c4 <isotp_on_can_message+0x288>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
            }
            break;
 80033de:	e0f1      	b.n	80035c4 <isotp_on_can_message+0x288>
        }
        case ISOTP_PCI_TYPE_FIRST_FRAME: {
            /* update protocol result */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d104      	bne.n	80033f4 <isotp_on_can_message+0xb8>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f06f 0205 	mvn.w	r2, #5
 80033f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80033f2:	e002      	b.n	80033fa <isotp_on_can_message+0xbe>
            } else {
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_OK;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* handle message */
            ret = isotp_receive_first_frame(link, &message, len);
 80033fa:	79fa      	ldrb	r2, [r7, #7]
 80033fc:	f107 0314 	add.w	r3, r7, #20
 8003400:	4619      	mov	r1, r3
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f7ff fe7b 	bl	80030fe <isotp_receive_first_frame>
 8003408:	61f8      	str	r0, [r7, #28]

            /* if overflow happened */
            if (ISOTP_RET_OVERFLOW == ret) {
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f113 0f03 	cmn.w	r3, #3
 8003410:	d10e      	bne.n	8003430 <isotp_on_can_message+0xf4>
                /* update protocol result */
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f06f 0207 	mvn.w	r2, #7
 8003418:	639a      	str	r2, [r3, #56]	@ 0x38
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send error message */
                isotp_send_flow_control(link, PCI_FLOW_STATUS_OVERFLOW, 0, 0);
 8003422:	2300      	movs	r3, #0
 8003424:	2200      	movs	r2, #0
 8003426:	2102      	movs	r1, #2
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f7ff fcfe 	bl	8002e2a <isotp_send_flow_control>
                break;
 800342e:	e0d2      	b.n	80035d6 <isotp_on_can_message+0x29a>
            }

            /* if receive successful */
            if (ISOTP_RET_OK == ret) {
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f040 80c8 	bne.w	80035c8 <isotp_on_can_message+0x28c>
                /* change status */
                link->receive_status = ISOTP_RECEIVE_STATUS_INPROGRESS;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                /* send fc frame */
                link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2208      	movs	r2, #8
 8003444:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800344e:	2319      	movs	r3, #25
 8003450:	2100      	movs	r1, #0
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7ff fce9 	bl	8002e2a <isotp_send_flow_control>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8003458:	f7ff fcb0 	bl	8002dbc <isotp_user_get_ms>
 800345c:	4603      	mov	r3, r0
 800345e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	635a      	str	r2, [r3, #52]	@ 0x34
            }
            
            break;
 8003466:	e0af      	b.n	80035c8 <isotp_on_can_message+0x28c>
        }
        case TSOTP_PCI_TYPE_CONSECUTIVE_FRAME: {
            /* check if in receiving status */
            if (ISOTP_RECEIVE_STATUS_INPROGRESS != link->receive_status) {
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800346e:	2b01      	cmp	r3, #1
 8003470:	d004      	beq.n	800347c <isotp_on_can_message+0x140>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_UNEXP_PDU;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f06f 0205 	mvn.w	r2, #5
 8003478:	639a      	str	r2, [r3, #56]	@ 0x38
                break;
 800347a:	e0ac      	b.n	80035d6 <isotp_on_can_message+0x29a>
            }

            /* handle message */
            ret = isotp_receive_consecutive_frame(link, &message, len);
 800347c:	79fa      	ldrb	r2, [r7, #7]
 800347e:	f107 0314 	add.w	r3, r7, #20
 8003482:	4619      	mov	r1, r3
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff fe79 	bl	800317c <isotp_receive_consecutive_frame>
 800348a:	61f8      	str	r0, [r7, #28]

            /* if wrong sn */
            if (ISOTP_RET_WRONG_SN == ret) {
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f113 0f04 	cmn.w	r3, #4
 8003492:	d108      	bne.n	80034a6 <isotp_on_can_message+0x16a>
                link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_WRONG_SN;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f06f 0203 	mvn.w	r2, #3
 800349a:	639a      	str	r2, [r3, #56]	@ 0x38
                link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                break;
 80034a4:	e097      	b.n	80035d6 <isotp_on_can_message+0x29a>
            }

            /* if success */
            if (ISOTP_RET_OK == ret) {
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f040 808f 	bne.w	80035cc <isotp_on_can_message+0x290>
                /* refresh timer cs */
                link->receive_timer_cr = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 80034ae:	f7ff fc85 	bl	8002dbc <isotp_user_get_ms>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	635a      	str	r2, [r3, #52]	@ 0x34
                
                /* receive finished */
                if (link->receive_offset >= link->receive_size) {
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d304      	bcc.n	80034d2 <isotp_on_can_message+0x196>
                    link->receive_status = ISOTP_RECEIVE_STATUS_FULL;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
                    }
                }
            }
            
            break;
 80034d0:	e07c      	b.n	80035cc <isotp_on_can_message+0x290>
                    if (0 == --link->receive_bs_count) {
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80034d8:	3b01      	subs	r3, #1
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d16f      	bne.n	80035cc <isotp_on_can_message+0x290>
                        link->receive_bs_count = ISO_TP_DEFAULT_BLOCK_SIZE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2208      	movs	r2, #8
 80034f0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                        isotp_send_flow_control(link, PCI_FLOW_STATUS_CONTINUE, link->receive_bs_count, ISO_TP_DEFAULT_ST_MIN);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 80034fa:	2319      	movs	r3, #25
 80034fc:	2100      	movs	r1, #0
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff fc93 	bl	8002e2a <isotp_send_flow_control>
            break;
 8003504:	e062      	b.n	80035cc <isotp_on_can_message+0x290>
        }
        case ISOTP_PCI_TYPE_FLOW_CONTROL_FRAME:
            /* handle fc frame only when sending in progress  */
            if (ISOTP_SEND_STATUS_INPROGRESS != link->send_status) {
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d15f      	bne.n	80035d0 <isotp_on_can_message+0x294>
                break;
            }

            /* handle message */
            ret = isotp_receive_flow_control_frame(link, &message, len);
 8003510:	79fa      	ldrb	r2, [r7, #7]
 8003512:	f107 0314 	add.w	r3, r7, #20
 8003516:	4619      	mov	r1, r3
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f7ff fe7d 	bl	8003218 <isotp_receive_flow_control_frame>
 800351e:	61f8      	str	r0, [r7, #28]
            
            if (ISOTP_RET_OK == ret) {
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d156      	bne.n	80035d4 <isotp_on_can_message+0x298>
                /* refresh bs timer */
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 8003526:	f7ff fc49 	bl	8002dbc <isotp_user_get_ms>
 800352a:	4603      	mov	r3, r0
 800352c:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	619a      	str	r2, [r3, #24]

                /* overflow */
                if (PCI_FLOW_STATUS_OVERFLOW == message.as.flow_control.FS) {
 8003534:	7d3b      	ldrb	r3, [r7, #20]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d108      	bne.n	8003552 <isotp_on_can_message+0x216>
                    link->send_protocol_result = ISOTP_PROTOCOL_RESULT_BUFFER_OVFLW;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f06f 0207 	mvn.w	r2, #7
 8003546:	61da      	str	r2, [r3, #28]
                    link->send_status = ISOTP_SEND_STATUS_ERROR;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2020 	strb.w	r2, [r3, #32]
                    }
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
                    link->send_wtf_count = 0;
                }
            }
            break;
 8003550:	e040      	b.n	80035d4 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_WAIT == message.as.flow_control.FS) {
 8003552:	7d3b      	ldrb	r3, [r7, #20]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d112      	bne.n	8003584 <isotp_on_can_message+0x248>
                    link->send_wtf_count += 1;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	7cdb      	ldrb	r3, [r3, #19]
 8003562:	3301      	adds	r3, #1
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	74da      	strb	r2, [r3, #19]
                    if (link->send_wtf_count > ISO_TP_MAX_WFT_NUMBER) {
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	7cdb      	ldrb	r3, [r3, #19]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d930      	bls.n	80035d4 <isotp_on_can_message+0x298>
                        link->send_protocol_result = ISOTP_PROTOCOL_RESULT_WFT_OVRN;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f06f 0206 	mvn.w	r2, #6
 8003578:	61da      	str	r2, [r3, #28]
                        link->send_status = ISOTP_SEND_STATUS_ERROR;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 2020 	strb.w	r2, [r3, #32]
            break;
 8003582:	e027      	b.n	80035d4 <isotp_on_can_message+0x298>
                else if (PCI_FLOW_STATUS_CONTINUE == message.as.flow_control.FS) {
 8003584:	7d3b      	ldrb	r3, [r7, #20]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d121      	bne.n	80035d4 <isotp_on_can_message+0x298>
                    if (0 == message.as.flow_control.BS) {
 8003590:	7d7b      	ldrb	r3, [r7, #21]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <isotp_on_can_message+0x264>
                        link->send_bs_remain = ISOTP_INVALID_BS;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800359c:	821a      	strh	r2, [r3, #16]
 800359e:	e003      	b.n	80035a8 <isotp_on_can_message+0x26c>
                        link->send_bs_remain = message.as.flow_control.BS;
 80035a0:	7d7b      	ldrb	r3, [r7, #21]
 80035a2:	461a      	mov	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	821a      	strh	r2, [r3, #16]
                    link->send_st_min = isotp_st_min_to_ms(message.as.flow_control.STmin);
 80035a8:	7dbb      	ldrb	r3, [r7, #22]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fc20 	bl	8002df0 <isotp_st_min_to_ms>
 80035b0:	4603      	mov	r3, r0
 80035b2:	461a      	mov	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	749a      	strb	r2, [r3, #18]
                    link->send_wtf_count = 0;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	74da      	strb	r2, [r3, #19]
            break;
 80035be:	e009      	b.n	80035d4 <isotp_on_can_message+0x298>
        default:
            break;
 80035c0:	bf00      	nop
 80035c2:	e00a      	b.n	80035da <isotp_on_can_message+0x29e>
            break;
 80035c4:	bf00      	nop
 80035c6:	e008      	b.n	80035da <isotp_on_can_message+0x29e>
            break;
 80035c8:	bf00      	nop
 80035ca:	e006      	b.n	80035da <isotp_on_can_message+0x29e>
            break;
 80035cc:	bf00      	nop
 80035ce:	e004      	b.n	80035da <isotp_on_can_message+0x29e>
                break;
 80035d0:	bf00      	nop
 80035d2:	e002      	b.n	80035da <isotp_on_can_message+0x29e>
            break;
 80035d4:	bf00      	nop
    };
    
    return;
 80035d6:	e000      	b.n	80035da <isotp_on_can_message+0x29e>
        return;
 80035d8:	bf00      	nop
}
 80035da:	3720      	adds	r7, #32
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <isotp_init_link>:
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;

    return ISOTP_RET_OK;
}

void isotp_init_link(IsoTpLink *link, uint32_t sendid, uint8_t *sendbuf, uint16_t sendbufsize, uint8_t *recvbuf, uint16_t recvbufsize) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	807b      	strh	r3, [r7, #2]
    memset(link, 0, sizeof(*link));
 80035ee:	2240      	movs	r2, #64	@ 0x40
 80035f0:	2100      	movs	r1, #0
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 faf6 	bl	8003be4 <memset>
    link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    link->send_status = ISOTP_SEND_STATUS_IDLE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2020 	strb.w	r2, [r3, #32]
    link->send_arbitration_id = sendid;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	601a      	str	r2, [r3, #0]
    link->send_buffer = sendbuf;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	605a      	str	r2, [r3, #4]
    link->send_buf_size = sendbufsize;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	887a      	ldrh	r2, [r7, #2]
 8003618:	811a      	strh	r2, [r3, #8]
    link->receive_buffer = recvbuf;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	629a      	str	r2, [r3, #40]	@ 0x28
    link->receive_buf_size = recvbufsize;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8bba      	ldrh	r2, [r7, #28]
 8003624:	859a      	strh	r2, [r3, #44]	@ 0x2c
    
    return;
 8003626:	bf00      	nop
}
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <isotp_poll>:

void isotp_poll(IsoTpLink *link) {
 800362e:	b590      	push	{r4, r7, lr}
 8003630:	b085      	sub	sp, #20
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
    int ret;

    /* only polling when operation in progress */
    if (ISOTP_SEND_STATUS_INPROGRESS == link->send_status) {
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3020 	ldrb.w	r3, [r3, #32]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d15c      	bne.n	80036fa <isotp_poll+0xcc>

        /* continue send data */
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8a1b      	ldrh	r3, [r3, #16]
        if (/* send data if bs_remain is invalid or bs_remain large than zero */
 8003644:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003648:	4293      	cmp	r3, r2
 800364a:	d003      	beq.n	8003654 <isotp_poll+0x26>
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8a1b      	ldrh	r3, [r3, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d041      	beq.n	80036d8 <isotp_poll+0xaa>
        /* and if st_min is zero or go beyond interval time */
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	7c9b      	ldrb	r3, [r3, #18]
        (ISOTP_INVALID_BS == link->send_bs_remain || link->send_bs_remain > 0) &&
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00c      	beq.n	8003676 <isotp_poll+0x48>
        (0 == link->send_st_min || (0 != link->send_st_min && IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_st)))) {
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7c9b      	ldrb	r3, [r3, #18]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d039      	beq.n	80036d8 <isotp_poll+0xaa>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	461c      	mov	r4, r3
 800366a:	f7ff fba7 	bl	8002dbc <isotp_user_get_ms>
 800366e:	4603      	mov	r3, r0
 8003670:	1ae3      	subs	r3, r4, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	da30      	bge.n	80036d8 <isotp_poll+0xaa>
            
            ret = isotp_send_consecutive_frame(link);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff fca4 	bl	8002fc4 <isotp_send_consecutive_frame>
 800367c:	60f8      	str	r0, [r7, #12]
            if (ISOTP_RET_OK == ret) {
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d125      	bne.n	80036d0 <isotp_poll+0xa2>
                if (ISOTP_INVALID_BS != link->send_bs_remain) {
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8a1b      	ldrh	r3, [r3, #16]
 8003688:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800368c:	4293      	cmp	r3, r2
 800368e:	d005      	beq.n	800369c <isotp_poll+0x6e>
                    link->send_bs_remain -= 1;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	8a1b      	ldrh	r3, [r3, #16]
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	821a      	strh	r2, [r3, #16]
                }
                link->send_timer_bs = isotp_user_get_ms() + ISO_TP_DEFAULT_RESPONSE_TIMEOUT;
 800369c:	f7ff fb8e 	bl	8002dbc <isotp_user_get_ms>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	619a      	str	r2, [r3, #24]
                link->send_timer_st = isotp_user_get_ms() + link->send_st_min;
 80036aa:	f7ff fb87 	bl	8002dbc <isotp_user_get_ms>
 80036ae:	4602      	mov	r2, r0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	7c9b      	ldrb	r3, [r3, #18]
 80036b4:	441a      	add	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	615a      	str	r2, [r3, #20]

                /* check if send finish */
                if (link->send_offset >= link->send_size) {
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	899a      	ldrh	r2, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	895b      	ldrh	r3, [r3, #10]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d308      	bcc.n	80036d8 <isotp_poll+0xaa>
                    link->send_status = ISOTP_SEND_STATUS_IDLE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2020 	strb.w	r2, [r3, #32]
 80036ce:	e003      	b.n	80036d8 <isotp_poll+0xaa>
                }
            } else {
                link->send_status = ISOTP_SEND_STATUS_ERROR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }

        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->send_timer_bs)) {
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	461c      	mov	r4, r3
 80036de:	f7ff fb6d 	bl	8002dbc <isotp_user_get_ms>
 80036e2:	4603      	mov	r3, r0
 80036e4:	1ae3      	subs	r3, r4, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da07      	bge.n	80036fa <isotp_poll+0xcc>
            link->send_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_BS;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f06f 0201 	mvn.w	r2, #1
 80036f0:	61da      	str	r2, [r3, #28]
            link->send_status = ISOTP_SEND_STATUS_ERROR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2202      	movs	r2, #2
 80036f6:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }

    /* only polling when operation in progress */
    if (ISOTP_RECEIVE_STATUS_INPROGRESS == link->receive_status) {
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d111      	bne.n	8003728 <isotp_poll+0xfa>
        
        /* check timeout */
        if (IsoTpTimeAfter(isotp_user_get_ms(), link->receive_timer_cr)) {
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003708:	461c      	mov	r4, r3
 800370a:	f7ff fb57 	bl	8002dbc <isotp_user_get_ms>
 800370e:	4603      	mov	r3, r0
 8003710:	1ae3      	subs	r3, r4, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	da08      	bge.n	8003728 <isotp_poll+0xfa>
            link->receive_protocol_result = ISOTP_PROTOCOL_RESULT_TIMEOUT_CR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f06f 0202 	mvn.w	r2, #2
 800371c:	639a      	str	r2, [r3, #56]	@ 0x38
            link->receive_status = ISOTP_RECEIVE_STATUS_IDLE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    return;
 8003726:	bf00      	nop
 8003728:	bf00      	nop
}
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	bd90      	pop	{r4, r7, pc}

08003730 <__assert_func>:
 8003730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003732:	4614      	mov	r4, r2
 8003734:	461a      	mov	r2, r3
 8003736:	4b09      	ldr	r3, [pc, #36]	@ (800375c <__assert_func+0x2c>)
 8003738:	4605      	mov	r5, r0
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68d8      	ldr	r0, [r3, #12]
 800373e:	b954      	cbnz	r4, 8003756 <__assert_func+0x26>
 8003740:	4b07      	ldr	r3, [pc, #28]	@ (8003760 <__assert_func+0x30>)
 8003742:	461c      	mov	r4, r3
 8003744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003748:	9100      	str	r1, [sp, #0]
 800374a:	462b      	mov	r3, r5
 800374c:	4905      	ldr	r1, [pc, #20]	@ (8003764 <__assert_func+0x34>)
 800374e:	f000 f8b1 	bl	80038b4 <fiprintf>
 8003752:	f000 fad0 	bl	8003cf6 <abort>
 8003756:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <__assert_func+0x38>)
 8003758:	e7f4      	b.n	8003744 <__assert_func+0x14>
 800375a:	bf00      	nop
 800375c:	20000018 	.word	0x20000018
 8003760:	08004ce8 	.word	0x08004ce8
 8003764:	08004cba 	.word	0x08004cba
 8003768:	08004cad 	.word	0x08004cad

0800376c <std>:
 800376c:	2300      	movs	r3, #0
 800376e:	b510      	push	{r4, lr}
 8003770:	4604      	mov	r4, r0
 8003772:	e9c0 3300 	strd	r3, r3, [r0]
 8003776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800377a:	6083      	str	r3, [r0, #8]
 800377c:	8181      	strh	r1, [r0, #12]
 800377e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003780:	81c2      	strh	r2, [r0, #14]
 8003782:	6183      	str	r3, [r0, #24]
 8003784:	4619      	mov	r1, r3
 8003786:	2208      	movs	r2, #8
 8003788:	305c      	adds	r0, #92	@ 0x5c
 800378a:	f000 fa2b 	bl	8003be4 <memset>
 800378e:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <std+0x58>)
 8003790:	6224      	str	r4, [r4, #32]
 8003792:	6263      	str	r3, [r4, #36]	@ 0x24
 8003794:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <std+0x5c>)
 8003796:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003798:	4b0c      	ldr	r3, [pc, #48]	@ (80037cc <std+0x60>)
 800379a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800379c:	4b0c      	ldr	r3, [pc, #48]	@ (80037d0 <std+0x64>)
 800379e:	6323      	str	r3, [r4, #48]	@ 0x30
 80037a0:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <std+0x68>)
 80037a2:	429c      	cmp	r4, r3
 80037a4:	d006      	beq.n	80037b4 <std+0x48>
 80037a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80037aa:	4294      	cmp	r4, r2
 80037ac:	d002      	beq.n	80037b4 <std+0x48>
 80037ae:	33d0      	adds	r3, #208	@ 0xd0
 80037b0:	429c      	cmp	r4, r3
 80037b2:	d105      	bne.n	80037c0 <std+0x54>
 80037b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80037b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037bc:	f000 ba8a 	b.w	8003cd4 <__retarget_lock_init_recursive>
 80037c0:	bd10      	pop	{r4, pc}
 80037c2:	bf00      	nop
 80037c4:	08003a35 	.word	0x08003a35
 80037c8:	08003a57 	.word	0x08003a57
 80037cc:	08003a8f 	.word	0x08003a8f
 80037d0:	08003ab3 	.word	0x08003ab3
 80037d4:	20000204 	.word	0x20000204

080037d8 <stdio_exit_handler>:
 80037d8:	4a02      	ldr	r2, [pc, #8]	@ (80037e4 <stdio_exit_handler+0xc>)
 80037da:	4903      	ldr	r1, [pc, #12]	@ (80037e8 <stdio_exit_handler+0x10>)
 80037dc:	4803      	ldr	r0, [pc, #12]	@ (80037ec <stdio_exit_handler+0x14>)
 80037de:	f000 b87b 	b.w	80038d8 <_fwalk_sglue>
 80037e2:	bf00      	nop
 80037e4:	2000000c 	.word	0x2000000c
 80037e8:	08004845 	.word	0x08004845
 80037ec:	2000001c 	.word	0x2000001c

080037f0 <cleanup_stdio>:
 80037f0:	6841      	ldr	r1, [r0, #4]
 80037f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003824 <cleanup_stdio+0x34>)
 80037f4:	b510      	push	{r4, lr}
 80037f6:	4299      	cmp	r1, r3
 80037f8:	4604      	mov	r4, r0
 80037fa:	d001      	beq.n	8003800 <cleanup_stdio+0x10>
 80037fc:	f001 f822 	bl	8004844 <_fflush_r>
 8003800:	68a1      	ldr	r1, [r4, #8]
 8003802:	4b09      	ldr	r3, [pc, #36]	@ (8003828 <cleanup_stdio+0x38>)
 8003804:	4299      	cmp	r1, r3
 8003806:	d002      	beq.n	800380e <cleanup_stdio+0x1e>
 8003808:	4620      	mov	r0, r4
 800380a:	f001 f81b 	bl	8004844 <_fflush_r>
 800380e:	68e1      	ldr	r1, [r4, #12]
 8003810:	4b06      	ldr	r3, [pc, #24]	@ (800382c <cleanup_stdio+0x3c>)
 8003812:	4299      	cmp	r1, r3
 8003814:	d004      	beq.n	8003820 <cleanup_stdio+0x30>
 8003816:	4620      	mov	r0, r4
 8003818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800381c:	f001 b812 	b.w	8004844 <_fflush_r>
 8003820:	bd10      	pop	{r4, pc}
 8003822:	bf00      	nop
 8003824:	20000204 	.word	0x20000204
 8003828:	2000026c 	.word	0x2000026c
 800382c:	200002d4 	.word	0x200002d4

08003830 <global_stdio_init.part.0>:
 8003830:	b510      	push	{r4, lr}
 8003832:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <global_stdio_init.part.0+0x30>)
 8003834:	4c0b      	ldr	r4, [pc, #44]	@ (8003864 <global_stdio_init.part.0+0x34>)
 8003836:	4a0c      	ldr	r2, [pc, #48]	@ (8003868 <global_stdio_init.part.0+0x38>)
 8003838:	4620      	mov	r0, r4
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	2104      	movs	r1, #4
 800383e:	2200      	movs	r2, #0
 8003840:	f7ff ff94 	bl	800376c <std>
 8003844:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003848:	2201      	movs	r2, #1
 800384a:	2109      	movs	r1, #9
 800384c:	f7ff ff8e 	bl	800376c <std>
 8003850:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003854:	2202      	movs	r2, #2
 8003856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800385a:	2112      	movs	r1, #18
 800385c:	f7ff bf86 	b.w	800376c <std>
 8003860:	2000033c 	.word	0x2000033c
 8003864:	20000204 	.word	0x20000204
 8003868:	080037d9 	.word	0x080037d9

0800386c <__sfp_lock_acquire>:
 800386c:	4801      	ldr	r0, [pc, #4]	@ (8003874 <__sfp_lock_acquire+0x8>)
 800386e:	f000 ba32 	b.w	8003cd6 <__retarget_lock_acquire_recursive>
 8003872:	bf00      	nop
 8003874:	20000345 	.word	0x20000345

08003878 <__sfp_lock_release>:
 8003878:	4801      	ldr	r0, [pc, #4]	@ (8003880 <__sfp_lock_release+0x8>)
 800387a:	f000 ba2d 	b.w	8003cd8 <__retarget_lock_release_recursive>
 800387e:	bf00      	nop
 8003880:	20000345 	.word	0x20000345

08003884 <__sinit>:
 8003884:	b510      	push	{r4, lr}
 8003886:	4604      	mov	r4, r0
 8003888:	f7ff fff0 	bl	800386c <__sfp_lock_acquire>
 800388c:	6a23      	ldr	r3, [r4, #32]
 800388e:	b11b      	cbz	r3, 8003898 <__sinit+0x14>
 8003890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003894:	f7ff bff0 	b.w	8003878 <__sfp_lock_release>
 8003898:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <__sinit+0x28>)
 800389a:	6223      	str	r3, [r4, #32]
 800389c:	4b04      	ldr	r3, [pc, #16]	@ (80038b0 <__sinit+0x2c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f5      	bne.n	8003890 <__sinit+0xc>
 80038a4:	f7ff ffc4 	bl	8003830 <global_stdio_init.part.0>
 80038a8:	e7f2      	b.n	8003890 <__sinit+0xc>
 80038aa:	bf00      	nop
 80038ac:	080037f1 	.word	0x080037f1
 80038b0:	2000033c 	.word	0x2000033c

080038b4 <fiprintf>:
 80038b4:	b40e      	push	{r1, r2, r3}
 80038b6:	b503      	push	{r0, r1, lr}
 80038b8:	4601      	mov	r1, r0
 80038ba:	ab03      	add	r3, sp, #12
 80038bc:	4805      	ldr	r0, [pc, #20]	@ (80038d4 <fiprintf+0x20>)
 80038be:	f853 2b04 	ldr.w	r2, [r3], #4
 80038c2:	6800      	ldr	r0, [r0, #0]
 80038c4:	9301      	str	r3, [sp, #4]
 80038c6:	f000 fc93 	bl	80041f0 <_vfiprintf_r>
 80038ca:	b002      	add	sp, #8
 80038cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80038d0:	b003      	add	sp, #12
 80038d2:	4770      	bx	lr
 80038d4:	20000018 	.word	0x20000018

080038d8 <_fwalk_sglue>:
 80038d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038dc:	4607      	mov	r7, r0
 80038de:	4688      	mov	r8, r1
 80038e0:	4614      	mov	r4, r2
 80038e2:	2600      	movs	r6, #0
 80038e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038e8:	f1b9 0901 	subs.w	r9, r9, #1
 80038ec:	d505      	bpl.n	80038fa <_fwalk_sglue+0x22>
 80038ee:	6824      	ldr	r4, [r4, #0]
 80038f0:	2c00      	cmp	r4, #0
 80038f2:	d1f7      	bne.n	80038e4 <_fwalk_sglue+0xc>
 80038f4:	4630      	mov	r0, r6
 80038f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038fa:	89ab      	ldrh	r3, [r5, #12]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d907      	bls.n	8003910 <_fwalk_sglue+0x38>
 8003900:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003904:	3301      	adds	r3, #1
 8003906:	d003      	beq.n	8003910 <_fwalk_sglue+0x38>
 8003908:	4629      	mov	r1, r5
 800390a:	4638      	mov	r0, r7
 800390c:	47c0      	blx	r8
 800390e:	4306      	orrs	r6, r0
 8003910:	3568      	adds	r5, #104	@ 0x68
 8003912:	e7e9      	b.n	80038e8 <_fwalk_sglue+0x10>

08003914 <iprintf>:
 8003914:	b40f      	push	{r0, r1, r2, r3}
 8003916:	b507      	push	{r0, r1, r2, lr}
 8003918:	4906      	ldr	r1, [pc, #24]	@ (8003934 <iprintf+0x20>)
 800391a:	ab04      	add	r3, sp, #16
 800391c:	6808      	ldr	r0, [r1, #0]
 800391e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003922:	6881      	ldr	r1, [r0, #8]
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	f000 fc63 	bl	80041f0 <_vfiprintf_r>
 800392a:	b003      	add	sp, #12
 800392c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003930:	b004      	add	sp, #16
 8003932:	4770      	bx	lr
 8003934:	20000018 	.word	0x20000018

08003938 <_puts_r>:
 8003938:	6a03      	ldr	r3, [r0, #32]
 800393a:	b570      	push	{r4, r5, r6, lr}
 800393c:	4605      	mov	r5, r0
 800393e:	460e      	mov	r6, r1
 8003940:	6884      	ldr	r4, [r0, #8]
 8003942:	b90b      	cbnz	r3, 8003948 <_puts_r+0x10>
 8003944:	f7ff ff9e 	bl	8003884 <__sinit>
 8003948:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800394a:	07db      	lsls	r3, r3, #31
 800394c:	d405      	bmi.n	800395a <_puts_r+0x22>
 800394e:	89a3      	ldrh	r3, [r4, #12]
 8003950:	0598      	lsls	r0, r3, #22
 8003952:	d402      	bmi.n	800395a <_puts_r+0x22>
 8003954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003956:	f000 f9be 	bl	8003cd6 <__retarget_lock_acquire_recursive>
 800395a:	89a3      	ldrh	r3, [r4, #12]
 800395c:	0719      	lsls	r1, r3, #28
 800395e:	d502      	bpl.n	8003966 <_puts_r+0x2e>
 8003960:	6923      	ldr	r3, [r4, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d135      	bne.n	80039d2 <_puts_r+0x9a>
 8003966:	4621      	mov	r1, r4
 8003968:	4628      	mov	r0, r5
 800396a:	f000 f8e5 	bl	8003b38 <__swsetup_r>
 800396e:	b380      	cbz	r0, 80039d2 <_puts_r+0x9a>
 8003970:	f04f 35ff 	mov.w	r5, #4294967295
 8003974:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003976:	07da      	lsls	r2, r3, #31
 8003978:	d405      	bmi.n	8003986 <_puts_r+0x4e>
 800397a:	89a3      	ldrh	r3, [r4, #12]
 800397c:	059b      	lsls	r3, r3, #22
 800397e:	d402      	bmi.n	8003986 <_puts_r+0x4e>
 8003980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003982:	f000 f9a9 	bl	8003cd8 <__retarget_lock_release_recursive>
 8003986:	4628      	mov	r0, r5
 8003988:	bd70      	pop	{r4, r5, r6, pc}
 800398a:	2b00      	cmp	r3, #0
 800398c:	da04      	bge.n	8003998 <_puts_r+0x60>
 800398e:	69a2      	ldr	r2, [r4, #24]
 8003990:	429a      	cmp	r2, r3
 8003992:	dc17      	bgt.n	80039c4 <_puts_r+0x8c>
 8003994:	290a      	cmp	r1, #10
 8003996:	d015      	beq.n	80039c4 <_puts_r+0x8c>
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	6022      	str	r2, [r4, #0]
 800399e:	7019      	strb	r1, [r3, #0]
 80039a0:	68a3      	ldr	r3, [r4, #8]
 80039a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80039a6:	3b01      	subs	r3, #1
 80039a8:	60a3      	str	r3, [r4, #8]
 80039aa:	2900      	cmp	r1, #0
 80039ac:	d1ed      	bne.n	800398a <_puts_r+0x52>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	da11      	bge.n	80039d6 <_puts_r+0x9e>
 80039b2:	4622      	mov	r2, r4
 80039b4:	210a      	movs	r1, #10
 80039b6:	4628      	mov	r0, r5
 80039b8:	f000 f87f 	bl	8003aba <__swbuf_r>
 80039bc:	3001      	adds	r0, #1
 80039be:	d0d7      	beq.n	8003970 <_puts_r+0x38>
 80039c0:	250a      	movs	r5, #10
 80039c2:	e7d7      	b.n	8003974 <_puts_r+0x3c>
 80039c4:	4622      	mov	r2, r4
 80039c6:	4628      	mov	r0, r5
 80039c8:	f000 f877 	bl	8003aba <__swbuf_r>
 80039cc:	3001      	adds	r0, #1
 80039ce:	d1e7      	bne.n	80039a0 <_puts_r+0x68>
 80039d0:	e7ce      	b.n	8003970 <_puts_r+0x38>
 80039d2:	3e01      	subs	r6, #1
 80039d4:	e7e4      	b.n	80039a0 <_puts_r+0x68>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	6022      	str	r2, [r4, #0]
 80039dc:	220a      	movs	r2, #10
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	e7ee      	b.n	80039c0 <_puts_r+0x88>
	...

080039e4 <puts>:
 80039e4:	4b02      	ldr	r3, [pc, #8]	@ (80039f0 <puts+0xc>)
 80039e6:	4601      	mov	r1, r0
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	f7ff bfa5 	b.w	8003938 <_puts_r>
 80039ee:	bf00      	nop
 80039f0:	20000018 	.word	0x20000018

080039f4 <siprintf>:
 80039f4:	b40e      	push	{r1, r2, r3}
 80039f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80039fa:	b500      	push	{lr}
 80039fc:	b09c      	sub	sp, #112	@ 0x70
 80039fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8003a00:	9002      	str	r0, [sp, #8]
 8003a02:	9006      	str	r0, [sp, #24]
 8003a04:	9107      	str	r1, [sp, #28]
 8003a06:	9104      	str	r1, [sp, #16]
 8003a08:	4808      	ldr	r0, [pc, #32]	@ (8003a2c <siprintf+0x38>)
 8003a0a:	4909      	ldr	r1, [pc, #36]	@ (8003a30 <siprintf+0x3c>)
 8003a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a10:	9105      	str	r1, [sp, #20]
 8003a12:	6800      	ldr	r0, [r0, #0]
 8003a14:	a902      	add	r1, sp, #8
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	f000 fac6 	bl	8003fa8 <_svfiprintf_r>
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	9b02      	ldr	r3, [sp, #8]
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	b01c      	add	sp, #112	@ 0x70
 8003a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a28:	b003      	add	sp, #12
 8003a2a:	4770      	bx	lr
 8003a2c:	20000018 	.word	0x20000018
 8003a30:	ffff0208 	.word	0xffff0208

08003a34 <__sread>:
 8003a34:	b510      	push	{r4, lr}
 8003a36:	460c      	mov	r4, r1
 8003a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a3c:	f000 f8fc 	bl	8003c38 <_read_r>
 8003a40:	2800      	cmp	r0, #0
 8003a42:	bfab      	itete	ge
 8003a44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a46:	89a3      	ldrhlt	r3, [r4, #12]
 8003a48:	181b      	addge	r3, r3, r0
 8003a4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a4e:	bfac      	ite	ge
 8003a50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a52:	81a3      	strhlt	r3, [r4, #12]
 8003a54:	bd10      	pop	{r4, pc}

08003a56 <__swrite>:
 8003a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a5a:	461f      	mov	r7, r3
 8003a5c:	898b      	ldrh	r3, [r1, #12]
 8003a5e:	4605      	mov	r5, r0
 8003a60:	05db      	lsls	r3, r3, #23
 8003a62:	460c      	mov	r4, r1
 8003a64:	4616      	mov	r6, r2
 8003a66:	d505      	bpl.n	8003a74 <__swrite+0x1e>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a70:	f000 f8d0 	bl	8003c14 <_lseek_r>
 8003a74:	89a3      	ldrh	r3, [r4, #12]
 8003a76:	4632      	mov	r2, r6
 8003a78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a7c:	81a3      	strh	r3, [r4, #12]
 8003a7e:	4628      	mov	r0, r5
 8003a80:	463b      	mov	r3, r7
 8003a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a8a:	f000 b8e7 	b.w	8003c5c <_write_r>

08003a8e <__sseek>:
 8003a8e:	b510      	push	{r4, lr}
 8003a90:	460c      	mov	r4, r1
 8003a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a96:	f000 f8bd 	bl	8003c14 <_lseek_r>
 8003a9a:	1c43      	adds	r3, r0, #1
 8003a9c:	89a3      	ldrh	r3, [r4, #12]
 8003a9e:	bf15      	itete	ne
 8003aa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003aa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003aa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003aaa:	81a3      	strheq	r3, [r4, #12]
 8003aac:	bf18      	it	ne
 8003aae:	81a3      	strhne	r3, [r4, #12]
 8003ab0:	bd10      	pop	{r4, pc}

08003ab2 <__sclose>:
 8003ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ab6:	f000 b89d 	b.w	8003bf4 <_close_r>

08003aba <__swbuf_r>:
 8003aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abc:	460e      	mov	r6, r1
 8003abe:	4614      	mov	r4, r2
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	b118      	cbz	r0, 8003acc <__swbuf_r+0x12>
 8003ac4:	6a03      	ldr	r3, [r0, #32]
 8003ac6:	b90b      	cbnz	r3, 8003acc <__swbuf_r+0x12>
 8003ac8:	f7ff fedc 	bl	8003884 <__sinit>
 8003acc:	69a3      	ldr	r3, [r4, #24]
 8003ace:	60a3      	str	r3, [r4, #8]
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	071a      	lsls	r2, r3, #28
 8003ad4:	d501      	bpl.n	8003ada <__swbuf_r+0x20>
 8003ad6:	6923      	ldr	r3, [r4, #16]
 8003ad8:	b943      	cbnz	r3, 8003aec <__swbuf_r+0x32>
 8003ada:	4621      	mov	r1, r4
 8003adc:	4628      	mov	r0, r5
 8003ade:	f000 f82b 	bl	8003b38 <__swsetup_r>
 8003ae2:	b118      	cbz	r0, 8003aec <__swbuf_r+0x32>
 8003ae4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ae8:	4638      	mov	r0, r7
 8003aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	6922      	ldr	r2, [r4, #16]
 8003af0:	b2f6      	uxtb	r6, r6
 8003af2:	1a98      	subs	r0, r3, r2
 8003af4:	6963      	ldr	r3, [r4, #20]
 8003af6:	4637      	mov	r7, r6
 8003af8:	4283      	cmp	r3, r0
 8003afa:	dc05      	bgt.n	8003b08 <__swbuf_r+0x4e>
 8003afc:	4621      	mov	r1, r4
 8003afe:	4628      	mov	r0, r5
 8003b00:	f000 fea0 	bl	8004844 <_fflush_r>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d1ed      	bne.n	8003ae4 <__swbuf_r+0x2a>
 8003b08:	68a3      	ldr	r3, [r4, #8]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	60a3      	str	r3, [r4, #8]
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	6022      	str	r2, [r4, #0]
 8003b14:	701e      	strb	r6, [r3, #0]
 8003b16:	6962      	ldr	r2, [r4, #20]
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d004      	beq.n	8003b28 <__swbuf_r+0x6e>
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	07db      	lsls	r3, r3, #31
 8003b22:	d5e1      	bpl.n	8003ae8 <__swbuf_r+0x2e>
 8003b24:	2e0a      	cmp	r6, #10
 8003b26:	d1df      	bne.n	8003ae8 <__swbuf_r+0x2e>
 8003b28:	4621      	mov	r1, r4
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f000 fe8a 	bl	8004844 <_fflush_r>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d0d9      	beq.n	8003ae8 <__swbuf_r+0x2e>
 8003b34:	e7d6      	b.n	8003ae4 <__swbuf_r+0x2a>
	...

08003b38 <__swsetup_r>:
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	4b29      	ldr	r3, [pc, #164]	@ (8003be0 <__swsetup_r+0xa8>)
 8003b3c:	4605      	mov	r5, r0
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	460c      	mov	r4, r1
 8003b42:	b118      	cbz	r0, 8003b4c <__swsetup_r+0x14>
 8003b44:	6a03      	ldr	r3, [r0, #32]
 8003b46:	b90b      	cbnz	r3, 8003b4c <__swsetup_r+0x14>
 8003b48:	f7ff fe9c 	bl	8003884 <__sinit>
 8003b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b50:	0719      	lsls	r1, r3, #28
 8003b52:	d422      	bmi.n	8003b9a <__swsetup_r+0x62>
 8003b54:	06da      	lsls	r2, r3, #27
 8003b56:	d407      	bmi.n	8003b68 <__swsetup_r+0x30>
 8003b58:	2209      	movs	r2, #9
 8003b5a:	602a      	str	r2, [r5, #0]
 8003b5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295
 8003b64:	81a3      	strh	r3, [r4, #12]
 8003b66:	e033      	b.n	8003bd0 <__swsetup_r+0x98>
 8003b68:	0758      	lsls	r0, r3, #29
 8003b6a:	d512      	bpl.n	8003b92 <__swsetup_r+0x5a>
 8003b6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b6e:	b141      	cbz	r1, 8003b82 <__swsetup_r+0x4a>
 8003b70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b74:	4299      	cmp	r1, r3
 8003b76:	d002      	beq.n	8003b7e <__swsetup_r+0x46>
 8003b78:	4628      	mov	r0, r5
 8003b7a:	f000 f8c3 	bl	8003d04 <_free_r>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b82:	89a3      	ldrh	r3, [r4, #12]
 8003b84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003b88:	81a3      	strh	r3, [r4, #12]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6063      	str	r3, [r4, #4]
 8003b8e:	6923      	ldr	r3, [r4, #16]
 8003b90:	6023      	str	r3, [r4, #0]
 8003b92:	89a3      	ldrh	r3, [r4, #12]
 8003b94:	f043 0308 	orr.w	r3, r3, #8
 8003b98:	81a3      	strh	r3, [r4, #12]
 8003b9a:	6923      	ldr	r3, [r4, #16]
 8003b9c:	b94b      	cbnz	r3, 8003bb2 <__swsetup_r+0x7a>
 8003b9e:	89a3      	ldrh	r3, [r4, #12]
 8003ba0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba8:	d003      	beq.n	8003bb2 <__swsetup_r+0x7a>
 8003baa:	4621      	mov	r1, r4
 8003bac:	4628      	mov	r0, r5
 8003bae:	f000 fe96 	bl	80048de <__smakebuf_r>
 8003bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bb6:	f013 0201 	ands.w	r2, r3, #1
 8003bba:	d00a      	beq.n	8003bd2 <__swsetup_r+0x9a>
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	60a2      	str	r2, [r4, #8]
 8003bc0:	6962      	ldr	r2, [r4, #20]
 8003bc2:	4252      	negs	r2, r2
 8003bc4:	61a2      	str	r2, [r4, #24]
 8003bc6:	6922      	ldr	r2, [r4, #16]
 8003bc8:	b942      	cbnz	r2, 8003bdc <__swsetup_r+0xa4>
 8003bca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003bce:	d1c5      	bne.n	8003b5c <__swsetup_r+0x24>
 8003bd0:	bd38      	pop	{r3, r4, r5, pc}
 8003bd2:	0799      	lsls	r1, r3, #30
 8003bd4:	bf58      	it	pl
 8003bd6:	6962      	ldrpl	r2, [r4, #20]
 8003bd8:	60a2      	str	r2, [r4, #8]
 8003bda:	e7f4      	b.n	8003bc6 <__swsetup_r+0x8e>
 8003bdc:	2000      	movs	r0, #0
 8003bde:	e7f7      	b.n	8003bd0 <__swsetup_r+0x98>
 8003be0:	20000018 	.word	0x20000018

08003be4 <memset>:
 8003be4:	4603      	mov	r3, r0
 8003be6:	4402      	add	r2, r0
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d100      	bne.n	8003bee <memset+0xa>
 8003bec:	4770      	bx	lr
 8003bee:	f803 1b01 	strb.w	r1, [r3], #1
 8003bf2:	e7f9      	b.n	8003be8 <memset+0x4>

08003bf4 <_close_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	4d05      	ldr	r5, [pc, #20]	@ (8003c10 <_close_r+0x1c>)
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	602b      	str	r3, [r5, #0]
 8003c00:	f7fc fe25 	bl	800084e <_close>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d102      	bne.n	8003c0e <_close_r+0x1a>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	b103      	cbz	r3, 8003c0e <_close_r+0x1a>
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	20000340 	.word	0x20000340

08003c14 <_lseek_r>:
 8003c14:	b538      	push	{r3, r4, r5, lr}
 8003c16:	4604      	mov	r4, r0
 8003c18:	4608      	mov	r0, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	4d05      	ldr	r5, [pc, #20]	@ (8003c34 <_lseek_r+0x20>)
 8003c20:	602a      	str	r2, [r5, #0]
 8003c22:	461a      	mov	r2, r3
 8003c24:	f7fc fe37 	bl	8000896 <_lseek>
 8003c28:	1c43      	adds	r3, r0, #1
 8003c2a:	d102      	bne.n	8003c32 <_lseek_r+0x1e>
 8003c2c:	682b      	ldr	r3, [r5, #0]
 8003c2e:	b103      	cbz	r3, 8003c32 <_lseek_r+0x1e>
 8003c30:	6023      	str	r3, [r4, #0]
 8003c32:	bd38      	pop	{r3, r4, r5, pc}
 8003c34:	20000340 	.word	0x20000340

08003c38 <_read_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	2200      	movs	r2, #0
 8003c42:	4d05      	ldr	r5, [pc, #20]	@ (8003c58 <_read_r+0x20>)
 8003c44:	602a      	str	r2, [r5, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f7fc fdc8 	bl	80007dc <_read>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d102      	bne.n	8003c56 <_read_r+0x1e>
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	b103      	cbz	r3, 8003c56 <_read_r+0x1e>
 8003c54:	6023      	str	r3, [r4, #0]
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
 8003c58:	20000340 	.word	0x20000340

08003c5c <_write_r>:
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	4604      	mov	r4, r0
 8003c60:	4608      	mov	r0, r1
 8003c62:	4611      	mov	r1, r2
 8003c64:	2200      	movs	r2, #0
 8003c66:	4d05      	ldr	r5, [pc, #20]	@ (8003c7c <_write_r+0x20>)
 8003c68:	602a      	str	r2, [r5, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f7fc fdd3 	bl	8000816 <_write>
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	d102      	bne.n	8003c7a <_write_r+0x1e>
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	b103      	cbz	r3, 8003c7a <_write_r+0x1e>
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	bd38      	pop	{r3, r4, r5, pc}
 8003c7c:	20000340 	.word	0x20000340

08003c80 <__errno>:
 8003c80:	4b01      	ldr	r3, [pc, #4]	@ (8003c88 <__errno+0x8>)
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000018 	.word	0x20000018

08003c8c <__libc_init_array>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	2600      	movs	r6, #0
 8003c90:	4d0c      	ldr	r5, [pc, #48]	@ (8003cc4 <__libc_init_array+0x38>)
 8003c92:	4c0d      	ldr	r4, [pc, #52]	@ (8003cc8 <__libc_init_array+0x3c>)
 8003c94:	1b64      	subs	r4, r4, r5
 8003c96:	10a4      	asrs	r4, r4, #2
 8003c98:	42a6      	cmp	r6, r4
 8003c9a:	d109      	bne.n	8003cb0 <__libc_init_array+0x24>
 8003c9c:	f000 ff30 	bl	8004b00 <_init>
 8003ca0:	2600      	movs	r6, #0
 8003ca2:	4d0a      	ldr	r5, [pc, #40]	@ (8003ccc <__libc_init_array+0x40>)
 8003ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8003cd0 <__libc_init_array+0x44>)
 8003ca6:	1b64      	subs	r4, r4, r5
 8003ca8:	10a4      	asrs	r4, r4, #2
 8003caa:	42a6      	cmp	r6, r4
 8003cac:	d105      	bne.n	8003cba <__libc_init_array+0x2e>
 8003cae:	bd70      	pop	{r4, r5, r6, pc}
 8003cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb4:	4798      	blx	r3
 8003cb6:	3601      	adds	r6, #1
 8003cb8:	e7ee      	b.n	8003c98 <__libc_init_array+0xc>
 8003cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cbe:	4798      	blx	r3
 8003cc0:	3601      	adds	r6, #1
 8003cc2:	e7f2      	b.n	8003caa <__libc_init_array+0x1e>
 8003cc4:	08004d1c 	.word	0x08004d1c
 8003cc8:	08004d1c 	.word	0x08004d1c
 8003ccc:	08004d1c 	.word	0x08004d1c
 8003cd0:	08004d20 	.word	0x08004d20

08003cd4 <__retarget_lock_init_recursive>:
 8003cd4:	4770      	bx	lr

08003cd6 <__retarget_lock_acquire_recursive>:
 8003cd6:	4770      	bx	lr

08003cd8 <__retarget_lock_release_recursive>:
 8003cd8:	4770      	bx	lr

08003cda <memcpy>:
 8003cda:	440a      	add	r2, r1
 8003cdc:	4291      	cmp	r1, r2
 8003cde:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ce2:	d100      	bne.n	8003ce6 <memcpy+0xc>
 8003ce4:	4770      	bx	lr
 8003ce6:	b510      	push	{r4, lr}
 8003ce8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cec:	4291      	cmp	r1, r2
 8003cee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cf2:	d1f9      	bne.n	8003ce8 <memcpy+0xe>
 8003cf4:	bd10      	pop	{r4, pc}

08003cf6 <abort>:
 8003cf6:	2006      	movs	r0, #6
 8003cf8:	b508      	push	{r3, lr}
 8003cfa:	f000 fe6f 	bl	80049dc <raise>
 8003cfe:	2001      	movs	r0, #1
 8003d00:	f7fc fd61 	bl	80007c6 <_exit>

08003d04 <_free_r>:
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	4605      	mov	r5, r0
 8003d08:	2900      	cmp	r1, #0
 8003d0a:	d040      	beq.n	8003d8e <_free_r+0x8a>
 8003d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d10:	1f0c      	subs	r4, r1, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bfb8      	it	lt
 8003d16:	18e4      	addlt	r4, r4, r3
 8003d18:	f000 f8de 	bl	8003ed8 <__malloc_lock>
 8003d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003d90 <_free_r+0x8c>)
 8003d1e:	6813      	ldr	r3, [r2, #0]
 8003d20:	b933      	cbnz	r3, 8003d30 <_free_r+0x2c>
 8003d22:	6063      	str	r3, [r4, #4]
 8003d24:	6014      	str	r4, [r2, #0]
 8003d26:	4628      	mov	r0, r5
 8003d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d2c:	f000 b8da 	b.w	8003ee4 <__malloc_unlock>
 8003d30:	42a3      	cmp	r3, r4
 8003d32:	d908      	bls.n	8003d46 <_free_r+0x42>
 8003d34:	6820      	ldr	r0, [r4, #0]
 8003d36:	1821      	adds	r1, r4, r0
 8003d38:	428b      	cmp	r3, r1
 8003d3a:	bf01      	itttt	eq
 8003d3c:	6819      	ldreq	r1, [r3, #0]
 8003d3e:	685b      	ldreq	r3, [r3, #4]
 8003d40:	1809      	addeq	r1, r1, r0
 8003d42:	6021      	streq	r1, [r4, #0]
 8003d44:	e7ed      	b.n	8003d22 <_free_r+0x1e>
 8003d46:	461a      	mov	r2, r3
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	b10b      	cbz	r3, 8003d50 <_free_r+0x4c>
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	d9fa      	bls.n	8003d46 <_free_r+0x42>
 8003d50:	6811      	ldr	r1, [r2, #0]
 8003d52:	1850      	adds	r0, r2, r1
 8003d54:	42a0      	cmp	r0, r4
 8003d56:	d10b      	bne.n	8003d70 <_free_r+0x6c>
 8003d58:	6820      	ldr	r0, [r4, #0]
 8003d5a:	4401      	add	r1, r0
 8003d5c:	1850      	adds	r0, r2, r1
 8003d5e:	4283      	cmp	r3, r0
 8003d60:	6011      	str	r1, [r2, #0]
 8003d62:	d1e0      	bne.n	8003d26 <_free_r+0x22>
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	4408      	add	r0, r1
 8003d6a:	6010      	str	r0, [r2, #0]
 8003d6c:	6053      	str	r3, [r2, #4]
 8003d6e:	e7da      	b.n	8003d26 <_free_r+0x22>
 8003d70:	d902      	bls.n	8003d78 <_free_r+0x74>
 8003d72:	230c      	movs	r3, #12
 8003d74:	602b      	str	r3, [r5, #0]
 8003d76:	e7d6      	b.n	8003d26 <_free_r+0x22>
 8003d78:	6820      	ldr	r0, [r4, #0]
 8003d7a:	1821      	adds	r1, r4, r0
 8003d7c:	428b      	cmp	r3, r1
 8003d7e:	bf01      	itttt	eq
 8003d80:	6819      	ldreq	r1, [r3, #0]
 8003d82:	685b      	ldreq	r3, [r3, #4]
 8003d84:	1809      	addeq	r1, r1, r0
 8003d86:	6021      	streq	r1, [r4, #0]
 8003d88:	6063      	str	r3, [r4, #4]
 8003d8a:	6054      	str	r4, [r2, #4]
 8003d8c:	e7cb      	b.n	8003d26 <_free_r+0x22>
 8003d8e:	bd38      	pop	{r3, r4, r5, pc}
 8003d90:	2000034c 	.word	0x2000034c

08003d94 <sbrk_aligned>:
 8003d94:	b570      	push	{r4, r5, r6, lr}
 8003d96:	4e0f      	ldr	r6, [pc, #60]	@ (8003dd4 <sbrk_aligned+0x40>)
 8003d98:	460c      	mov	r4, r1
 8003d9a:	6831      	ldr	r1, [r6, #0]
 8003d9c:	4605      	mov	r5, r0
 8003d9e:	b911      	cbnz	r1, 8003da6 <sbrk_aligned+0x12>
 8003da0:	f000 fe5a 	bl	8004a58 <_sbrk_r>
 8003da4:	6030      	str	r0, [r6, #0]
 8003da6:	4621      	mov	r1, r4
 8003da8:	4628      	mov	r0, r5
 8003daa:	f000 fe55 	bl	8004a58 <_sbrk_r>
 8003dae:	1c43      	adds	r3, r0, #1
 8003db0:	d103      	bne.n	8003dba <sbrk_aligned+0x26>
 8003db2:	f04f 34ff 	mov.w	r4, #4294967295
 8003db6:	4620      	mov	r0, r4
 8003db8:	bd70      	pop	{r4, r5, r6, pc}
 8003dba:	1cc4      	adds	r4, r0, #3
 8003dbc:	f024 0403 	bic.w	r4, r4, #3
 8003dc0:	42a0      	cmp	r0, r4
 8003dc2:	d0f8      	beq.n	8003db6 <sbrk_aligned+0x22>
 8003dc4:	1a21      	subs	r1, r4, r0
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	f000 fe46 	bl	8004a58 <_sbrk_r>
 8003dcc:	3001      	adds	r0, #1
 8003dce:	d1f2      	bne.n	8003db6 <sbrk_aligned+0x22>
 8003dd0:	e7ef      	b.n	8003db2 <sbrk_aligned+0x1e>
 8003dd2:	bf00      	nop
 8003dd4:	20000348 	.word	0x20000348

08003dd8 <_malloc_r>:
 8003dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ddc:	1ccd      	adds	r5, r1, #3
 8003dde:	f025 0503 	bic.w	r5, r5, #3
 8003de2:	3508      	adds	r5, #8
 8003de4:	2d0c      	cmp	r5, #12
 8003de6:	bf38      	it	cc
 8003de8:	250c      	movcc	r5, #12
 8003dea:	2d00      	cmp	r5, #0
 8003dec:	4606      	mov	r6, r0
 8003dee:	db01      	blt.n	8003df4 <_malloc_r+0x1c>
 8003df0:	42a9      	cmp	r1, r5
 8003df2:	d904      	bls.n	8003dfe <_malloc_r+0x26>
 8003df4:	230c      	movs	r3, #12
 8003df6:	6033      	str	r3, [r6, #0]
 8003df8:	2000      	movs	r0, #0
 8003dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ed4 <_malloc_r+0xfc>
 8003e02:	f000 f869 	bl	8003ed8 <__malloc_lock>
 8003e06:	f8d8 3000 	ldr.w	r3, [r8]
 8003e0a:	461c      	mov	r4, r3
 8003e0c:	bb44      	cbnz	r4, 8003e60 <_malloc_r+0x88>
 8003e0e:	4629      	mov	r1, r5
 8003e10:	4630      	mov	r0, r6
 8003e12:	f7ff ffbf 	bl	8003d94 <sbrk_aligned>
 8003e16:	1c43      	adds	r3, r0, #1
 8003e18:	4604      	mov	r4, r0
 8003e1a:	d158      	bne.n	8003ece <_malloc_r+0xf6>
 8003e1c:	f8d8 4000 	ldr.w	r4, [r8]
 8003e20:	4627      	mov	r7, r4
 8003e22:	2f00      	cmp	r7, #0
 8003e24:	d143      	bne.n	8003eae <_malloc_r+0xd6>
 8003e26:	2c00      	cmp	r4, #0
 8003e28:	d04b      	beq.n	8003ec2 <_malloc_r+0xea>
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	4639      	mov	r1, r7
 8003e2e:	4630      	mov	r0, r6
 8003e30:	eb04 0903 	add.w	r9, r4, r3
 8003e34:	f000 fe10 	bl	8004a58 <_sbrk_r>
 8003e38:	4581      	cmp	r9, r0
 8003e3a:	d142      	bne.n	8003ec2 <_malloc_r+0xea>
 8003e3c:	6821      	ldr	r1, [r4, #0]
 8003e3e:	4630      	mov	r0, r6
 8003e40:	1a6d      	subs	r5, r5, r1
 8003e42:	4629      	mov	r1, r5
 8003e44:	f7ff ffa6 	bl	8003d94 <sbrk_aligned>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d03a      	beq.n	8003ec2 <_malloc_r+0xea>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	442b      	add	r3, r5
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	f8d8 3000 	ldr.w	r3, [r8]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	bb62      	cbnz	r2, 8003eb4 <_malloc_r+0xdc>
 8003e5a:	f8c8 7000 	str.w	r7, [r8]
 8003e5e:	e00f      	b.n	8003e80 <_malloc_r+0xa8>
 8003e60:	6822      	ldr	r2, [r4, #0]
 8003e62:	1b52      	subs	r2, r2, r5
 8003e64:	d420      	bmi.n	8003ea8 <_malloc_r+0xd0>
 8003e66:	2a0b      	cmp	r2, #11
 8003e68:	d917      	bls.n	8003e9a <_malloc_r+0xc2>
 8003e6a:	1961      	adds	r1, r4, r5
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	6025      	str	r5, [r4, #0]
 8003e70:	bf18      	it	ne
 8003e72:	6059      	strne	r1, [r3, #4]
 8003e74:	6863      	ldr	r3, [r4, #4]
 8003e76:	bf08      	it	eq
 8003e78:	f8c8 1000 	streq.w	r1, [r8]
 8003e7c:	5162      	str	r2, [r4, r5]
 8003e7e:	604b      	str	r3, [r1, #4]
 8003e80:	4630      	mov	r0, r6
 8003e82:	f000 f82f 	bl	8003ee4 <__malloc_unlock>
 8003e86:	f104 000b 	add.w	r0, r4, #11
 8003e8a:	1d23      	adds	r3, r4, #4
 8003e8c:	f020 0007 	bic.w	r0, r0, #7
 8003e90:	1ac2      	subs	r2, r0, r3
 8003e92:	bf1c      	itt	ne
 8003e94:	1a1b      	subne	r3, r3, r0
 8003e96:	50a3      	strne	r3, [r4, r2]
 8003e98:	e7af      	b.n	8003dfa <_malloc_r+0x22>
 8003e9a:	6862      	ldr	r2, [r4, #4]
 8003e9c:	42a3      	cmp	r3, r4
 8003e9e:	bf0c      	ite	eq
 8003ea0:	f8c8 2000 	streq.w	r2, [r8]
 8003ea4:	605a      	strne	r2, [r3, #4]
 8003ea6:	e7eb      	b.n	8003e80 <_malloc_r+0xa8>
 8003ea8:	4623      	mov	r3, r4
 8003eaa:	6864      	ldr	r4, [r4, #4]
 8003eac:	e7ae      	b.n	8003e0c <_malloc_r+0x34>
 8003eae:	463c      	mov	r4, r7
 8003eb0:	687f      	ldr	r7, [r7, #4]
 8003eb2:	e7b6      	b.n	8003e22 <_malloc_r+0x4a>
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	42a3      	cmp	r3, r4
 8003eba:	d1fb      	bne.n	8003eb4 <_malloc_r+0xdc>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	6053      	str	r3, [r2, #4]
 8003ec0:	e7de      	b.n	8003e80 <_malloc_r+0xa8>
 8003ec2:	230c      	movs	r3, #12
 8003ec4:	4630      	mov	r0, r6
 8003ec6:	6033      	str	r3, [r6, #0]
 8003ec8:	f000 f80c 	bl	8003ee4 <__malloc_unlock>
 8003ecc:	e794      	b.n	8003df8 <_malloc_r+0x20>
 8003ece:	6005      	str	r5, [r0, #0]
 8003ed0:	e7d6      	b.n	8003e80 <_malloc_r+0xa8>
 8003ed2:	bf00      	nop
 8003ed4:	2000034c 	.word	0x2000034c

08003ed8 <__malloc_lock>:
 8003ed8:	4801      	ldr	r0, [pc, #4]	@ (8003ee0 <__malloc_lock+0x8>)
 8003eda:	f7ff befc 	b.w	8003cd6 <__retarget_lock_acquire_recursive>
 8003ede:	bf00      	nop
 8003ee0:	20000344 	.word	0x20000344

08003ee4 <__malloc_unlock>:
 8003ee4:	4801      	ldr	r0, [pc, #4]	@ (8003eec <__malloc_unlock+0x8>)
 8003ee6:	f7ff bef7 	b.w	8003cd8 <__retarget_lock_release_recursive>
 8003eea:	bf00      	nop
 8003eec:	20000344 	.word	0x20000344

08003ef0 <__ssputs_r>:
 8003ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef4:	461f      	mov	r7, r3
 8003ef6:	688e      	ldr	r6, [r1, #8]
 8003ef8:	4682      	mov	sl, r0
 8003efa:	42be      	cmp	r6, r7
 8003efc:	460c      	mov	r4, r1
 8003efe:	4690      	mov	r8, r2
 8003f00:	680b      	ldr	r3, [r1, #0]
 8003f02:	d82d      	bhi.n	8003f60 <__ssputs_r+0x70>
 8003f04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f0c:	d026      	beq.n	8003f5c <__ssputs_r+0x6c>
 8003f0e:	6965      	ldr	r5, [r4, #20]
 8003f10:	6909      	ldr	r1, [r1, #16]
 8003f12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f16:	eba3 0901 	sub.w	r9, r3, r1
 8003f1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f1e:	1c7b      	adds	r3, r7, #1
 8003f20:	444b      	add	r3, r9
 8003f22:	106d      	asrs	r5, r5, #1
 8003f24:	429d      	cmp	r5, r3
 8003f26:	bf38      	it	cc
 8003f28:	461d      	movcc	r5, r3
 8003f2a:	0553      	lsls	r3, r2, #21
 8003f2c:	d527      	bpl.n	8003f7e <__ssputs_r+0x8e>
 8003f2e:	4629      	mov	r1, r5
 8003f30:	f7ff ff52 	bl	8003dd8 <_malloc_r>
 8003f34:	4606      	mov	r6, r0
 8003f36:	b360      	cbz	r0, 8003f92 <__ssputs_r+0xa2>
 8003f38:	464a      	mov	r2, r9
 8003f3a:	6921      	ldr	r1, [r4, #16]
 8003f3c:	f7ff fecd 	bl	8003cda <memcpy>
 8003f40:	89a3      	ldrh	r3, [r4, #12]
 8003f42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f4a:	81a3      	strh	r3, [r4, #12]
 8003f4c:	6126      	str	r6, [r4, #16]
 8003f4e:	444e      	add	r6, r9
 8003f50:	6026      	str	r6, [r4, #0]
 8003f52:	463e      	mov	r6, r7
 8003f54:	6165      	str	r5, [r4, #20]
 8003f56:	eba5 0509 	sub.w	r5, r5, r9
 8003f5a:	60a5      	str	r5, [r4, #8]
 8003f5c:	42be      	cmp	r6, r7
 8003f5e:	d900      	bls.n	8003f62 <__ssputs_r+0x72>
 8003f60:	463e      	mov	r6, r7
 8003f62:	4632      	mov	r2, r6
 8003f64:	4641      	mov	r1, r8
 8003f66:	6820      	ldr	r0, [r4, #0]
 8003f68:	f000 fcf5 	bl	8004956 <memmove>
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	68a3      	ldr	r3, [r4, #8]
 8003f70:	1b9b      	subs	r3, r3, r6
 8003f72:	60a3      	str	r3, [r4, #8]
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	4433      	add	r3, r6
 8003f78:	6023      	str	r3, [r4, #0]
 8003f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f7e:	462a      	mov	r2, r5
 8003f80:	f000 fd88 	bl	8004a94 <_realloc_r>
 8003f84:	4606      	mov	r6, r0
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d1e0      	bne.n	8003f4c <__ssputs_r+0x5c>
 8003f8a:	4650      	mov	r0, sl
 8003f8c:	6921      	ldr	r1, [r4, #16]
 8003f8e:	f7ff feb9 	bl	8003d04 <_free_r>
 8003f92:	230c      	movs	r3, #12
 8003f94:	f8ca 3000 	str.w	r3, [sl]
 8003f98:	89a3      	ldrh	r3, [r4, #12]
 8003f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fa2:	81a3      	strh	r3, [r4, #12]
 8003fa4:	e7e9      	b.n	8003f7a <__ssputs_r+0x8a>
	...

08003fa8 <_svfiprintf_r>:
 8003fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fac:	4698      	mov	r8, r3
 8003fae:	898b      	ldrh	r3, [r1, #12]
 8003fb0:	4607      	mov	r7, r0
 8003fb2:	061b      	lsls	r3, r3, #24
 8003fb4:	460d      	mov	r5, r1
 8003fb6:	4614      	mov	r4, r2
 8003fb8:	b09d      	sub	sp, #116	@ 0x74
 8003fba:	d510      	bpl.n	8003fde <_svfiprintf_r+0x36>
 8003fbc:	690b      	ldr	r3, [r1, #16]
 8003fbe:	b973      	cbnz	r3, 8003fde <_svfiprintf_r+0x36>
 8003fc0:	2140      	movs	r1, #64	@ 0x40
 8003fc2:	f7ff ff09 	bl	8003dd8 <_malloc_r>
 8003fc6:	6028      	str	r0, [r5, #0]
 8003fc8:	6128      	str	r0, [r5, #16]
 8003fca:	b930      	cbnz	r0, 8003fda <_svfiprintf_r+0x32>
 8003fcc:	230c      	movs	r3, #12
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd4:	b01d      	add	sp, #116	@ 0x74
 8003fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fda:	2340      	movs	r3, #64	@ 0x40
 8003fdc:	616b      	str	r3, [r5, #20]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fe2:	2320      	movs	r3, #32
 8003fe4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003fe8:	2330      	movs	r3, #48	@ 0x30
 8003fea:	f04f 0901 	mov.w	r9, #1
 8003fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ff2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800418c <_svfiprintf_r+0x1e4>
 8003ff6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	469a      	mov	sl, r3
 8003ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004002:	b10a      	cbz	r2, 8004008 <_svfiprintf_r+0x60>
 8004004:	2a25      	cmp	r2, #37	@ 0x25
 8004006:	d1f9      	bne.n	8003ffc <_svfiprintf_r+0x54>
 8004008:	ebba 0b04 	subs.w	fp, sl, r4
 800400c:	d00b      	beq.n	8004026 <_svfiprintf_r+0x7e>
 800400e:	465b      	mov	r3, fp
 8004010:	4622      	mov	r2, r4
 8004012:	4629      	mov	r1, r5
 8004014:	4638      	mov	r0, r7
 8004016:	f7ff ff6b 	bl	8003ef0 <__ssputs_r>
 800401a:	3001      	adds	r0, #1
 800401c:	f000 80a7 	beq.w	800416e <_svfiprintf_r+0x1c6>
 8004020:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004022:	445a      	add	r2, fp
 8004024:	9209      	str	r2, [sp, #36]	@ 0x24
 8004026:	f89a 3000 	ldrb.w	r3, [sl]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 809f 	beq.w	800416e <_svfiprintf_r+0x1c6>
 8004030:	2300      	movs	r3, #0
 8004032:	f04f 32ff 	mov.w	r2, #4294967295
 8004036:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800403a:	f10a 0a01 	add.w	sl, sl, #1
 800403e:	9304      	str	r3, [sp, #16]
 8004040:	9307      	str	r3, [sp, #28]
 8004042:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004046:	931a      	str	r3, [sp, #104]	@ 0x68
 8004048:	4654      	mov	r4, sl
 800404a:	2205      	movs	r2, #5
 800404c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004050:	484e      	ldr	r0, [pc, #312]	@ (800418c <_svfiprintf_r+0x1e4>)
 8004052:	f000 fd11 	bl	8004a78 <memchr>
 8004056:	9a04      	ldr	r2, [sp, #16]
 8004058:	b9d8      	cbnz	r0, 8004092 <_svfiprintf_r+0xea>
 800405a:	06d0      	lsls	r0, r2, #27
 800405c:	bf44      	itt	mi
 800405e:	2320      	movmi	r3, #32
 8004060:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004064:	0711      	lsls	r1, r2, #28
 8004066:	bf44      	itt	mi
 8004068:	232b      	movmi	r3, #43	@ 0x2b
 800406a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800406e:	f89a 3000 	ldrb.w	r3, [sl]
 8004072:	2b2a      	cmp	r3, #42	@ 0x2a
 8004074:	d015      	beq.n	80040a2 <_svfiprintf_r+0xfa>
 8004076:	4654      	mov	r4, sl
 8004078:	2000      	movs	r0, #0
 800407a:	f04f 0c0a 	mov.w	ip, #10
 800407e:	9a07      	ldr	r2, [sp, #28]
 8004080:	4621      	mov	r1, r4
 8004082:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004086:	3b30      	subs	r3, #48	@ 0x30
 8004088:	2b09      	cmp	r3, #9
 800408a:	d94b      	bls.n	8004124 <_svfiprintf_r+0x17c>
 800408c:	b1b0      	cbz	r0, 80040bc <_svfiprintf_r+0x114>
 800408e:	9207      	str	r2, [sp, #28]
 8004090:	e014      	b.n	80040bc <_svfiprintf_r+0x114>
 8004092:	eba0 0308 	sub.w	r3, r0, r8
 8004096:	fa09 f303 	lsl.w	r3, r9, r3
 800409a:	4313      	orrs	r3, r2
 800409c:	46a2      	mov	sl, r4
 800409e:	9304      	str	r3, [sp, #16]
 80040a0:	e7d2      	b.n	8004048 <_svfiprintf_r+0xa0>
 80040a2:	9b03      	ldr	r3, [sp, #12]
 80040a4:	1d19      	adds	r1, r3, #4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	9103      	str	r1, [sp, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	bfbb      	ittet	lt
 80040ae:	425b      	neglt	r3, r3
 80040b0:	f042 0202 	orrlt.w	r2, r2, #2
 80040b4:	9307      	strge	r3, [sp, #28]
 80040b6:	9307      	strlt	r3, [sp, #28]
 80040b8:	bfb8      	it	lt
 80040ba:	9204      	strlt	r2, [sp, #16]
 80040bc:	7823      	ldrb	r3, [r4, #0]
 80040be:	2b2e      	cmp	r3, #46	@ 0x2e
 80040c0:	d10a      	bne.n	80040d8 <_svfiprintf_r+0x130>
 80040c2:	7863      	ldrb	r3, [r4, #1]
 80040c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80040c6:	d132      	bne.n	800412e <_svfiprintf_r+0x186>
 80040c8:	9b03      	ldr	r3, [sp, #12]
 80040ca:	3402      	adds	r4, #2
 80040cc:	1d1a      	adds	r2, r3, #4
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	9203      	str	r2, [sp, #12]
 80040d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040d6:	9305      	str	r3, [sp, #20]
 80040d8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004190 <_svfiprintf_r+0x1e8>
 80040dc:	2203      	movs	r2, #3
 80040de:	4650      	mov	r0, sl
 80040e0:	7821      	ldrb	r1, [r4, #0]
 80040e2:	f000 fcc9 	bl	8004a78 <memchr>
 80040e6:	b138      	cbz	r0, 80040f8 <_svfiprintf_r+0x150>
 80040e8:	2240      	movs	r2, #64	@ 0x40
 80040ea:	9b04      	ldr	r3, [sp, #16]
 80040ec:	eba0 000a 	sub.w	r0, r0, sl
 80040f0:	4082      	lsls	r2, r0
 80040f2:	4313      	orrs	r3, r2
 80040f4:	3401      	adds	r4, #1
 80040f6:	9304      	str	r3, [sp, #16]
 80040f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040fc:	2206      	movs	r2, #6
 80040fe:	4825      	ldr	r0, [pc, #148]	@ (8004194 <_svfiprintf_r+0x1ec>)
 8004100:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004104:	f000 fcb8 	bl	8004a78 <memchr>
 8004108:	2800      	cmp	r0, #0
 800410a:	d036      	beq.n	800417a <_svfiprintf_r+0x1d2>
 800410c:	4b22      	ldr	r3, [pc, #136]	@ (8004198 <_svfiprintf_r+0x1f0>)
 800410e:	bb1b      	cbnz	r3, 8004158 <_svfiprintf_r+0x1b0>
 8004110:	9b03      	ldr	r3, [sp, #12]
 8004112:	3307      	adds	r3, #7
 8004114:	f023 0307 	bic.w	r3, r3, #7
 8004118:	3308      	adds	r3, #8
 800411a:	9303      	str	r3, [sp, #12]
 800411c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800411e:	4433      	add	r3, r6
 8004120:	9309      	str	r3, [sp, #36]	@ 0x24
 8004122:	e76a      	b.n	8003ffa <_svfiprintf_r+0x52>
 8004124:	460c      	mov	r4, r1
 8004126:	2001      	movs	r0, #1
 8004128:	fb0c 3202 	mla	r2, ip, r2, r3
 800412c:	e7a8      	b.n	8004080 <_svfiprintf_r+0xd8>
 800412e:	2300      	movs	r3, #0
 8004130:	f04f 0c0a 	mov.w	ip, #10
 8004134:	4619      	mov	r1, r3
 8004136:	3401      	adds	r4, #1
 8004138:	9305      	str	r3, [sp, #20]
 800413a:	4620      	mov	r0, r4
 800413c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004140:	3a30      	subs	r2, #48	@ 0x30
 8004142:	2a09      	cmp	r2, #9
 8004144:	d903      	bls.n	800414e <_svfiprintf_r+0x1a6>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0c6      	beq.n	80040d8 <_svfiprintf_r+0x130>
 800414a:	9105      	str	r1, [sp, #20]
 800414c:	e7c4      	b.n	80040d8 <_svfiprintf_r+0x130>
 800414e:	4604      	mov	r4, r0
 8004150:	2301      	movs	r3, #1
 8004152:	fb0c 2101 	mla	r1, ip, r1, r2
 8004156:	e7f0      	b.n	800413a <_svfiprintf_r+0x192>
 8004158:	ab03      	add	r3, sp, #12
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	462a      	mov	r2, r5
 800415e:	4638      	mov	r0, r7
 8004160:	4b0e      	ldr	r3, [pc, #56]	@ (800419c <_svfiprintf_r+0x1f4>)
 8004162:	a904      	add	r1, sp, #16
 8004164:	f3af 8000 	nop.w
 8004168:	1c42      	adds	r2, r0, #1
 800416a:	4606      	mov	r6, r0
 800416c:	d1d6      	bne.n	800411c <_svfiprintf_r+0x174>
 800416e:	89ab      	ldrh	r3, [r5, #12]
 8004170:	065b      	lsls	r3, r3, #25
 8004172:	f53f af2d 	bmi.w	8003fd0 <_svfiprintf_r+0x28>
 8004176:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004178:	e72c      	b.n	8003fd4 <_svfiprintf_r+0x2c>
 800417a:	ab03      	add	r3, sp, #12
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	462a      	mov	r2, r5
 8004180:	4638      	mov	r0, r7
 8004182:	4b06      	ldr	r3, [pc, #24]	@ (800419c <_svfiprintf_r+0x1f4>)
 8004184:	a904      	add	r1, sp, #16
 8004186:	f000 f9bd 	bl	8004504 <_printf_i>
 800418a:	e7ed      	b.n	8004168 <_svfiprintf_r+0x1c0>
 800418c:	08004ce9 	.word	0x08004ce9
 8004190:	08004cef 	.word	0x08004cef
 8004194:	08004cf3 	.word	0x08004cf3
 8004198:	00000000 	.word	0x00000000
 800419c:	08003ef1 	.word	0x08003ef1

080041a0 <__sfputc_r>:
 80041a0:	6893      	ldr	r3, [r2, #8]
 80041a2:	b410      	push	{r4}
 80041a4:	3b01      	subs	r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	6093      	str	r3, [r2, #8]
 80041aa:	da07      	bge.n	80041bc <__sfputc_r+0x1c>
 80041ac:	6994      	ldr	r4, [r2, #24]
 80041ae:	42a3      	cmp	r3, r4
 80041b0:	db01      	blt.n	80041b6 <__sfputc_r+0x16>
 80041b2:	290a      	cmp	r1, #10
 80041b4:	d102      	bne.n	80041bc <__sfputc_r+0x1c>
 80041b6:	bc10      	pop	{r4}
 80041b8:	f7ff bc7f 	b.w	8003aba <__swbuf_r>
 80041bc:	6813      	ldr	r3, [r2, #0]
 80041be:	1c58      	adds	r0, r3, #1
 80041c0:	6010      	str	r0, [r2, #0]
 80041c2:	7019      	strb	r1, [r3, #0]
 80041c4:	4608      	mov	r0, r1
 80041c6:	bc10      	pop	{r4}
 80041c8:	4770      	bx	lr

080041ca <__sfputs_r>:
 80041ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041cc:	4606      	mov	r6, r0
 80041ce:	460f      	mov	r7, r1
 80041d0:	4614      	mov	r4, r2
 80041d2:	18d5      	adds	r5, r2, r3
 80041d4:	42ac      	cmp	r4, r5
 80041d6:	d101      	bne.n	80041dc <__sfputs_r+0x12>
 80041d8:	2000      	movs	r0, #0
 80041da:	e007      	b.n	80041ec <__sfputs_r+0x22>
 80041dc:	463a      	mov	r2, r7
 80041de:	4630      	mov	r0, r6
 80041e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041e4:	f7ff ffdc 	bl	80041a0 <__sfputc_r>
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	d1f3      	bne.n	80041d4 <__sfputs_r+0xa>
 80041ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041f0 <_vfiprintf_r>:
 80041f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f4:	460d      	mov	r5, r1
 80041f6:	4614      	mov	r4, r2
 80041f8:	4698      	mov	r8, r3
 80041fa:	4606      	mov	r6, r0
 80041fc:	b09d      	sub	sp, #116	@ 0x74
 80041fe:	b118      	cbz	r0, 8004208 <_vfiprintf_r+0x18>
 8004200:	6a03      	ldr	r3, [r0, #32]
 8004202:	b90b      	cbnz	r3, 8004208 <_vfiprintf_r+0x18>
 8004204:	f7ff fb3e 	bl	8003884 <__sinit>
 8004208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800420a:	07d9      	lsls	r1, r3, #31
 800420c:	d405      	bmi.n	800421a <_vfiprintf_r+0x2a>
 800420e:	89ab      	ldrh	r3, [r5, #12]
 8004210:	059a      	lsls	r2, r3, #22
 8004212:	d402      	bmi.n	800421a <_vfiprintf_r+0x2a>
 8004214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004216:	f7ff fd5e 	bl	8003cd6 <__retarget_lock_acquire_recursive>
 800421a:	89ab      	ldrh	r3, [r5, #12]
 800421c:	071b      	lsls	r3, r3, #28
 800421e:	d501      	bpl.n	8004224 <_vfiprintf_r+0x34>
 8004220:	692b      	ldr	r3, [r5, #16]
 8004222:	b99b      	cbnz	r3, 800424c <_vfiprintf_r+0x5c>
 8004224:	4629      	mov	r1, r5
 8004226:	4630      	mov	r0, r6
 8004228:	f7ff fc86 	bl	8003b38 <__swsetup_r>
 800422c:	b170      	cbz	r0, 800424c <_vfiprintf_r+0x5c>
 800422e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004230:	07dc      	lsls	r4, r3, #31
 8004232:	d504      	bpl.n	800423e <_vfiprintf_r+0x4e>
 8004234:	f04f 30ff 	mov.w	r0, #4294967295
 8004238:	b01d      	add	sp, #116	@ 0x74
 800423a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800423e:	89ab      	ldrh	r3, [r5, #12]
 8004240:	0598      	lsls	r0, r3, #22
 8004242:	d4f7      	bmi.n	8004234 <_vfiprintf_r+0x44>
 8004244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004246:	f7ff fd47 	bl	8003cd8 <__retarget_lock_release_recursive>
 800424a:	e7f3      	b.n	8004234 <_vfiprintf_r+0x44>
 800424c:	2300      	movs	r3, #0
 800424e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004250:	2320      	movs	r3, #32
 8004252:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004256:	2330      	movs	r3, #48	@ 0x30
 8004258:	f04f 0901 	mov.w	r9, #1
 800425c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004260:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800440c <_vfiprintf_r+0x21c>
 8004264:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004268:	4623      	mov	r3, r4
 800426a:	469a      	mov	sl, r3
 800426c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004270:	b10a      	cbz	r2, 8004276 <_vfiprintf_r+0x86>
 8004272:	2a25      	cmp	r2, #37	@ 0x25
 8004274:	d1f9      	bne.n	800426a <_vfiprintf_r+0x7a>
 8004276:	ebba 0b04 	subs.w	fp, sl, r4
 800427a:	d00b      	beq.n	8004294 <_vfiprintf_r+0xa4>
 800427c:	465b      	mov	r3, fp
 800427e:	4622      	mov	r2, r4
 8004280:	4629      	mov	r1, r5
 8004282:	4630      	mov	r0, r6
 8004284:	f7ff ffa1 	bl	80041ca <__sfputs_r>
 8004288:	3001      	adds	r0, #1
 800428a:	f000 80a7 	beq.w	80043dc <_vfiprintf_r+0x1ec>
 800428e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004290:	445a      	add	r2, fp
 8004292:	9209      	str	r2, [sp, #36]	@ 0x24
 8004294:	f89a 3000 	ldrb.w	r3, [sl]
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 809f 	beq.w	80043dc <_vfiprintf_r+0x1ec>
 800429e:	2300      	movs	r3, #0
 80042a0:	f04f 32ff 	mov.w	r2, #4294967295
 80042a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042a8:	f10a 0a01 	add.w	sl, sl, #1
 80042ac:	9304      	str	r3, [sp, #16]
 80042ae:	9307      	str	r3, [sp, #28]
 80042b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80042b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80042b6:	4654      	mov	r4, sl
 80042b8:	2205      	movs	r2, #5
 80042ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042be:	4853      	ldr	r0, [pc, #332]	@ (800440c <_vfiprintf_r+0x21c>)
 80042c0:	f000 fbda 	bl	8004a78 <memchr>
 80042c4:	9a04      	ldr	r2, [sp, #16]
 80042c6:	b9d8      	cbnz	r0, 8004300 <_vfiprintf_r+0x110>
 80042c8:	06d1      	lsls	r1, r2, #27
 80042ca:	bf44      	itt	mi
 80042cc:	2320      	movmi	r3, #32
 80042ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042d2:	0713      	lsls	r3, r2, #28
 80042d4:	bf44      	itt	mi
 80042d6:	232b      	movmi	r3, #43	@ 0x2b
 80042d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042dc:	f89a 3000 	ldrb.w	r3, [sl]
 80042e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80042e2:	d015      	beq.n	8004310 <_vfiprintf_r+0x120>
 80042e4:	4654      	mov	r4, sl
 80042e6:	2000      	movs	r0, #0
 80042e8:	f04f 0c0a 	mov.w	ip, #10
 80042ec:	9a07      	ldr	r2, [sp, #28]
 80042ee:	4621      	mov	r1, r4
 80042f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042f4:	3b30      	subs	r3, #48	@ 0x30
 80042f6:	2b09      	cmp	r3, #9
 80042f8:	d94b      	bls.n	8004392 <_vfiprintf_r+0x1a2>
 80042fa:	b1b0      	cbz	r0, 800432a <_vfiprintf_r+0x13a>
 80042fc:	9207      	str	r2, [sp, #28]
 80042fe:	e014      	b.n	800432a <_vfiprintf_r+0x13a>
 8004300:	eba0 0308 	sub.w	r3, r0, r8
 8004304:	fa09 f303 	lsl.w	r3, r9, r3
 8004308:	4313      	orrs	r3, r2
 800430a:	46a2      	mov	sl, r4
 800430c:	9304      	str	r3, [sp, #16]
 800430e:	e7d2      	b.n	80042b6 <_vfiprintf_r+0xc6>
 8004310:	9b03      	ldr	r3, [sp, #12]
 8004312:	1d19      	adds	r1, r3, #4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	9103      	str	r1, [sp, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	bfbb      	ittet	lt
 800431c:	425b      	neglt	r3, r3
 800431e:	f042 0202 	orrlt.w	r2, r2, #2
 8004322:	9307      	strge	r3, [sp, #28]
 8004324:	9307      	strlt	r3, [sp, #28]
 8004326:	bfb8      	it	lt
 8004328:	9204      	strlt	r2, [sp, #16]
 800432a:	7823      	ldrb	r3, [r4, #0]
 800432c:	2b2e      	cmp	r3, #46	@ 0x2e
 800432e:	d10a      	bne.n	8004346 <_vfiprintf_r+0x156>
 8004330:	7863      	ldrb	r3, [r4, #1]
 8004332:	2b2a      	cmp	r3, #42	@ 0x2a
 8004334:	d132      	bne.n	800439c <_vfiprintf_r+0x1ac>
 8004336:	9b03      	ldr	r3, [sp, #12]
 8004338:	3402      	adds	r4, #2
 800433a:	1d1a      	adds	r2, r3, #4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	9203      	str	r2, [sp, #12]
 8004340:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004344:	9305      	str	r3, [sp, #20]
 8004346:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004410 <_vfiprintf_r+0x220>
 800434a:	2203      	movs	r2, #3
 800434c:	4650      	mov	r0, sl
 800434e:	7821      	ldrb	r1, [r4, #0]
 8004350:	f000 fb92 	bl	8004a78 <memchr>
 8004354:	b138      	cbz	r0, 8004366 <_vfiprintf_r+0x176>
 8004356:	2240      	movs	r2, #64	@ 0x40
 8004358:	9b04      	ldr	r3, [sp, #16]
 800435a:	eba0 000a 	sub.w	r0, r0, sl
 800435e:	4082      	lsls	r2, r0
 8004360:	4313      	orrs	r3, r2
 8004362:	3401      	adds	r4, #1
 8004364:	9304      	str	r3, [sp, #16]
 8004366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800436a:	2206      	movs	r2, #6
 800436c:	4829      	ldr	r0, [pc, #164]	@ (8004414 <_vfiprintf_r+0x224>)
 800436e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004372:	f000 fb81 	bl	8004a78 <memchr>
 8004376:	2800      	cmp	r0, #0
 8004378:	d03f      	beq.n	80043fa <_vfiprintf_r+0x20a>
 800437a:	4b27      	ldr	r3, [pc, #156]	@ (8004418 <_vfiprintf_r+0x228>)
 800437c:	bb1b      	cbnz	r3, 80043c6 <_vfiprintf_r+0x1d6>
 800437e:	9b03      	ldr	r3, [sp, #12]
 8004380:	3307      	adds	r3, #7
 8004382:	f023 0307 	bic.w	r3, r3, #7
 8004386:	3308      	adds	r3, #8
 8004388:	9303      	str	r3, [sp, #12]
 800438a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800438c:	443b      	add	r3, r7
 800438e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004390:	e76a      	b.n	8004268 <_vfiprintf_r+0x78>
 8004392:	460c      	mov	r4, r1
 8004394:	2001      	movs	r0, #1
 8004396:	fb0c 3202 	mla	r2, ip, r2, r3
 800439a:	e7a8      	b.n	80042ee <_vfiprintf_r+0xfe>
 800439c:	2300      	movs	r3, #0
 800439e:	f04f 0c0a 	mov.w	ip, #10
 80043a2:	4619      	mov	r1, r3
 80043a4:	3401      	adds	r4, #1
 80043a6:	9305      	str	r3, [sp, #20]
 80043a8:	4620      	mov	r0, r4
 80043aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043ae:	3a30      	subs	r2, #48	@ 0x30
 80043b0:	2a09      	cmp	r2, #9
 80043b2:	d903      	bls.n	80043bc <_vfiprintf_r+0x1cc>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0c6      	beq.n	8004346 <_vfiprintf_r+0x156>
 80043b8:	9105      	str	r1, [sp, #20]
 80043ba:	e7c4      	b.n	8004346 <_vfiprintf_r+0x156>
 80043bc:	4604      	mov	r4, r0
 80043be:	2301      	movs	r3, #1
 80043c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80043c4:	e7f0      	b.n	80043a8 <_vfiprintf_r+0x1b8>
 80043c6:	ab03      	add	r3, sp, #12
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	462a      	mov	r2, r5
 80043cc:	4630      	mov	r0, r6
 80043ce:	4b13      	ldr	r3, [pc, #76]	@ (800441c <_vfiprintf_r+0x22c>)
 80043d0:	a904      	add	r1, sp, #16
 80043d2:	f3af 8000 	nop.w
 80043d6:	4607      	mov	r7, r0
 80043d8:	1c78      	adds	r0, r7, #1
 80043da:	d1d6      	bne.n	800438a <_vfiprintf_r+0x19a>
 80043dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043de:	07d9      	lsls	r1, r3, #31
 80043e0:	d405      	bmi.n	80043ee <_vfiprintf_r+0x1fe>
 80043e2:	89ab      	ldrh	r3, [r5, #12]
 80043e4:	059a      	lsls	r2, r3, #22
 80043e6:	d402      	bmi.n	80043ee <_vfiprintf_r+0x1fe>
 80043e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043ea:	f7ff fc75 	bl	8003cd8 <__retarget_lock_release_recursive>
 80043ee:	89ab      	ldrh	r3, [r5, #12]
 80043f0:	065b      	lsls	r3, r3, #25
 80043f2:	f53f af1f 	bmi.w	8004234 <_vfiprintf_r+0x44>
 80043f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043f8:	e71e      	b.n	8004238 <_vfiprintf_r+0x48>
 80043fa:	ab03      	add	r3, sp, #12
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	462a      	mov	r2, r5
 8004400:	4630      	mov	r0, r6
 8004402:	4b06      	ldr	r3, [pc, #24]	@ (800441c <_vfiprintf_r+0x22c>)
 8004404:	a904      	add	r1, sp, #16
 8004406:	f000 f87d 	bl	8004504 <_printf_i>
 800440a:	e7e4      	b.n	80043d6 <_vfiprintf_r+0x1e6>
 800440c:	08004ce9 	.word	0x08004ce9
 8004410:	08004cef 	.word	0x08004cef
 8004414:	08004cf3 	.word	0x08004cf3
 8004418:	00000000 	.word	0x00000000
 800441c:	080041cb 	.word	0x080041cb

08004420 <_printf_common>:
 8004420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004424:	4616      	mov	r6, r2
 8004426:	4698      	mov	r8, r3
 8004428:	688a      	ldr	r2, [r1, #8]
 800442a:	690b      	ldr	r3, [r1, #16]
 800442c:	4607      	mov	r7, r0
 800442e:	4293      	cmp	r3, r2
 8004430:	bfb8      	it	lt
 8004432:	4613      	movlt	r3, r2
 8004434:	6033      	str	r3, [r6, #0]
 8004436:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800443a:	460c      	mov	r4, r1
 800443c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004440:	b10a      	cbz	r2, 8004446 <_printf_common+0x26>
 8004442:	3301      	adds	r3, #1
 8004444:	6033      	str	r3, [r6, #0]
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	0699      	lsls	r1, r3, #26
 800444a:	bf42      	ittt	mi
 800444c:	6833      	ldrmi	r3, [r6, #0]
 800444e:	3302      	addmi	r3, #2
 8004450:	6033      	strmi	r3, [r6, #0]
 8004452:	6825      	ldr	r5, [r4, #0]
 8004454:	f015 0506 	ands.w	r5, r5, #6
 8004458:	d106      	bne.n	8004468 <_printf_common+0x48>
 800445a:	f104 0a19 	add.w	sl, r4, #25
 800445e:	68e3      	ldr	r3, [r4, #12]
 8004460:	6832      	ldr	r2, [r6, #0]
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	42ab      	cmp	r3, r5
 8004466:	dc2b      	bgt.n	80044c0 <_printf_common+0xa0>
 8004468:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800446c:	6822      	ldr	r2, [r4, #0]
 800446e:	3b00      	subs	r3, #0
 8004470:	bf18      	it	ne
 8004472:	2301      	movne	r3, #1
 8004474:	0692      	lsls	r2, r2, #26
 8004476:	d430      	bmi.n	80044da <_printf_common+0xba>
 8004478:	4641      	mov	r1, r8
 800447a:	4638      	mov	r0, r7
 800447c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004480:	47c8      	blx	r9
 8004482:	3001      	adds	r0, #1
 8004484:	d023      	beq.n	80044ce <_printf_common+0xae>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	6922      	ldr	r2, [r4, #16]
 800448a:	f003 0306 	and.w	r3, r3, #6
 800448e:	2b04      	cmp	r3, #4
 8004490:	bf14      	ite	ne
 8004492:	2500      	movne	r5, #0
 8004494:	6833      	ldreq	r3, [r6, #0]
 8004496:	f04f 0600 	mov.w	r6, #0
 800449a:	bf08      	it	eq
 800449c:	68e5      	ldreq	r5, [r4, #12]
 800449e:	f104 041a 	add.w	r4, r4, #26
 80044a2:	bf08      	it	eq
 80044a4:	1aed      	subeq	r5, r5, r3
 80044a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80044aa:	bf08      	it	eq
 80044ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044b0:	4293      	cmp	r3, r2
 80044b2:	bfc4      	itt	gt
 80044b4:	1a9b      	subgt	r3, r3, r2
 80044b6:	18ed      	addgt	r5, r5, r3
 80044b8:	42b5      	cmp	r5, r6
 80044ba:	d11a      	bne.n	80044f2 <_printf_common+0xd2>
 80044bc:	2000      	movs	r0, #0
 80044be:	e008      	b.n	80044d2 <_printf_common+0xb2>
 80044c0:	2301      	movs	r3, #1
 80044c2:	4652      	mov	r2, sl
 80044c4:	4641      	mov	r1, r8
 80044c6:	4638      	mov	r0, r7
 80044c8:	47c8      	blx	r9
 80044ca:	3001      	adds	r0, #1
 80044cc:	d103      	bne.n	80044d6 <_printf_common+0xb6>
 80044ce:	f04f 30ff 	mov.w	r0, #4294967295
 80044d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d6:	3501      	adds	r5, #1
 80044d8:	e7c1      	b.n	800445e <_printf_common+0x3e>
 80044da:	2030      	movs	r0, #48	@ 0x30
 80044dc:	18e1      	adds	r1, r4, r3
 80044de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044e8:	4422      	add	r2, r4
 80044ea:	3302      	adds	r3, #2
 80044ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044f0:	e7c2      	b.n	8004478 <_printf_common+0x58>
 80044f2:	2301      	movs	r3, #1
 80044f4:	4622      	mov	r2, r4
 80044f6:	4641      	mov	r1, r8
 80044f8:	4638      	mov	r0, r7
 80044fa:	47c8      	blx	r9
 80044fc:	3001      	adds	r0, #1
 80044fe:	d0e6      	beq.n	80044ce <_printf_common+0xae>
 8004500:	3601      	adds	r6, #1
 8004502:	e7d9      	b.n	80044b8 <_printf_common+0x98>

08004504 <_printf_i>:
 8004504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004508:	7e0f      	ldrb	r7, [r1, #24]
 800450a:	4691      	mov	r9, r2
 800450c:	2f78      	cmp	r7, #120	@ 0x78
 800450e:	4680      	mov	r8, r0
 8004510:	460c      	mov	r4, r1
 8004512:	469a      	mov	sl, r3
 8004514:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800451a:	d807      	bhi.n	800452c <_printf_i+0x28>
 800451c:	2f62      	cmp	r7, #98	@ 0x62
 800451e:	d80a      	bhi.n	8004536 <_printf_i+0x32>
 8004520:	2f00      	cmp	r7, #0
 8004522:	f000 80d3 	beq.w	80046cc <_printf_i+0x1c8>
 8004526:	2f58      	cmp	r7, #88	@ 0x58
 8004528:	f000 80ba 	beq.w	80046a0 <_printf_i+0x19c>
 800452c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004534:	e03a      	b.n	80045ac <_printf_i+0xa8>
 8004536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800453a:	2b15      	cmp	r3, #21
 800453c:	d8f6      	bhi.n	800452c <_printf_i+0x28>
 800453e:	a101      	add	r1, pc, #4	@ (adr r1, 8004544 <_printf_i+0x40>)
 8004540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004544:	0800459d 	.word	0x0800459d
 8004548:	080045b1 	.word	0x080045b1
 800454c:	0800452d 	.word	0x0800452d
 8004550:	0800452d 	.word	0x0800452d
 8004554:	0800452d 	.word	0x0800452d
 8004558:	0800452d 	.word	0x0800452d
 800455c:	080045b1 	.word	0x080045b1
 8004560:	0800452d 	.word	0x0800452d
 8004564:	0800452d 	.word	0x0800452d
 8004568:	0800452d 	.word	0x0800452d
 800456c:	0800452d 	.word	0x0800452d
 8004570:	080046b3 	.word	0x080046b3
 8004574:	080045db 	.word	0x080045db
 8004578:	0800466d 	.word	0x0800466d
 800457c:	0800452d 	.word	0x0800452d
 8004580:	0800452d 	.word	0x0800452d
 8004584:	080046d5 	.word	0x080046d5
 8004588:	0800452d 	.word	0x0800452d
 800458c:	080045db 	.word	0x080045db
 8004590:	0800452d 	.word	0x0800452d
 8004594:	0800452d 	.word	0x0800452d
 8004598:	08004675 	.word	0x08004675
 800459c:	6833      	ldr	r3, [r6, #0]
 800459e:	1d1a      	adds	r2, r3, #4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6032      	str	r2, [r6, #0]
 80045a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045ac:	2301      	movs	r3, #1
 80045ae:	e09e      	b.n	80046ee <_printf_i+0x1ea>
 80045b0:	6833      	ldr	r3, [r6, #0]
 80045b2:	6820      	ldr	r0, [r4, #0]
 80045b4:	1d19      	adds	r1, r3, #4
 80045b6:	6031      	str	r1, [r6, #0]
 80045b8:	0606      	lsls	r6, r0, #24
 80045ba:	d501      	bpl.n	80045c0 <_printf_i+0xbc>
 80045bc:	681d      	ldr	r5, [r3, #0]
 80045be:	e003      	b.n	80045c8 <_printf_i+0xc4>
 80045c0:	0645      	lsls	r5, r0, #25
 80045c2:	d5fb      	bpl.n	80045bc <_printf_i+0xb8>
 80045c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045c8:	2d00      	cmp	r5, #0
 80045ca:	da03      	bge.n	80045d4 <_printf_i+0xd0>
 80045cc:	232d      	movs	r3, #45	@ 0x2d
 80045ce:	426d      	negs	r5, r5
 80045d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045d4:	230a      	movs	r3, #10
 80045d6:	4859      	ldr	r0, [pc, #356]	@ (800473c <_printf_i+0x238>)
 80045d8:	e011      	b.n	80045fe <_printf_i+0xfa>
 80045da:	6821      	ldr	r1, [r4, #0]
 80045dc:	6833      	ldr	r3, [r6, #0]
 80045de:	0608      	lsls	r0, r1, #24
 80045e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80045e4:	d402      	bmi.n	80045ec <_printf_i+0xe8>
 80045e6:	0649      	lsls	r1, r1, #25
 80045e8:	bf48      	it	mi
 80045ea:	b2ad      	uxthmi	r5, r5
 80045ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80045ee:	6033      	str	r3, [r6, #0]
 80045f0:	bf14      	ite	ne
 80045f2:	230a      	movne	r3, #10
 80045f4:	2308      	moveq	r3, #8
 80045f6:	4851      	ldr	r0, [pc, #324]	@ (800473c <_printf_i+0x238>)
 80045f8:	2100      	movs	r1, #0
 80045fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045fe:	6866      	ldr	r6, [r4, #4]
 8004600:	2e00      	cmp	r6, #0
 8004602:	bfa8      	it	ge
 8004604:	6821      	ldrge	r1, [r4, #0]
 8004606:	60a6      	str	r6, [r4, #8]
 8004608:	bfa4      	itt	ge
 800460a:	f021 0104 	bicge.w	r1, r1, #4
 800460e:	6021      	strge	r1, [r4, #0]
 8004610:	b90d      	cbnz	r5, 8004616 <_printf_i+0x112>
 8004612:	2e00      	cmp	r6, #0
 8004614:	d04b      	beq.n	80046ae <_printf_i+0x1aa>
 8004616:	4616      	mov	r6, r2
 8004618:	fbb5 f1f3 	udiv	r1, r5, r3
 800461c:	fb03 5711 	mls	r7, r3, r1, r5
 8004620:	5dc7      	ldrb	r7, [r0, r7]
 8004622:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004626:	462f      	mov	r7, r5
 8004628:	42bb      	cmp	r3, r7
 800462a:	460d      	mov	r5, r1
 800462c:	d9f4      	bls.n	8004618 <_printf_i+0x114>
 800462e:	2b08      	cmp	r3, #8
 8004630:	d10b      	bne.n	800464a <_printf_i+0x146>
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	07df      	lsls	r7, r3, #31
 8004636:	d508      	bpl.n	800464a <_printf_i+0x146>
 8004638:	6923      	ldr	r3, [r4, #16]
 800463a:	6861      	ldr	r1, [r4, #4]
 800463c:	4299      	cmp	r1, r3
 800463e:	bfde      	ittt	le
 8004640:	2330      	movle	r3, #48	@ 0x30
 8004642:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004646:	f106 36ff 	addle.w	r6, r6, #4294967295
 800464a:	1b92      	subs	r2, r2, r6
 800464c:	6122      	str	r2, [r4, #16]
 800464e:	464b      	mov	r3, r9
 8004650:	4621      	mov	r1, r4
 8004652:	4640      	mov	r0, r8
 8004654:	f8cd a000 	str.w	sl, [sp]
 8004658:	aa03      	add	r2, sp, #12
 800465a:	f7ff fee1 	bl	8004420 <_printf_common>
 800465e:	3001      	adds	r0, #1
 8004660:	d14a      	bne.n	80046f8 <_printf_i+0x1f4>
 8004662:	f04f 30ff 	mov.w	r0, #4294967295
 8004666:	b004      	add	sp, #16
 8004668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	f043 0320 	orr.w	r3, r3, #32
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	2778      	movs	r7, #120	@ 0x78
 8004676:	4832      	ldr	r0, [pc, #200]	@ (8004740 <_printf_i+0x23c>)
 8004678:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	6831      	ldr	r1, [r6, #0]
 8004680:	061f      	lsls	r7, r3, #24
 8004682:	f851 5b04 	ldr.w	r5, [r1], #4
 8004686:	d402      	bmi.n	800468e <_printf_i+0x18a>
 8004688:	065f      	lsls	r7, r3, #25
 800468a:	bf48      	it	mi
 800468c:	b2ad      	uxthmi	r5, r5
 800468e:	6031      	str	r1, [r6, #0]
 8004690:	07d9      	lsls	r1, r3, #31
 8004692:	bf44      	itt	mi
 8004694:	f043 0320 	orrmi.w	r3, r3, #32
 8004698:	6023      	strmi	r3, [r4, #0]
 800469a:	b11d      	cbz	r5, 80046a4 <_printf_i+0x1a0>
 800469c:	2310      	movs	r3, #16
 800469e:	e7ab      	b.n	80045f8 <_printf_i+0xf4>
 80046a0:	4826      	ldr	r0, [pc, #152]	@ (800473c <_printf_i+0x238>)
 80046a2:	e7e9      	b.n	8004678 <_printf_i+0x174>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	f023 0320 	bic.w	r3, r3, #32
 80046aa:	6023      	str	r3, [r4, #0]
 80046ac:	e7f6      	b.n	800469c <_printf_i+0x198>
 80046ae:	4616      	mov	r6, r2
 80046b0:	e7bd      	b.n	800462e <_printf_i+0x12a>
 80046b2:	6833      	ldr	r3, [r6, #0]
 80046b4:	6825      	ldr	r5, [r4, #0]
 80046b6:	1d18      	adds	r0, r3, #4
 80046b8:	6961      	ldr	r1, [r4, #20]
 80046ba:	6030      	str	r0, [r6, #0]
 80046bc:	062e      	lsls	r6, r5, #24
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	d501      	bpl.n	80046c6 <_printf_i+0x1c2>
 80046c2:	6019      	str	r1, [r3, #0]
 80046c4:	e002      	b.n	80046cc <_printf_i+0x1c8>
 80046c6:	0668      	lsls	r0, r5, #25
 80046c8:	d5fb      	bpl.n	80046c2 <_printf_i+0x1be>
 80046ca:	8019      	strh	r1, [r3, #0]
 80046cc:	2300      	movs	r3, #0
 80046ce:	4616      	mov	r6, r2
 80046d0:	6123      	str	r3, [r4, #16]
 80046d2:	e7bc      	b.n	800464e <_printf_i+0x14a>
 80046d4:	6833      	ldr	r3, [r6, #0]
 80046d6:	2100      	movs	r1, #0
 80046d8:	1d1a      	adds	r2, r3, #4
 80046da:	6032      	str	r2, [r6, #0]
 80046dc:	681e      	ldr	r6, [r3, #0]
 80046de:	6862      	ldr	r2, [r4, #4]
 80046e0:	4630      	mov	r0, r6
 80046e2:	f000 f9c9 	bl	8004a78 <memchr>
 80046e6:	b108      	cbz	r0, 80046ec <_printf_i+0x1e8>
 80046e8:	1b80      	subs	r0, r0, r6
 80046ea:	6060      	str	r0, [r4, #4]
 80046ec:	6863      	ldr	r3, [r4, #4]
 80046ee:	6123      	str	r3, [r4, #16]
 80046f0:	2300      	movs	r3, #0
 80046f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046f6:	e7aa      	b.n	800464e <_printf_i+0x14a>
 80046f8:	4632      	mov	r2, r6
 80046fa:	4649      	mov	r1, r9
 80046fc:	4640      	mov	r0, r8
 80046fe:	6923      	ldr	r3, [r4, #16]
 8004700:	47d0      	blx	sl
 8004702:	3001      	adds	r0, #1
 8004704:	d0ad      	beq.n	8004662 <_printf_i+0x15e>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	079b      	lsls	r3, r3, #30
 800470a:	d413      	bmi.n	8004734 <_printf_i+0x230>
 800470c:	68e0      	ldr	r0, [r4, #12]
 800470e:	9b03      	ldr	r3, [sp, #12]
 8004710:	4298      	cmp	r0, r3
 8004712:	bfb8      	it	lt
 8004714:	4618      	movlt	r0, r3
 8004716:	e7a6      	b.n	8004666 <_printf_i+0x162>
 8004718:	2301      	movs	r3, #1
 800471a:	4632      	mov	r2, r6
 800471c:	4649      	mov	r1, r9
 800471e:	4640      	mov	r0, r8
 8004720:	47d0      	blx	sl
 8004722:	3001      	adds	r0, #1
 8004724:	d09d      	beq.n	8004662 <_printf_i+0x15e>
 8004726:	3501      	adds	r5, #1
 8004728:	68e3      	ldr	r3, [r4, #12]
 800472a:	9903      	ldr	r1, [sp, #12]
 800472c:	1a5b      	subs	r3, r3, r1
 800472e:	42ab      	cmp	r3, r5
 8004730:	dcf2      	bgt.n	8004718 <_printf_i+0x214>
 8004732:	e7eb      	b.n	800470c <_printf_i+0x208>
 8004734:	2500      	movs	r5, #0
 8004736:	f104 0619 	add.w	r6, r4, #25
 800473a:	e7f5      	b.n	8004728 <_printf_i+0x224>
 800473c:	08004cfa 	.word	0x08004cfa
 8004740:	08004d0b 	.word	0x08004d0b

08004744 <__sflush_r>:
 8004744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	0716      	lsls	r6, r2, #28
 800474c:	4605      	mov	r5, r0
 800474e:	460c      	mov	r4, r1
 8004750:	d454      	bmi.n	80047fc <__sflush_r+0xb8>
 8004752:	684b      	ldr	r3, [r1, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	dc02      	bgt.n	800475e <__sflush_r+0x1a>
 8004758:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	dd48      	ble.n	80047f0 <__sflush_r+0xac>
 800475e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004760:	2e00      	cmp	r6, #0
 8004762:	d045      	beq.n	80047f0 <__sflush_r+0xac>
 8004764:	2300      	movs	r3, #0
 8004766:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800476a:	682f      	ldr	r7, [r5, #0]
 800476c:	6a21      	ldr	r1, [r4, #32]
 800476e:	602b      	str	r3, [r5, #0]
 8004770:	d030      	beq.n	80047d4 <__sflush_r+0x90>
 8004772:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	0759      	lsls	r1, r3, #29
 8004778:	d505      	bpl.n	8004786 <__sflush_r+0x42>
 800477a:	6863      	ldr	r3, [r4, #4]
 800477c:	1ad2      	subs	r2, r2, r3
 800477e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004780:	b10b      	cbz	r3, 8004786 <__sflush_r+0x42>
 8004782:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004784:	1ad2      	subs	r2, r2, r3
 8004786:	2300      	movs	r3, #0
 8004788:	4628      	mov	r0, r5
 800478a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800478c:	6a21      	ldr	r1, [r4, #32]
 800478e:	47b0      	blx	r6
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	89a3      	ldrh	r3, [r4, #12]
 8004794:	d106      	bne.n	80047a4 <__sflush_r+0x60>
 8004796:	6829      	ldr	r1, [r5, #0]
 8004798:	291d      	cmp	r1, #29
 800479a:	d82b      	bhi.n	80047f4 <__sflush_r+0xb0>
 800479c:	4a28      	ldr	r2, [pc, #160]	@ (8004840 <__sflush_r+0xfc>)
 800479e:	410a      	asrs	r2, r1
 80047a0:	07d6      	lsls	r6, r2, #31
 80047a2:	d427      	bmi.n	80047f4 <__sflush_r+0xb0>
 80047a4:	2200      	movs	r2, #0
 80047a6:	6062      	str	r2, [r4, #4]
 80047a8:	6922      	ldr	r2, [r4, #16]
 80047aa:	04d9      	lsls	r1, r3, #19
 80047ac:	6022      	str	r2, [r4, #0]
 80047ae:	d504      	bpl.n	80047ba <__sflush_r+0x76>
 80047b0:	1c42      	adds	r2, r0, #1
 80047b2:	d101      	bne.n	80047b8 <__sflush_r+0x74>
 80047b4:	682b      	ldr	r3, [r5, #0]
 80047b6:	b903      	cbnz	r3, 80047ba <__sflush_r+0x76>
 80047b8:	6560      	str	r0, [r4, #84]	@ 0x54
 80047ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047bc:	602f      	str	r7, [r5, #0]
 80047be:	b1b9      	cbz	r1, 80047f0 <__sflush_r+0xac>
 80047c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047c4:	4299      	cmp	r1, r3
 80047c6:	d002      	beq.n	80047ce <__sflush_r+0x8a>
 80047c8:	4628      	mov	r0, r5
 80047ca:	f7ff fa9b 	bl	8003d04 <_free_r>
 80047ce:	2300      	movs	r3, #0
 80047d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80047d2:	e00d      	b.n	80047f0 <__sflush_r+0xac>
 80047d4:	2301      	movs	r3, #1
 80047d6:	4628      	mov	r0, r5
 80047d8:	47b0      	blx	r6
 80047da:	4602      	mov	r2, r0
 80047dc:	1c50      	adds	r0, r2, #1
 80047de:	d1c9      	bne.n	8004774 <__sflush_r+0x30>
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0c6      	beq.n	8004774 <__sflush_r+0x30>
 80047e6:	2b1d      	cmp	r3, #29
 80047e8:	d001      	beq.n	80047ee <__sflush_r+0xaa>
 80047ea:	2b16      	cmp	r3, #22
 80047ec:	d11d      	bne.n	800482a <__sflush_r+0xe6>
 80047ee:	602f      	str	r7, [r5, #0]
 80047f0:	2000      	movs	r0, #0
 80047f2:	e021      	b.n	8004838 <__sflush_r+0xf4>
 80047f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047f8:	b21b      	sxth	r3, r3
 80047fa:	e01a      	b.n	8004832 <__sflush_r+0xee>
 80047fc:	690f      	ldr	r7, [r1, #16]
 80047fe:	2f00      	cmp	r7, #0
 8004800:	d0f6      	beq.n	80047f0 <__sflush_r+0xac>
 8004802:	0793      	lsls	r3, r2, #30
 8004804:	bf18      	it	ne
 8004806:	2300      	movne	r3, #0
 8004808:	680e      	ldr	r6, [r1, #0]
 800480a:	bf08      	it	eq
 800480c:	694b      	ldreq	r3, [r1, #20]
 800480e:	1bf6      	subs	r6, r6, r7
 8004810:	600f      	str	r7, [r1, #0]
 8004812:	608b      	str	r3, [r1, #8]
 8004814:	2e00      	cmp	r6, #0
 8004816:	ddeb      	ble.n	80047f0 <__sflush_r+0xac>
 8004818:	4633      	mov	r3, r6
 800481a:	463a      	mov	r2, r7
 800481c:	4628      	mov	r0, r5
 800481e:	6a21      	ldr	r1, [r4, #32]
 8004820:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004824:	47e0      	blx	ip
 8004826:	2800      	cmp	r0, #0
 8004828:	dc07      	bgt.n	800483a <__sflush_r+0xf6>
 800482a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800482e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004832:	f04f 30ff 	mov.w	r0, #4294967295
 8004836:	81a3      	strh	r3, [r4, #12]
 8004838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800483a:	4407      	add	r7, r0
 800483c:	1a36      	subs	r6, r6, r0
 800483e:	e7e9      	b.n	8004814 <__sflush_r+0xd0>
 8004840:	dfbffffe 	.word	0xdfbffffe

08004844 <_fflush_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	690b      	ldr	r3, [r1, #16]
 8004848:	4605      	mov	r5, r0
 800484a:	460c      	mov	r4, r1
 800484c:	b913      	cbnz	r3, 8004854 <_fflush_r+0x10>
 800484e:	2500      	movs	r5, #0
 8004850:	4628      	mov	r0, r5
 8004852:	bd38      	pop	{r3, r4, r5, pc}
 8004854:	b118      	cbz	r0, 800485e <_fflush_r+0x1a>
 8004856:	6a03      	ldr	r3, [r0, #32]
 8004858:	b90b      	cbnz	r3, 800485e <_fflush_r+0x1a>
 800485a:	f7ff f813 	bl	8003884 <__sinit>
 800485e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f3      	beq.n	800484e <_fflush_r+0xa>
 8004866:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004868:	07d0      	lsls	r0, r2, #31
 800486a:	d404      	bmi.n	8004876 <_fflush_r+0x32>
 800486c:	0599      	lsls	r1, r3, #22
 800486e:	d402      	bmi.n	8004876 <_fflush_r+0x32>
 8004870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004872:	f7ff fa30 	bl	8003cd6 <__retarget_lock_acquire_recursive>
 8004876:	4628      	mov	r0, r5
 8004878:	4621      	mov	r1, r4
 800487a:	f7ff ff63 	bl	8004744 <__sflush_r>
 800487e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004880:	4605      	mov	r5, r0
 8004882:	07da      	lsls	r2, r3, #31
 8004884:	d4e4      	bmi.n	8004850 <_fflush_r+0xc>
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	059b      	lsls	r3, r3, #22
 800488a:	d4e1      	bmi.n	8004850 <_fflush_r+0xc>
 800488c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800488e:	f7ff fa23 	bl	8003cd8 <__retarget_lock_release_recursive>
 8004892:	e7dd      	b.n	8004850 <_fflush_r+0xc>

08004894 <__swhatbuf_r>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	460c      	mov	r4, r1
 8004898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800489c:	4615      	mov	r5, r2
 800489e:	2900      	cmp	r1, #0
 80048a0:	461e      	mov	r6, r3
 80048a2:	b096      	sub	sp, #88	@ 0x58
 80048a4:	da0c      	bge.n	80048c0 <__swhatbuf_r+0x2c>
 80048a6:	89a3      	ldrh	r3, [r4, #12]
 80048a8:	2100      	movs	r1, #0
 80048aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80048ae:	bf14      	ite	ne
 80048b0:	2340      	movne	r3, #64	@ 0x40
 80048b2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80048b6:	2000      	movs	r0, #0
 80048b8:	6031      	str	r1, [r6, #0]
 80048ba:	602b      	str	r3, [r5, #0]
 80048bc:	b016      	add	sp, #88	@ 0x58
 80048be:	bd70      	pop	{r4, r5, r6, pc}
 80048c0:	466a      	mov	r2, sp
 80048c2:	f000 f893 	bl	80049ec <_fstat_r>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	dbed      	blt.n	80048a6 <__swhatbuf_r+0x12>
 80048ca:	9901      	ldr	r1, [sp, #4]
 80048cc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80048d0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80048d4:	4259      	negs	r1, r3
 80048d6:	4159      	adcs	r1, r3
 80048d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048dc:	e7eb      	b.n	80048b6 <__swhatbuf_r+0x22>

080048de <__smakebuf_r>:
 80048de:	898b      	ldrh	r3, [r1, #12]
 80048e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048e2:	079d      	lsls	r5, r3, #30
 80048e4:	4606      	mov	r6, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	d507      	bpl.n	80048fa <__smakebuf_r+0x1c>
 80048ea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80048ee:	6023      	str	r3, [r4, #0]
 80048f0:	6123      	str	r3, [r4, #16]
 80048f2:	2301      	movs	r3, #1
 80048f4:	6163      	str	r3, [r4, #20]
 80048f6:	b003      	add	sp, #12
 80048f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048fa:	466a      	mov	r2, sp
 80048fc:	ab01      	add	r3, sp, #4
 80048fe:	f7ff ffc9 	bl	8004894 <__swhatbuf_r>
 8004902:	9f00      	ldr	r7, [sp, #0]
 8004904:	4605      	mov	r5, r0
 8004906:	4639      	mov	r1, r7
 8004908:	4630      	mov	r0, r6
 800490a:	f7ff fa65 	bl	8003dd8 <_malloc_r>
 800490e:	b948      	cbnz	r0, 8004924 <__smakebuf_r+0x46>
 8004910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004914:	059a      	lsls	r2, r3, #22
 8004916:	d4ee      	bmi.n	80048f6 <__smakebuf_r+0x18>
 8004918:	f023 0303 	bic.w	r3, r3, #3
 800491c:	f043 0302 	orr.w	r3, r3, #2
 8004920:	81a3      	strh	r3, [r4, #12]
 8004922:	e7e2      	b.n	80048ea <__smakebuf_r+0xc>
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800492a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800492e:	81a3      	strh	r3, [r4, #12]
 8004930:	9b01      	ldr	r3, [sp, #4]
 8004932:	6020      	str	r0, [r4, #0]
 8004934:	b15b      	cbz	r3, 800494e <__smakebuf_r+0x70>
 8004936:	4630      	mov	r0, r6
 8004938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800493c:	f000 f868 	bl	8004a10 <_isatty_r>
 8004940:	b128      	cbz	r0, 800494e <__smakebuf_r+0x70>
 8004942:	89a3      	ldrh	r3, [r4, #12]
 8004944:	f023 0303 	bic.w	r3, r3, #3
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	81a3      	strh	r3, [r4, #12]
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	431d      	orrs	r5, r3
 8004952:	81a5      	strh	r5, [r4, #12]
 8004954:	e7cf      	b.n	80048f6 <__smakebuf_r+0x18>

08004956 <memmove>:
 8004956:	4288      	cmp	r0, r1
 8004958:	b510      	push	{r4, lr}
 800495a:	eb01 0402 	add.w	r4, r1, r2
 800495e:	d902      	bls.n	8004966 <memmove+0x10>
 8004960:	4284      	cmp	r4, r0
 8004962:	4623      	mov	r3, r4
 8004964:	d807      	bhi.n	8004976 <memmove+0x20>
 8004966:	1e43      	subs	r3, r0, #1
 8004968:	42a1      	cmp	r1, r4
 800496a:	d008      	beq.n	800497e <memmove+0x28>
 800496c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004970:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004974:	e7f8      	b.n	8004968 <memmove+0x12>
 8004976:	4601      	mov	r1, r0
 8004978:	4402      	add	r2, r0
 800497a:	428a      	cmp	r2, r1
 800497c:	d100      	bne.n	8004980 <memmove+0x2a>
 800497e:	bd10      	pop	{r4, pc}
 8004980:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004984:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004988:	e7f7      	b.n	800497a <memmove+0x24>

0800498a <_raise_r>:
 800498a:	291f      	cmp	r1, #31
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	4605      	mov	r5, r0
 8004990:	460c      	mov	r4, r1
 8004992:	d904      	bls.n	800499e <_raise_r+0x14>
 8004994:	2316      	movs	r3, #22
 8004996:	6003      	str	r3, [r0, #0]
 8004998:	f04f 30ff 	mov.w	r0, #4294967295
 800499c:	bd38      	pop	{r3, r4, r5, pc}
 800499e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80049a0:	b112      	cbz	r2, 80049a8 <_raise_r+0x1e>
 80049a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80049a6:	b94b      	cbnz	r3, 80049bc <_raise_r+0x32>
 80049a8:	4628      	mov	r0, r5
 80049aa:	f000 f853 	bl	8004a54 <_getpid_r>
 80049ae:	4622      	mov	r2, r4
 80049b0:	4601      	mov	r1, r0
 80049b2:	4628      	mov	r0, r5
 80049b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049b8:	f000 b83a 	b.w	8004a30 <_kill_r>
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d00a      	beq.n	80049d6 <_raise_r+0x4c>
 80049c0:	1c59      	adds	r1, r3, #1
 80049c2:	d103      	bne.n	80049cc <_raise_r+0x42>
 80049c4:	2316      	movs	r3, #22
 80049c6:	6003      	str	r3, [r0, #0]
 80049c8:	2001      	movs	r0, #1
 80049ca:	e7e7      	b.n	800499c <_raise_r+0x12>
 80049cc:	2100      	movs	r1, #0
 80049ce:	4620      	mov	r0, r4
 80049d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80049d4:	4798      	blx	r3
 80049d6:	2000      	movs	r0, #0
 80049d8:	e7e0      	b.n	800499c <_raise_r+0x12>
	...

080049dc <raise>:
 80049dc:	4b02      	ldr	r3, [pc, #8]	@ (80049e8 <raise+0xc>)
 80049de:	4601      	mov	r1, r0
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	f7ff bfd2 	b.w	800498a <_raise_r>
 80049e6:	bf00      	nop
 80049e8:	20000018 	.word	0x20000018

080049ec <_fstat_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	2300      	movs	r3, #0
 80049f0:	4d06      	ldr	r5, [pc, #24]	@ (8004a0c <_fstat_r+0x20>)
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	4611      	mov	r1, r2
 80049f8:	602b      	str	r3, [r5, #0]
 80049fa:	f7fb ff33 	bl	8000864 <_fstat>
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	d102      	bne.n	8004a08 <_fstat_r+0x1c>
 8004a02:	682b      	ldr	r3, [r5, #0]
 8004a04:	b103      	cbz	r3, 8004a08 <_fstat_r+0x1c>
 8004a06:	6023      	str	r3, [r4, #0]
 8004a08:	bd38      	pop	{r3, r4, r5, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000340 	.word	0x20000340

08004a10 <_isatty_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	2300      	movs	r3, #0
 8004a14:	4d05      	ldr	r5, [pc, #20]	@ (8004a2c <_isatty_r+0x1c>)
 8004a16:	4604      	mov	r4, r0
 8004a18:	4608      	mov	r0, r1
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	f7fb ff31 	bl	8000882 <_isatty>
 8004a20:	1c43      	adds	r3, r0, #1
 8004a22:	d102      	bne.n	8004a2a <_isatty_r+0x1a>
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	b103      	cbz	r3, 8004a2a <_isatty_r+0x1a>
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	20000340 	.word	0x20000340

08004a30 <_kill_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	2300      	movs	r3, #0
 8004a34:	4d06      	ldr	r5, [pc, #24]	@ (8004a50 <_kill_r+0x20>)
 8004a36:	4604      	mov	r4, r0
 8004a38:	4608      	mov	r0, r1
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	602b      	str	r3, [r5, #0]
 8004a3e:	f7fb feb2 	bl	80007a6 <_kill>
 8004a42:	1c43      	adds	r3, r0, #1
 8004a44:	d102      	bne.n	8004a4c <_kill_r+0x1c>
 8004a46:	682b      	ldr	r3, [r5, #0]
 8004a48:	b103      	cbz	r3, 8004a4c <_kill_r+0x1c>
 8004a4a:	6023      	str	r3, [r4, #0]
 8004a4c:	bd38      	pop	{r3, r4, r5, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000340 	.word	0x20000340

08004a54 <_getpid_r>:
 8004a54:	f7fb bea0 	b.w	8000798 <_getpid>

08004a58 <_sbrk_r>:
 8004a58:	b538      	push	{r3, r4, r5, lr}
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	4d05      	ldr	r5, [pc, #20]	@ (8004a74 <_sbrk_r+0x1c>)
 8004a5e:	4604      	mov	r4, r0
 8004a60:	4608      	mov	r0, r1
 8004a62:	602b      	str	r3, [r5, #0]
 8004a64:	f7fb ff24 	bl	80008b0 <_sbrk>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <_sbrk_r+0x1a>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	b103      	cbz	r3, 8004a72 <_sbrk_r+0x1a>
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	20000340 	.word	0x20000340

08004a78 <memchr>:
 8004a78:	4603      	mov	r3, r0
 8004a7a:	b510      	push	{r4, lr}
 8004a7c:	b2c9      	uxtb	r1, r1
 8004a7e:	4402      	add	r2, r0
 8004a80:	4293      	cmp	r3, r2
 8004a82:	4618      	mov	r0, r3
 8004a84:	d101      	bne.n	8004a8a <memchr+0x12>
 8004a86:	2000      	movs	r0, #0
 8004a88:	e003      	b.n	8004a92 <memchr+0x1a>
 8004a8a:	7804      	ldrb	r4, [r0, #0]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	428c      	cmp	r4, r1
 8004a90:	d1f6      	bne.n	8004a80 <memchr+0x8>
 8004a92:	bd10      	pop	{r4, pc}

08004a94 <_realloc_r>:
 8004a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a98:	4680      	mov	r8, r0
 8004a9a:	4615      	mov	r5, r2
 8004a9c:	460c      	mov	r4, r1
 8004a9e:	b921      	cbnz	r1, 8004aaa <_realloc_r+0x16>
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa6:	f7ff b997 	b.w	8003dd8 <_malloc_r>
 8004aaa:	b92a      	cbnz	r2, 8004ab8 <_realloc_r+0x24>
 8004aac:	f7ff f92a 	bl	8003d04 <_free_r>
 8004ab0:	2400      	movs	r4, #0
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ab8:	f000 f81a 	bl	8004af0 <_malloc_usable_size_r>
 8004abc:	4285      	cmp	r5, r0
 8004abe:	4606      	mov	r6, r0
 8004ac0:	d802      	bhi.n	8004ac8 <_realloc_r+0x34>
 8004ac2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ac6:	d8f4      	bhi.n	8004ab2 <_realloc_r+0x1e>
 8004ac8:	4629      	mov	r1, r5
 8004aca:	4640      	mov	r0, r8
 8004acc:	f7ff f984 	bl	8003dd8 <_malloc_r>
 8004ad0:	4607      	mov	r7, r0
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d0ec      	beq.n	8004ab0 <_realloc_r+0x1c>
 8004ad6:	42b5      	cmp	r5, r6
 8004ad8:	462a      	mov	r2, r5
 8004ada:	4621      	mov	r1, r4
 8004adc:	bf28      	it	cs
 8004ade:	4632      	movcs	r2, r6
 8004ae0:	f7ff f8fb 	bl	8003cda <memcpy>
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4640      	mov	r0, r8
 8004ae8:	f7ff f90c 	bl	8003d04 <_free_r>
 8004aec:	463c      	mov	r4, r7
 8004aee:	e7e0      	b.n	8004ab2 <_realloc_r+0x1e>

08004af0 <_malloc_usable_size_r>:
 8004af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004af4:	1f18      	subs	r0, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	bfbc      	itt	lt
 8004afa:	580b      	ldrlt	r3, [r1, r0]
 8004afc:	18c0      	addlt	r0, r0, r3
 8004afe:	4770      	bx	lr

08004b00 <_init>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	bf00      	nop
 8004b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b06:	bc08      	pop	{r3}
 8004b08:	469e      	mov	lr, r3
 8004b0a:	4770      	bx	lr

08004b0c <_fini>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	bf00      	nop
 8004b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b12:	bc08      	pop	{r3}
 8004b14:	469e      	mov	lr, r3
 8004b16:	4770      	bx	lr
